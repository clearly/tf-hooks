{
    "version": 3,
    "terraform_version": "0.7.13",
    "serial": 19,
    "lineage": "2869e74e-f297-4eff-8844-0490f6518b00",
    "modules": [
        {
            "path": [
                "root"
            ],
            "outputs": {},
            "resources": {
                "aws_db_instance.xyz_pudxyzd1026": {
                    "type": "aws_db_instance",
                    "depends_on": [
                        "aws_db_subnet_group.xyz_pudxyzd1026_subnet_group",
                        "data.terraform_remote_state.net"
                    ],
                    "primary": {
                        "id": "pudxyzd1026",
                        "attributes": {
                            "address": "pudxyzd1026.qsdvawtthcyf.us-west-2.rds.amazonaws.com",
                            "allocated_storage": "50",
                            "arn": "arn:aws:rds:us-west-2:349261487538:db:pudxyzd1026",
                            "auto_minor_version_upgrade": "true",
                            "availability_zone": "us-west-2a",
                            "backup_retention_period": "0",
                            "backup_window": "11:21-11:51",
                            "character_set_name": "AL32UTF8",
                            "copy_tags_to_snapshot": "true",
                            "db_subnet_group_name": "xyz_dev_pudxyzd1026_subnet_group",
                            "endpoint": "pudxyzd1026.qsdvawtthcyf.us-west-2.rds.amazonaws.com:1521",
                            "engine": "oracle-se2",
                            "engine_version": "12.1.0.2.v6",
                            "hosted_zone_id": "Z1PVIF0B656C1W",
                            "id": "pudxyzd1026",
                            "identifier": "pudxyzd1026",
                            "instance_class": "db.m4.large",
                            "iops": "0",
                            "kms_key_id": "arn:aws:kms:us-west-2:349261487538:key/d5af8a75-0a19-20a7-8f53-080a4313330d",
                            "license_model": "bring-your-own-license",
                            "maintenance_window": "mon:10:22-mon:10:52",
                            "monitoring_interval": "0",
                            "multi_az": "false",
                            "name": "DXYZ26",
                            "option_group_name": "default:oracle-se2-12-1",
                            "parameter_group_name": "default.oracle-se2-12.1",
                            "password": "password",
                            "port": "1521",
                            "publicly_accessible": "false",
                            "replicas.#": "0",
                            "replicate_source_db": "",
                            "security_group_names.#": "0",
                            "skip_final_snapshot": "true",
                            "status": "available",
                            "storage_encrypted": "true",
                            "storage_type": "standard",
                            "tags.%": "6",
                            "tags.ApplicationCode": "XYZ",
                            "tags.ApplicationId": "UID12345789",
                            "tags.CostCenter": "BOGUS",
                            "tags.DRClass": "DR2",
                            "tags.Environment": "DEV",
                            "tags.SecClass": "Really Secret",
                            "username": "admin",
                            "vpc_security_group_ids.#": "1",
                            "vpc_security_group_ids.1496878414": "sg-b8720ba9"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                },
                "aws_db_instance.xyz_pudxyzd1027": {
                    "type": "aws_db_instance",
                    "depends_on": [
                        "aws_db_subnet_group.xyz_pudxyzd1027_subnet_group",
                        "data.terraform_remote_state.net"
                    ],
                    "primary": {
                        "id": "pudxyzd1027",
                        "attributes": {
                            "address": "pudxyzd1027.qsdvawtthcyf.us-west-2.rds.amazonaws.com",
                            "allocated_storage": "50",
                            "arn": "arn:aws:rds:us-west-2:349261487538:db:pudxyzd1027",
                            "auto_minor_version_upgrade": "true",
                            "availability_zone": "us-west-2a",
                            "backup_retention_period": "0",
                            "backup_window": "10:34-11:04",
                            "character_set_name": "AL32UTF8",
                            "copy_tags_to_snapshot": "true",
                            "db_subnet_group_name": "xyz_dev_pudxyzd1027_subnet_group",
                            "endpoint": "pudxyzd1027.qsdvawtthcyf.us-west-2.rds.amazonaws.com:1521",
                            "engine": "oracle-se2",
                            "engine_version": "12.1.0.2.v6",
                            "hosted_zone_id": "Z1PVIF0B656C1W",
                            "id": "pudxyzd1027",
                            "identifier": "pudxyzd1027",
                            "instance_class": "db.m4.large",
                            "iops": "0",
                            "kms_key_id": "arn:aws:kms:us-west-2:349261487538:key/d5af8a75-0a19-20a7-8f53-080a4313330d",
                            "license_model": "bring-your-own-license",
                            "maintenance_window": "wed:09:46-wed:10:16",
                            "monitoring_interval": "0",
                            "multi_az": "false",
                            "name": "DXYZ27",
                            "option_group_name": "default:oracle-se2-12-1",
                            "parameter_group_name": "default.oracle-se2-12.1",
                            "password": "password",
                            "port": "1521",
                            "publicly_accessible": "false",
                            "replicas.#": "0",
                            "replicate_source_db": "",
                            "security_group_names.#": "0",
                            "skip_final_snapshot": "true",
                            "status": "available",
                            "storage_encrypted": "true",
                            "storage_type": "standard",
                            "tags.%": "6",
                            "tags.ApplicationCode": "XYZ",
                            "tags.ApplicationId": "UID12345789",
                            "tags.CostCenter": "BOGUS",
                            "tags.DRClass": "DR2",
                            "tags.Environment": "DEV",
                            "tags.SecClass": "Really Secret",
                            "username": "admin",
                            "vpc_security_group_ids.#": "1",
                            "vpc_security_group_ids.1496878414": "sg-b8720ba9"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                },
                "aws_db_instance.xyz_pudxyzd1028": {
                    "type": "aws_db_instance",
                    "depends_on": [
                        "aws_db_subnet_group.xyz_pudxyzd1028_subnet_group",
                        "data.terraform_remote_state.net"
                    ],
                    "primary": {
                        "id": "pudxyzd1028",
                        "attributes": {
                            "address": "pudxyzd1028.qsdvawtthcyf.us-west-2.rds.amazonaws.com",
                            "allocated_storage": "50",
                            "arn": "arn:aws:rds:us-west-2:349261487538:db:pudxyzd1028",
                            "auto_minor_version_upgrade": "true",
                            "availability_zone": "us-west-2b",
                            "backup_retention_period": "0",
                            "backup_window": "06:52-07:22",
                            "character_set_name": "AL32UTF8",
                            "copy_tags_to_snapshot": "true",
                            "db_subnet_group_name": "xyz_dev_pudxyzd1028_subnet_group",
                            "endpoint": "pudxyzd1028.qsdvawtthcyf.us-west-2.rds.amazonaws.com:1521",
                            "engine": "oracle-se2",
                            "engine_version": "12.1.0.2.v6",
                            "hosted_zone_id": "Z1PVIF0B656C1W",
                            "id": "pudxyzd1028",
                            "identifier": "pudxyzd1028",
                            "instance_class": "db.m4.large",
                            "iops": "0",
                            "kms_key_id": "arn:aws:kms:us-west-2:349261487538:key/d5af8a75-0a19-20a7-8f53-080a4313330d",
                            "license_model": "bring-your-own-license",
                            "maintenance_window": "wed:09:10-wed:09:40",
                            "monitoring_interval": "0",
                            "multi_az": "false",
                            "name": "DXYZ28",
                            "option_group_name": "default:oracle-se2-12-1",
                            "parameter_group_name": "default.oracle-se2-12.1",
                            "password": "password",
                            "port": "1521",
                            "publicly_accessible": "false",
                            "replicas.#": "0",
                            "replicate_source_db": "",
                            "security_group_names.#": "0",
                            "skip_final_snapshot": "true",
                            "status": "available",
                            "storage_encrypted": "true",
                            "storage_type": "standard",
                            "tags.%": "6",
                            "tags.ApplicationCode": "XYZ",
                            "tags.ApplicationId": "UID12345789",
                            "tags.CostCenter": "BOGUS",
                            "tags.DRClass": "DR2",
                            "tags.Environment": "DEV",
                            "tags.SecClass": "Really Secret",
                            "username": "admin",
                            "vpc_security_group_ids.#": "1",
                            "vpc_security_group_ids.1496878414": "sg-b8720ba9"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                },
                "aws_db_instance.xyz_pudxyzd1029": {
                    "type": "aws_db_instance",
                    "depends_on": [
                        "aws_db_subnet_group.xyz_pudxyzd1029_subnet_group",
                        "data.terraform_remote_state.net"
                    ],
                    "primary": {
                        "id": "pudxyzd1029",
                        "attributes": {
                            "address": "pudxyzd1029.qsdvawtthcyf.us-west-2.rds.amazonaws.com",
                            "allocated_storage": "50",
                            "arn": "arn:aws:rds:us-west-2:349261487538:db:pudxyzd1029",
                            "auto_minor_version_upgrade": "true",
                            "availability_zone": "us-west-2b",
                            "backup_retention_period": "0",
                            "backup_window": "06:58-07:28",
                            "character_set_name": "AL32UTF8",
                            "copy_tags_to_snapshot": "true",
                            "db_subnet_group_name": "xyz_dev_pudxyzd1029_subnet_group",
                            "endpoint": "pudxyzd1029.qsdvawtthcyf.us-west-2.rds.amazonaws.com:1521",
                            "engine": "oracle-se2",
                            "engine_version": "12.1.0.2.v6",
                            "hosted_zone_id": "Z1PVIF0B656C1W",
                            "id": "pudxyzd1029",
                            "identifier": "pudxyzd1029",
                            "instance_class": "db.m4.large",
                            "iops": "0",
                            "kms_key_id": "arn:aws:kms:us-west-2:349261487538:key/d5af8a75-0a19-20a7-8f53-080a4313330d",
                            "license_model": "bring-your-own-license",
                            "maintenance_window": "mon:06:04-mon:06:34",
                            "monitoring_interval": "0",
                            "multi_az": "false",
                            "name": "DXYZ29",
                            "option_group_name": "default:oracle-se2-12-1",
                            "parameter_group_name": "default.oracle-se2-12.1",
                            "password": "password",
                            "port": "1521",
                            "publicly_accessible": "false",
                            "replicas.#": "0",
                            "replicate_source_db": "",
                            "security_group_names.#": "0",
                            "skip_final_snapshot": "true",
                            "status": "available",
                            "storage_encrypted": "true",
                            "storage_type": "standard",
                            "tags.%": "6",
                            "tags.ApplicationCode": "XYZ",
                            "tags.ApplicationId": "UID12345789",
                            "tags.CostCenter": "BOGUS",
                            "tags.DRClass": "DR2",
                            "tags.Environment": "DEV",
                            "tags.SecClass": "Really Secret",
                            "username": "admin",
                            "vpc_security_group_ids.#": "1",
                            "vpc_security_group_ids.1496878414": "sg-b8720ba9"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                },
                "aws_db_instance.xyz_pudxyzd1030": {
                    "type": "aws_db_instance",
                    "depends_on": [
                        "aws_db_subnet_group.xyz_pudxyzd1030_subnet_group",
                        "data.terraform_remote_state.net"
                    ],
                    "primary": {
                        "id": "pudxyzd1030",
                        "attributes": {
                            "address": "pudxyzd1030.qsdvawtthcyf.us-west-2.rds.amazonaws.com",
                            "allocated_storage": "50",
                            "arn": "arn:aws:rds:us-west-2:349261487538:db:pudxyzd1030",
                            "auto_minor_version_upgrade": "true",
                            "availability_zone": "us-west-2a",
                            "backup_retention_period": "0",
                            "backup_window": "08:07-08:37",
                            "character_set_name": "AL32UTF8",
                            "copy_tags_to_snapshot": "true",
                            "db_subnet_group_name": "xyz_dev_pudxyzd1030_subnet_group",
                            "endpoint": "pudxyzd1030.qsdvawtthcyf.us-west-2.rds.amazonaws.com:1521",
                            "engine": "oracle-se2",
                            "engine_version": "12.1.0.2.v6",
                            "hosted_zone_id": "Z1PVIF0B656C1W",
                            "id": "pudxyzd1030",
                            "identifier": "pudxyzd1030",
                            "instance_class": "db.m4.large",
                            "iops": "0",
                            "kms_key_id": "arn:aws:kms:us-west-2:349261487538:key/d5af8a75-0a19-20a7-8f53-080a4313330d",
                            "license_model": "bring-your-own-license",
                            "maintenance_window": "fri:10:03-fri:10:33",
                            "monitoring_interval": "0",
                            "multi_az": "false",
                            "name": "DXYZ30",
                            "option_group_name": "default:oracle-se2-12-1",
                            "parameter_group_name": "default.oracle-se2-12.1",
                            "password": "password",
                            "port": "1521",
                            "publicly_accessible": "false",
                            "replicas.#": "0",
                            "replicate_source_db": "",
                            "security_group_names.#": "0",
                            "skip_final_snapshot": "true",
                            "status": "available",
                            "storage_encrypted": "true",
                            "storage_type": "standard",
                            "tags.%": "6",
                            "tags.ApplicationCode": "XYZ",
                            "tags.ApplicationId": "UID12345789",
                            "tags.CostCenter": "BOGUS",
                            "tags.DRClass": "DR2",
                            "tags.Environment": "DEV",
                            "tags.SecClass": "Really Secret",
                            "username": "admin",
                            "vpc_security_group_ids.#": "1",
                            "vpc_security_group_ids.1496878414": "sg-b8720ba9"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                },
                "aws_db_instance.xyz_pudxyzd1031": {
                    "type": "aws_db_instance",
                    "depends_on": [
                        "aws_db_subnet_group.xyz_pudxyzd1031_subnet_group",
                        "data.terraform_remote_state.net"
                    ],
                    "primary": {
                        "id": "pudxyzd1031",
                        "attributes": {
                            "address": "pudxyzd1031.qsdvawtthcyf.us-west-2.rds.amazonaws.com",
                            "allocated_storage": "50",
                            "arn": "arn:aws:rds:us-west-2:349261487538:db:pudxyzd1031",
                            "auto_minor_version_upgrade": "true",
                            "availability_zone": "us-west-2a",
                            "backup_retention_period": "0",
                            "backup_window": "12:20-12:50",
                            "character_set_name": "AL32UTF8",
                            "copy_tags_to_snapshot": "true",
                            "db_subnet_group_name": "xyz_dev_pudxyzd1031_subnet_group",
                            "endpoint": "pudxyzd1031.qsdvawtthcyf.us-west-2.rds.amazonaws.com:1521",
                            "engine": "oracle-se2",
                            "engine_version": "12.1.0.2.v6",
                            "hosted_zone_id": "Z1PVIF0B656C1W",
                            "id": "pudxyzd1031",
                            "identifier": "pudxyzd1031",
                            "instance_class": "db.m4.large",
                            "iops": "0",
                            "kms_key_id": "arn:aws:kms:us-west-2:349261487538:key/d5af8a75-0a19-20a7-8f53-080a4313330d",
                            "license_model": "bring-your-own-license",
                            "maintenance_window": "sat:09:22-sat:09:52",
                            "monitoring_interval": "0",
                            "multi_az": "false",
                            "name": "DXYZ31",
                            "option_group_name": "default:oracle-se2-12-1",
                            "parameter_group_name": "default.oracle-se2-12.1",
                            "password": "password",
                            "port": "1521",
                            "publicly_accessible": "false",
                            "replicas.#": "0",
                            "replicate_source_db": "",
                            "security_group_names.#": "0",
                            "skip_final_snapshot": "true",
                            "status": "available",
                            "storage_encrypted": "true",
                            "storage_type": "standard",
                            "tags.%": "6",
                            "tags.ApplicationCode": "XYZ",
                            "tags.ApplicationId": "UID12345789",
                            "tags.CostCenter": "BOGUS",
                            "tags.DRClass": "DR2",
                            "tags.Environment": "DEV",
                            "tags.SecClass": "Really Secret",
                            "username": "admin",
                            "vpc_security_group_ids.#": "1",
                            "vpc_security_group_ids.1496878414": "sg-b8720ba9"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                },
                "aws_db_subnet_group.xyz_pudxyzd1026_subnet_group": {
                    "type": "aws_db_subnet_group",
                    "depends_on": [],
                    "primary": {
                        "id": "xyz_dev_pudxyzd1026_subnet_group",
                        "attributes": {
                            "arn": "arn:aws:rds:us-west-2:349261487538:subgrp:xyz_dev_pudxyzd1026_subnet_group",
                            "description": "Managed by Terraform",
                            "id": "xyz_dev_pudxyzd1026_subnet_group",
                            "name": "xyz_dev_pudxyzd1026_subnet_group",
                            "subnet_ids.#": "2",
                            "subnet_ids.2418711982": "subnet-e4c7b143",
                            "subnet_ids.78257144": "subnet-04513588",
                            "tags.%": "0"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                },
                "aws_db_subnet_group.xyz_pudxyzd1027_subnet_group": {
                    "type": "aws_db_subnet_group",
                    "depends_on": [],
                    "primary": {
                        "id": "xyz_dev_pudxyzd1027_subnet_group",
                        "attributes": {
                            "arn": "arn:aws:rds:us-west-2:349261487538:subgrp:xyz_dev_pudxyzd1027_subnet_group",
                            "description": "Managed by Terraform",
                            "id": "xyz_dev_pudxyzd1027_subnet_group",
                            "name": "xyz_dev_pudxyzd1027_subnet_group",
                            "subnet_ids.#": "2",
                            "subnet_ids.2418711982": "subnet-e4c7b143",
                            "subnet_ids.78257144": "subnet-04513588",
                            "tags.%": "0"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                },
                "aws_db_subnet_group.xyz_pudxyzd1028_subnet_group": {
                    "type": "aws_db_subnet_group",
                    "depends_on": [],
                    "primary": {
                        "id": "xyz_dev_pudxyzd1028_subnet_group",
                        "attributes": {
                            "arn": "arn:aws:rds:us-west-2:349261487538:subgrp:xyz_dev_pudxyzd1028_subnet_group",
                            "description": "Managed by Terraform",
                            "id": "xyz_dev_pudxyzd1028_subnet_group",
                            "name": "xyz_dev_pudxyzd1028_subnet_group",
                            "subnet_ids.#": "2",
                            "subnet_ids.2418711982": "subnet-e4c7b143",
                            "subnet_ids.78257144": "subnet-04513588",
                            "tags.%": "0"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                },
                "aws_db_subnet_group.xyz_pudxyzd1029_subnet_group": {
                    "type": "aws_db_subnet_group",
                    "depends_on": [],
                    "primary": {
                        "id": "xyz_dev_pudxyzd1029_subnet_group",
                        "attributes": {
                            "arn": "arn:aws:rds:us-west-2:349261487538:subgrp:xyz_dev_pudxyzd1029_subnet_group",
                            "description": "Managed by Terraform",
                            "id": "xyz_dev_pudxyzd1029_subnet_group",
                            "name": "xyz_dev_pudxyzd1029_subnet_group",
                            "subnet_ids.#": "2",
                            "subnet_ids.2418711982": "subnet-e4c7b143",
                            "subnet_ids.78257144": "subnet-04513588",
                            "tags.%": "0"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                },
                "aws_db_subnet_group.xyz_pudxyzd1030_subnet_group": {
                    "type": "aws_db_subnet_group",
                    "depends_on": [],
                    "primary": {
                        "id": "xyz_dev_pudxyzd1030_subnet_group",
                        "attributes": {
                            "arn": "arn:aws:rds:us-west-2:349261487538:subgrp:xyz_dev_pudxyzd1030_subnet_group",
                            "description": "Managed by Terraform",
                            "id": "xyz_dev_pudxyzd1030_subnet_group",
                            "name": "xyz_dev_pudxyzd1030_subnet_group",
                            "subnet_ids.#": "2",
                            "subnet_ids.2418711982": "subnet-e4c7b143",
                            "subnet_ids.78257144": "subnet-04513588",
                            "tags.%": "0"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                },
                "aws_db_subnet_group.xyz_pudxyzd1031_subnet_group": {
                    "type": "aws_db_subnet_group",
                    "depends_on": [],
                    "primary": {
                        "id": "xyz_dev_pudxyzd1031_subnet_group",
                        "attributes": {
                            "arn": "arn:aws:rds:us-west-2:349261487538:subgrp:xyz_dev_pudxyzd1031_subnet_group",
                            "description": "Managed by Terraform",
                            "id": "xyz_dev_pudxyzd1031_subnet_group",
                            "name": "xyz_dev_pudxyzd1031_subnet_group",
                            "subnet_ids.#": "2",
                            "subnet_ids.2418711982": "subnet-e4c7b143",
                            "subnet_ids.78257144": "subnet-04513588",
                            "tags.%": "0"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                },
                "aws_ebs_volume.XYZ_PMDXYZA1000_Web_sdf": {
                    "type": "aws_ebs_volume",
                    "depends_on": [],
                    "primary": {
                        "id": "vol-961e9ac04f295ebc1",
                        "attributes": {
                            "availability_zone": "us-west-2a",
                            "encrypted": "true",
                            "id": "vol-961e9ac04f295ebc1",
                            "kms_key_id": "arn:aws:kms:us-west-2:349261487538:key/edb3fa7b-b9a1-4f2b-9557-20c6bc83c0a6",
                            "size": "20",
                            "snapshot_id": "",
                            "type": "standard"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                },
                "aws_ebs_volume.XYZ_PMDXYZA1001_Web_sdf": {
                    "type": "aws_ebs_volume",
                    "depends_on": [],
                    "primary": {
                        "id": "vol-cb98f640fedbaba21",
                        "attributes": {
                            "availability_zone": "us-west-2a",
                            "encrypted": "true",
                            "id": "vol-cb98f640fedbaba21",
                            "kms_key_id": "arn:aws:kms:us-west-2:349261487538:key/edb3fa7b-b9a1-4f2b-9557-20c6bc83c0a6",
                            "size": "100",
                            "snapshot_id": "",
                            "type": "standard"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                },
                "aws_ebs_volume.XYZ_PMDXYZA1004_Database_sdf": {
                    "type": "aws_ebs_volume",
                    "depends_on": [],
                    "primary": {
                        "id": "vol-e58f1b9061b928213",
                        "attributes": {
                            "availability_zone": "us-west-2a",
                            "encrypted": "true",
                            "id": "vol-e58f1b9061b928213",
                            "kms_key_id": "arn:aws:kms:us-west-2:349261487538:key/edb3fa7b-b9a1-4f2b-9557-20c6bc83c0a6",
                            "size": "50",
                            "snapshot_id": "",
                            "type": "standard"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                },
                "aws_ebs_volume.XYZ_PMDXYZA1005_Application_sdf": {
                    "type": "aws_ebs_volume",
                    "depends_on": [],
                    "primary": {
                        "id": "vol-f554fa20bb369714c",
                        "attributes": {
                            "availability_zone": "us-west-2a",
                            "encrypted": "true",
                            "id": "vol-f554fa20bb369714c",
                            "kms_key_id": "arn:aws:kms:us-west-2:349261487538:key/edb3fa7b-b9a1-4f2b-9557-20c6bc83c0a6",
                            "size": "500",
                            "snapshot_id": "",
                            "type": "standard"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                },
                "aws_ebs_volume.XYZ_PMDXYZA1006_Application_sdf": {
                    "type": "aws_ebs_volume",
                    "depends_on": [],
                    "primary": {
                        "id": "vol-997bc110ff3a39714",
                        "attributes": {
                            "availability_zone": "us-west-2a",
                            "encrypted": "true",
                            "id": "vol-997bc110ff3a39714",
                            "kms_key_id": "arn:aws:kms:us-west-2:349261487538:key/edb3fa7b-b9a1-4f2b-9557-20c6bc83c0a6",
                            "size": "100",
                            "snapshot_id": "",
                            "type": "standard"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                },
                "aws_ebs_volume.XYZ_PMDXYZA1011_Application_sdf": {
                    "type": "aws_ebs_volume",
                    "depends_on": [],
                    "primary": {
                        "id": "vol-6f495c201d59bd9d1",
                        "attributes": {
                            "availability_zone": "us-west-2a",
                            "encrypted": "true",
                            "id": "vol-6f495c201d59bd9d1",
                            "kms_key_id": "arn:aws:kms:us-west-2:349261487538:key/edb3fa7b-b9a1-4f2b-9557-20c6bc83c0a6",
                            "size": "100",
                            "snapshot_id": "",
                            "type": "standard"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                },
                "aws_ebs_volume.XYZ_PMDXYZA1012_Web_sdf": {
                    "type": "aws_ebs_volume",
                    "depends_on": [],
                    "primary": {
                        "id": "vol-73216ad0b223b3f06",
                        "attributes": {
                            "availability_zone": "us-west-2a",
                            "encrypted": "true",
                            "id": "vol-73216ad0b223b3f06",
                            "kms_key_id": "arn:aws:kms:us-west-2:349261487538:key/edb3fa7b-b9a1-4f2b-9557-20c6bc83c0a6",
                            "size": "100",
                            "snapshot_id": "",
                            "type": "standard"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                },
                "aws_instance.XYZ_PUDXYZA1002": {
                    "type": "aws_instance",
                    "depends_on": [
                        "data.terraform_remote_state.net",
                        "data.terraform_remote_state.net",
                        "module.XYZ_PUDXYZA1002_user_data"
                    ],
                    "primary": {
                        "id": "i-009652b8a075cd450",
                        "attributes": {
                            "ami": "ami-6f68cf0f",
                            "associate_public_ip_address": "false",
                            "availability_zone": "us-west-2a",
                            "disable_api_termination": "false",
                            "ebs_block_device.#": "0",
                            "ebs_optimized": "false",
                            "ephemeral_block_device.#": "0",
                            "iam_instance_profile": "XYZ_NonProd_Application_InstanceProfile",
                            "id": "i-009652b8a075cd450",
                            "instance_state": "running",
                            "instance_type": "t2.medium",
                            "key_name": "MyKey",
                            "monitoring": "false",
                            "network_interface_id": "eni-873445f8",
                            "private_dns": "ip-10-12-3-13.us-west-2.compute.internal",
                            "private_ip": "10.12.3.13",
                            "public_dns": "",
                            "public_ip": "",
                            "root_block_device.#": "1",
                            "root_block_device.0.delete_on_termination": "false",
                            "root_block_device.0.iops": "1200",
                            "root_block_device.0.volume_size": "400",
                            "root_block_device.0.volume_type": "gp2",
                            "security_groups.#": "0",
                            "source_dest_check": "true",
                            "subnet_id": "subnet-04513588",
                            "tags.%": "9",
                            "tags.ApplicationCode": "XYZ",
                            "tags.ApplicationId": "UID12345789",
                            "tags.BackupInterval": "30",
                            "tags.BackupLifespan": "336",
                            "tags.CostCenter": "\u003cBOGUS\u003e",
                            "tags.DRClass": "DR2",
                            "tags.Environment": "DEV",
                            "tags.Name": "PUDXYZA1002",
                            "tags.SecClass": "Really Secret",
                            "tenancy": "default",
                            "user_data": "035d9e902bbd220b52cf0769026938db4ae4479a",
                            "vpc_security_group_ids.#": "2",
                            "vpc_security_group_ids.3945185533": "sg-b85d24a9",
                            "vpc_security_group_ids.4064280094": "sg-41720ba3"
                        },
                        "meta": {
                            "schema_version": "1"
                        },
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                },
                "aws_instance.XYZ_PUDXYZA1007": {
                    "type": "aws_instance",
                    "depends_on": [
                        "data.terraform_remote_state.net",
                        "data.terraform_remote_state.net",
                        "module.XYZ_PUDXYZA1007_user_data"
                    ],
                    "primary": {
                        "id": "i-09d69d60918dd8c84",
                        "attributes": {
                            "ami": "ami-6f68cf0f",
                            "associate_public_ip_address": "false",
                            "availability_zone": "us-west-2a",
                            "disable_api_termination": "false",
                            "ebs_block_device.#": "0",
                            "ebs_optimized": "false",
                            "ephemeral_block_device.#": "0",
                            "iam_instance_profile": "XYZ_NonProd_Application_InstanceProfile",
                            "id": "i-09d69d60918dd8c84",
                            "instance_state": "running",
                            "instance_type": "m4.xlarge",
                            "key_name": "MyKey",
                            "monitoring": "false",
                            "network_interface_id": "eni-8b5425f4",
                            "private_dns": "ip-10-12-3-161.us-west-2.compute.internal",
                            "private_ip": "10.12.3.161",
                            "public_dns": "",
                            "public_ip": "",
                            "root_block_device.#": "1",
                            "root_block_device.0.delete_on_termination": "false",
                            "root_block_device.0.iops": "600",
                            "root_block_device.0.volume_size": "200",
                            "root_block_device.0.volume_type": "gp2",
                            "security_groups.#": "0",
                            "source_dest_check": "true",
                            "subnet_id": "subnet-04513588",
                            "tags.%": "9",
                            "tags.ApplicationCode": "XYZ",
                            "tags.ApplicationId": "UID12345789",
                            "tags.BackupInterval": "30",
                            "tags.BackupLifespan": "336",
                            "tags.CostCenter": "\u003cBOGUS\u003e",
                            "tags.DRClass": "DR2",
                            "tags.Environment": "DEV",
                            "tags.Name": "PUDXYZA1007",
                            "tags.SecClass": "Really Secret",
                            "tenancy": "default",
                            "user_data": "6457ed91c417e138153eacb9179abee30afc0d7d",
                            "vpc_security_group_ids.#": "2",
                            "vpc_security_group_ids.3945185533": "sg-b85d24a9",
                            "vpc_security_group_ids.4064280094": "sg-41720ba3"
                        },
                        "meta": {
                            "schema_version": "1"
                        },
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                },
                "aws_instance.XYZ_PUDXYZA1008": {
                    "type": "aws_instance",
                    "depends_on": [
                        "data.terraform_remote_state.net",
                        "data.terraform_remote_state.net",
                        "module.XYZ_PUDXYZA1008_user_data"
                    ],
                    "primary": {
                        "id": "i-048b7a1c7b6fb60ba",
                        "attributes": {
                            "ami": "ami-6f68cf0f",
                            "associate_public_ip_address": "false",
                            "availability_zone": "us-west-2a",
                            "disable_api_termination": "false",
                            "ebs_block_device.#": "0",
                            "ebs_optimized": "false",
                            "ephemeral_block_device.#": "0",
                            "iam_instance_profile": "XYZ_NonProd_Application_InstanceProfile",
                            "id": "i-048b7a1c7b6fb60ba",
                            "instance_state": "running",
                            "instance_type": "t2.large",
                            "key_name": "MyKey",
                            "monitoring": "false",
                            "network_interface_id": "eni-8bbccdf4",
                            "private_dns": "ip-10-12-3-243.us-west-2.compute.internal",
                            "private_ip": "10.12.3.243",
                            "public_dns": "",
                            "public_ip": "",
                            "root_block_device.#": "1",
                            "root_block_device.0.delete_on_termination": "false",
                            "root_block_device.0.iops": "900",
                            "root_block_device.0.volume_size": "300",
                            "root_block_device.0.volume_type": "gp2",
                            "security_groups.#": "0",
                            "source_dest_check": "true",
                            "subnet_id": "subnet-04513588",
                            "tags.%": "9",
                            "tags.ApplicationCode": "XYZ",
                            "tags.ApplicationId": "UID12345789",
                            "tags.BackupInterval": "30",
                            "tags.BackupLifespan": "336",
                            "tags.CostCenter": "\u003cBOGUS\u003e",
                            "tags.DRClass": "DR2",
                            "tags.Environment": "DEV",
                            "tags.Name": "PUDXYZA1008",
                            "tags.SecClass": "Really Secret",
                            "tenancy": "default",
                            "user_data": "dad1489acad168c6baa3e5f1d456056886b4147d",
                            "vpc_security_group_ids.#": "2",
                            "vpc_security_group_ids.3945185533": "sg-b85d24a9",
                            "vpc_security_group_ids.4064280094": "sg-41720ba3"
                        },
                        "meta": {
                            "schema_version": "1"
                        },
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                },
                "aws_instance.XYZ_PUDXYZA1009": {
                    "type": "aws_instance",
                    "depends_on": [
                        "data.terraform_remote_state.net",
                        "data.terraform_remote_state.net",
                        "module.XYZ_PUDXYZA1009_user_data"
                    ],
                    "primary": {
                        "id": "i-05ac068b75b59a2d8",
                        "attributes": {
                            "ami": "ami-6f68cf0f",
                            "associate_public_ip_address": "false",
                            "availability_zone": "us-west-2a",
                            "disable_api_termination": "false",
                            "ebs_block_device.#": "0",
                            "ebs_optimized": "false",
                            "ephemeral_block_device.#": "0",
                            "iam_instance_profile": "XYZ_NonProd_Application_InstanceProfile",
                            "id": "i-05ac068b75b59a2d8",
                            "instance_state": "running",
                            "instance_type": "t2.medium",
                            "key_name": "MyKey",
                            "monitoring": "false",
                            "network_interface_id": "eni-8a0776f5",
                            "private_dns": "ip-10-12-3-252.us-west-2.compute.internal",
                            "private_ip": "10.12.3.252",
                            "public_dns": "",
                            "public_ip": "",
                            "root_block_device.#": "1",
                            "root_block_device.0.delete_on_termination": "false",
                            "root_block_device.0.iops": "100",
                            "root_block_device.0.volume_size": "20",
                            "root_block_device.0.volume_type": "gp2",
                            "security_groups.#": "0",
                            "source_dest_check": "true",
                            "subnet_id": "subnet-04513588",
                            "tags.%": "9",
                            "tags.ApplicationCode": "XYZ",
                            "tags.ApplicationId": "UID12345789",
                            "tags.BackupInterval": "30",
                            "tags.BackupLifespan": "336",
                            "tags.CostCenter": "\u003cBOGUS\u003e",
                            "tags.DRClass": "DR2",
                            "tags.Environment": "DEV",
                            "tags.Name": "PUDXYZA1009",
                            "tags.SecClass": "Really Secret",
                            "tenancy": "default",
                            "user_data": "5e1889e6eef737f2761d3393ef437fbc015e4ce2",
                            "vpc_security_group_ids.#": "2",
                            "vpc_security_group_ids.3945185533": "sg-b85d24a9",
                            "vpc_security_group_ids.4064280094": "sg-41720ba3"
                        },
                        "meta": {
                            "schema_version": "1"
                        },
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                },
                "aws_instance.XYZ_PMDXYZA1000": {
                    "type": "aws_instance",
                    "depends_on": [
                        "data.terraform_remote_state.net",
                        "data.terraform_remote_state.net",
                        "module.XYZ_PMDXYZA1000_user_data"
                    ],
                    "primary": {
                        "id": "i-00283026245e2171c",
                        "attributes": {
                            "ami": "ami-cf9722af",
                            "associate_public_ip_address": "false",
                            "availability_zone": "us-west-2a",
                            "disable_api_termination": "false",
                            "ebs_block_device.#": "1",
                            "ebs_block_device.2659407853.delete_on_termination": "false",
                            "ebs_block_device.2659407853.device_name": "/dev/sdf",
                            "ebs_block_device.2659407853.encrypted": "true",
                            "ebs_block_device.2659407853.iops": "0",
                            "ebs_block_device.2659407853.snapshot_id": "",
                            "ebs_block_device.2659407853.volume_size": "20",
                            "ebs_block_device.2659407853.volume_type": "standard",
                            "ebs_optimized": "false",
                            "ephemeral_block_device.#": "0",
                            "iam_instance_profile": "XYZ_NonProd_Web_InstanceProfile",
                            "id": "i-00283026245e2171c",
                            "instance_state": "running",
                            "instance_type": "t2.medium",
                            "key_name": "MyKey",
                            "monitoring": "false",
                            "network_interface_id": "eni-8595e4fa",
                            "private_dns": "ip-10-12-3-224.us-west-2.compute.internal",
                            "private_ip": "10.12.3.224",
                            "public_dns": "",
                            "public_ip": "",
                            "root_block_device.#": "1",
                            "root_block_device.0.delete_on_termination": "false",
                            "root_block_device.0.iops": "150",
                            "root_block_device.0.volume_size": "50",
                            "root_block_device.0.volume_type": "gp2",
                            "security_groups.#": "0",
                            "source_dest_check": "true",
                            "subnet_id": "subnet-04513588",
                            "tags.%": "9",
                            "tags.ApplicationCode": "XYZ",
                            "tags.ApplicationId": "UID12345789",
                            "tags.BackupInterval": "30",
                            "tags.BackupLifespan": "336",
                            "tags.CostCenter": "\u003cBOGUS\u003e",
                            "tags.DRClass": "DR2",
                            "tags.Environment": "DEV",
                            "tags.Name": "PMDXYZA1000",
                            "tags.SecClass": "Really Secret",
                            "tenancy": "default",
                            "user_data": "691cc83c124396a18cdba914c7df42e8b6adf909",
                            "vpc_security_group_ids.#": "2",
                            "vpc_security_group_ids.1656255801": "sg-7821586e",
                            "vpc_security_group_ids.288913062": "sg-b8552ca9"
                        },
                        "meta": {
                            "schema_version": "1"
                        },
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                },
                "aws_instance.XYZ_PMDXYZA1001": {
                    "type": "aws_instance",
                    "depends_on": [
                        "data.terraform_remote_state.net",
                        "data.terraform_remote_state.net",
                        "module.XYZ_PMDXYZA1001_user_data"
                    ],
                    "primary": {
                        "id": "i-0fdff17ec37affabf",
                        "attributes": {
                            "ami": "ami-cf9722af",
                            "associate_public_ip_address": "false",
                            "availability_zone": "us-west-2a",
                            "disable_api_termination": "false",
                            "ebs_block_device.#": "1",
                            "ebs_block_device.2659407853.delete_on_termination": "false",
                            "ebs_block_device.2659407853.device_name": "/dev/sdf",
                            "ebs_block_device.2659407853.encrypted": "true",
                            "ebs_block_device.2659407853.iops": "0",
                            "ebs_block_device.2659407853.snapshot_id": "",
                            "ebs_block_device.2659407853.volume_size": "100",
                            "ebs_block_device.2659407853.volume_type": "standard",
                            "ebs_optimized": "false",
                            "ephemeral_block_device.#": "0",
                            "iam_instance_profile": "XYZ_NonProd_Web_InstanceProfile",
                            "id": "i-0fdff17ec37affabf",
                            "instance_state": "running",
                            "instance_type": "t2.medium",
                            "key_name": "MyKey",
                            "monitoring": "false",
                            "network_interface_id": "eni-8cd7a6f3",
                            "private_dns": "ip-10-12-3-189.us-west-2.compute.internal",
                            "private_ip": "10.12.3.189",
                            "public_dns": "",
                            "public_ip": "",
                            "root_block_device.#": "1",
                            "root_block_device.0.delete_on_termination": "false",
                            "root_block_device.0.iops": "150",
                            "root_block_device.0.volume_size": "50",
                            "root_block_device.0.volume_type": "gp2",
                            "security_groups.#": "0",
                            "source_dest_check": "true",
                            "subnet_id": "subnet-04513588",
                            "tags.%": "9",
                            "tags.ApplicationCode": "XYZ",
                            "tags.ApplicationId": "UID12345789",
                            "tags.BackupInterval": "30",
                            "tags.BackupLifespan": "336",
                            "tags.CostCenter": "\u003cBOGUS\u003e",
                            "tags.DRClass": "DR2",
                            "tags.Environment": "DEV",
                            "tags.Name": "PMDXYZA1001",
                            "tags.SecClass": "Really Secret",
                            "tenancy": "default",
                            "user_data": "4b673d37df0acf06f57ec57229316d2ba046f6e2",
                            "vpc_security_group_ids.#": "2",
                            "vpc_security_group_ids.1656255801": "sg-7821586e",
                            "vpc_security_group_ids.288913062": "sg-b8552ca9"
                        },
                        "meta": {
                            "schema_version": "1"
                        },
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                },
                "aws_instance.XYZ_PMDXYZA1003": {
                    "type": "aws_instance",
                    "depends_on": [
                        "data.terraform_remote_state.net",
                        "data.terraform_remote_state.net",
                        "module.XYZ_PMDXYZA1003_user_data"
                    ],
                    "primary": {
                        "id": "i-01e6b57a20fd06597",
                        "attributes": {
                            "ami": "ami-cf9722af",
                            "associate_public_ip_address": "false",
                            "availability_zone": "us-west-2a",
                            "disable_api_termination": "false",
                            "ebs_block_device.#": "0",
                            "ebs_optimized": "false",
                            "ephemeral_block_device.#": "0",
                            "iam_instance_profile": "XYZ_NonProd_Application_InstanceProfile",
                            "id": "i-01e6b57a20fd06597",
                            "instance_state": "running",
                            "instance_type": "t2.small",
                            "key_name": "MyKey",
                            "monitoring": "false",
                            "network_interface_id": "eni-9d6b1ae2",
                            "private_dns": "ip-10-12-3-191.us-west-2.compute.internal",
                            "private_ip": "10.12.3.191",
                            "public_dns": "",
                            "public_ip": "",
                            "root_block_device.#": "1",
                            "root_block_device.0.delete_on_termination": "false",
                            "root_block_device.0.iops": "300",
                            "root_block_device.0.volume_size": "100",
                            "root_block_device.0.volume_type": "gp2",
                            "security_groups.#": "0",
                            "source_dest_check": "true",
                            "subnet_id": "subnet-04513588",
                            "tags.%": "9",
                            "tags.ApplicationCode": "XYZ",
                            "tags.ApplicationId": "UID12345789",
                            "tags.BackupInterval": "30",
                            "tags.BackupLifespan": "336",
                            "tags.CostCenter": "\u003cBOGUS\u003e",
                            "tags.DRClass": "DR2",
                            "tags.Environment": "DEV",
                            "tags.Name": "PMDXYZA1003",
                            "tags.SecClass": "Really Secret",
                            "tenancy": "default",
                            "user_data": "fa58aa1cb5d20f2887da734a785f99f7b9d148e1",
                            "vpc_security_group_ids.#": "2",
                            "vpc_security_group_ids.1656255801": "sg-7821586e",
                            "vpc_security_group_ids.3945185533": "sg-b85d24a9"
                        },
                        "meta": {
                            "schema_version": "1"
                        },
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                },
                "aws_instance.XYZ_PMDXYZA1004": {
                    "type": "aws_instance",
                    "depends_on": [
                        "data.terraform_remote_state.net",
                        "data.terraform_remote_state.net",
                        "module.XYZ_PMDXYZA1004_user_data"
                    ],
                    "primary": {
                        "id": "i-077d78ce29121656c",
                        "attributes": {
                            "ami": "ami-cf9722af",
                            "associate_public_ip_address": "false",
                            "availability_zone": "us-west-2a",
                            "disable_api_termination": "false",
                            "ebs_block_device.#": "1",
                            "ebs_block_device.2659407853.delete_on_termination": "false",
                            "ebs_block_device.2659407853.device_name": "/dev/sdf",
                            "ebs_block_device.2659407853.encrypted": "true",
                            "ebs_block_device.2659407853.iops": "0",
                            "ebs_block_device.2659407853.snapshot_id": "",
                            "ebs_block_device.2659407853.volume_size": "50",
                            "ebs_block_device.2659407853.volume_type": "standard",
                            "ebs_optimized": "false",
                            "ephemeral_block_device.#": "0",
                            "iam_instance_profile": "XYZ_NonProd_Database_InstanceProfile",
                            "id": "i-077d78ce29121656c",
                            "instance_state": "running",
                            "instance_type": "m4.xlarge",
                            "key_name": "MyKey",
                            "monitoring": "false",
                            "network_interface_id": "eni-8c7908f3",
                            "private_dns": "ip-10-12-3-193.us-west-2.compute.internal",
                            "private_ip": "10.12.3.193",
                            "public_dns": "",
                            "public_ip": "",
                            "root_block_device.#": "1",
                            "root_block_device.0.delete_on_termination": "false",
                            "root_block_device.0.iops": "300",
                            "root_block_device.0.volume_size": "100",
                            "root_block_device.0.volume_type": "gp2",
                            "security_groups.#": "0",
                            "source_dest_check": "true",
                            "subnet_id": "subnet-04513588",
                            "tags.%": "9",
                            "tags.ApplicationCode": "XYZ",
                            "tags.ApplicationId": "UID12345789",
                            "tags.BackupInterval": "30",
                            "tags.BackupLifespan": "336",
                            "tags.CostCenter": "\u003cBOGUS\u003e",
                            "tags.DRClass": "DR2",
                            "tags.Environment": "DEV",
                            "tags.Name": "PMDXYZA1004",
                            "tags.SecClass": "Really Secret",
                            "tenancy": "default",
                            "user_data": "6a68f39c61f11c2a25cdf750d0c06b1fdb2dedb6",
                            "vpc_security_group_ids.#": "2",
                            "vpc_security_group_ids.1496878414": "sg-b8720ba9",
                            "vpc_security_group_ids.1656255801": "sg-7821586e"
                        },
                        "meta": {
                            "schema_version": "1"
                        },
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                },
                "aws_instance.XYZ_PMDXYZA1005": {
                    "type": "aws_instance",
                    "depends_on": [
                        "data.terraform_remote_state.net",
                        "data.terraform_remote_state.net",
                        "module.XYZ_PMDXYZA1005_user_data"
                    ],
                    "primary": {
                        "id": "i-019745466dd654df3",
                        "attributes": {
                            "ami": "ami-cf9722af",
                            "associate_public_ip_address": "false",
                            "availability_zone": "us-west-2a",
                            "disable_api_termination": "false",
                            "ebs_block_device.#": "1",
                            "ebs_block_device.2659407853.delete_on_termination": "false",
                            "ebs_block_device.2659407853.device_name": "/dev/sdf",
                            "ebs_block_device.2659407853.encrypted": "true",
                            "ebs_block_device.2659407853.iops": "0",
                            "ebs_block_device.2659407853.snapshot_id": "",
                            "ebs_block_device.2659407853.volume_size": "500",
                            "ebs_block_device.2659407853.volume_type": "standard",
                            "ebs_optimized": "false",
                            "ephemeral_block_device.#": "0",
                            "iam_instance_profile": "XYZ_NonProd_Application_InstanceProfile",
                            "id": "i-019745466dd654df3",
                            "instance_state": "running",
                            "instance_type": "m4.xlarge",
                            "key_name": "MyKey",
                            "monitoring": "false",
                            "network_interface_id": "eni-88c5b4f7",
                            "private_dns": "ip-10-12-3-154.us-west-2.compute.internal",
                            "private_ip": "10.12.3.154",
                            "public_dns": "",
                            "public_ip": "",
                            "root_block_device.#": "1",
                            "root_block_device.0.delete_on_termination": "false",
                            "root_block_device.0.iops": "300",
                            "root_block_device.0.volume_size": "100",
                            "root_block_device.0.volume_type": "gp2",
                            "security_groups.#": "0",
                            "source_dest_check": "true",
                            "subnet_id": "subnet-04513588",
                            "tags.%": "9",
                            "tags.ApplicationCode": "XYZ",
                            "tags.ApplicationId": "UID12345789",
                            "tags.BackupInterval": "30",
                            "tags.BackupLifespan": "336",
                            "tags.CostCenter": "\u003cBOGUS\u003e",
                            "tags.DRClass": "DR2",
                            "tags.Environment": "DEV",
                            "tags.Name": "PMDXYZA1005",
                            "tags.SecClass": "Really Secret",
                            "tenancy": "default",
                            "user_data": "240da7024ae569d1b727bac4754eaca0b3f2a069",
                            "vpc_security_group_ids.#": "2",
                            "vpc_security_group_ids.1656255801": "sg-7821586e",
                            "vpc_security_group_ids.3945185533": "sg-b85d24a9"
                        },
                        "meta": {
                            "schema_version": "1"
                        },
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                },
                "aws_instance.XYZ_PMDXYZA1006": {
                    "type": "aws_instance",
                    "depends_on": [
                        "data.terraform_remote_state.net",
                        "data.terraform_remote_state.net",
                        "module.XYZ_PMDXYZA1006_user_data"
                    ],
                    "primary": {
                        "id": "i-0a70527434f7a5b64",
                        "attributes": {
                            "ami": "ami-cf9722af",
                            "associate_public_ip_address": "false",
                            "availability_zone": "us-west-2a",
                            "disable_api_termination": "false",
                            "ebs_block_device.#": "1",
                            "ebs_block_device.2659407853.delete_on_termination": "false",
                            "ebs_block_device.2659407853.device_name": "/dev/sdf",
                            "ebs_block_device.2659407853.encrypted": "true",
                            "ebs_block_device.2659407853.iops": "0",
                            "ebs_block_device.2659407853.snapshot_id": "",
                            "ebs_block_device.2659407853.volume_size": "100",
                            "ebs_block_device.2659407853.volume_type": "standard",
                            "ebs_optimized": "false",
                            "ephemeral_block_device.#": "0",
                            "iam_instance_profile": "XYZ_NonProd_Application_InstanceProfile",
                            "id": "i-0a70527434f7a5b64",
                            "instance_state": "running",
                            "instance_type": "t2.medium",
                            "key_name": "MyKey",
                            "monitoring": "false",
                            "network_interface_id": "eni-674c3d19",
                            "private_dns": "ip-10-12-3-144.us-west-2.compute.internal",
                            "private_ip": "10.12.3.144",
                            "public_dns": "",
                            "public_ip": "",
                            "root_block_device.#": "1",
                            "root_block_device.0.delete_on_termination": "false",
                            "root_block_device.0.iops": "150",
                            "root_block_device.0.volume_size": "50",
                            "root_block_device.0.volume_type": "gp2",
                            "security_groups.#": "0",
                            "source_dest_check": "true",
                            "subnet_id": "subnet-04513588",
                            "tags.%": "9",
                            "tags.ApplicationCode": "XYZ",
                            "tags.ApplicationId": "UID12345789",
                            "tags.BackupInterval": "30",
                            "tags.BackupLifespan": "336",
                            "tags.CostCenter": "\u003cBOGUS\u003e",
                            "tags.DRClass": "DR2",
                            "tags.Environment": "DEV",
                            "tags.Name": "PMDXYZA1006",
                            "tags.SecClass": "Really Secret",
                            "tenancy": "default",
                            "user_data": "421be7f4894ede67f7b60b53c1f573b61abe8cf9",
                            "vpc_security_group_ids.#": "2",
                            "vpc_security_group_ids.1656255801": "sg-7821586e",
                            "vpc_security_group_ids.3945185533": "sg-b85d24a9"
                        },
                        "meta": {
                            "schema_version": "1"
                        },
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                },
                "aws_instance.XYZ_PMDXYZA1010": {
                    "type": "aws_instance",
                    "depends_on": [
                        "data.terraform_remote_state.net",
                        "data.terraform_remote_state.net",
                        "module.XYZ_PMDXYZA1010_user_data"
                    ],
                    "primary": {
                        "id": "i-0c21bf74e0b49e9da",
                        "attributes": {
                            "ami": "ami-cf9722af",
                            "associate_public_ip_address": "false",
                            "availability_zone": "us-west-2a",
                            "disable_api_termination": "false",
                            "ebs_block_device.#": "0",
                            "ebs_optimized": "false",
                            "ephemeral_block_device.#": "0",
                            "iam_instance_profile": "XYZ_NonProd_Application_InstanceProfile",
                            "id": "i-0c21bf74e0b49e9da",
                            "instance_state": "running",
                            "instance_type": "t2.medium",
                            "key_name": "MyKey",
                            "monitoring": "false",
                            "network_interface_id": "eni-86cebff9",
                            "private_dns": "ip-10-12-3-117.us-west-2.compute.internal",
                            "private_ip": "10.12.3.117",
                            "public_dns": "",
                            "public_ip": "",
                            "root_block_device.#": "1",
                            "root_block_device.0.delete_on_termination": "false",
                            "root_block_device.0.iops": "300",
                            "root_block_device.0.volume_size": "100",
                            "root_block_device.0.volume_type": "gp2",
                            "security_groups.#": "0",
                            "source_dest_check": "true",
                            "subnet_id": "subnet-04513588",
                            "tags.%": "9",
                            "tags.ApplicationCode": "XYZ",
                            "tags.ApplicationId": "UID12345789",
                            "tags.BackupInterval": "30",
                            "tags.BackupLifespan": "336",
                            "tags.CostCenter": "\u003cBOGUS\u003e",
                            "tags.DRClass": "DR2",
                            "tags.Environment": "DEV",
                            "tags.Name": "PMDXYZA1010",
                            "tags.SecClass": "Really Secret",
                            "tenancy": "default",
                            "user_data": "afac4b47f0e4d671d938a8cc46010a1eadef765b",
                            "vpc_security_group_ids.#": "2",
                            "vpc_security_group_ids.1656255801": "sg-7821586e",
                            "vpc_security_group_ids.3945185533": "sg-b85d24a9"
                        },
                        "meta": {
                            "schema_version": "1"
                        },
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                },
                "aws_instance.XYZ_PMDXYZA1011": {
                    "type": "aws_instance",
                    "depends_on": [
                        "data.terraform_remote_state.net",
                        "data.terraform_remote_state.net",
                        "module.XYZ_PMDXYZA1011_user_data"
                    ],
                    "primary": {
                        "id": "i-0d8655bdcc3b0e99b",
                        "attributes": {
                            "ami": "ami-6d91240d",
                            "associate_public_ip_address": "false",
                            "availability_zone": "us-west-2a",
                            "disable_api_termination": "false",
                            "ebs_block_device.#": "1",
                            "ebs_block_device.2659407853.delete_on_termination": "false",
                            "ebs_block_device.2659407853.device_name": "/dev/sdf",
                            "ebs_block_device.2659407853.encrypted": "true",
                            "ebs_block_device.2659407853.iops": "0",
                            "ebs_block_device.2659407853.snapshot_id": "",
                            "ebs_block_device.2659407853.volume_size": "100",
                            "ebs_block_device.2659407853.volume_type": "standard",
                            "ebs_optimized": "false",
                            "ephemeral_block_device.#": "0",
                            "iam_instance_profile": "XYZ_NonProd_Application_InstanceProfile",
                            "id": "i-0d8655bdcc3b0e99b",
                            "instance_state": "running",
                            "instance_type": "t2.medium",
                            "key_name": "MyKey",
                            "monitoring": "false",
                            "network_interface_id": "eni-860e7ff9",
                            "private_dns": "ip-10-12-3-155.us-west-2.compute.internal",
                            "private_ip": "10.12.3.155",
                            "public_dns": "",
                            "public_ip": "",
                            "root_block_device.#": "1",
                            "root_block_device.0.delete_on_termination": "false",
                            "root_block_device.0.iops": "150",
                            "root_block_device.0.volume_size": "50",
                            "root_block_device.0.volume_type": "gp2",
                            "security_groups.#": "0",
                            "source_dest_check": "true",
                            "subnet_id": "subnet-04513588",
                            "tags.%": "9",
                            "tags.ApplicationCode": "XYZ",
                            "tags.ApplicationId": "UID12345789",
                            "tags.BackupInterval": "30",
                            "tags.BackupLifespan": "336",
                            "tags.CostCenter": "\u003cBOGUS\u003e",
                            "tags.DRClass": "DR2",
                            "tags.Environment": "DEV",
                            "tags.Name": "PMDXYZA1011",
                            "tags.SecClass": "Really Secret",
                            "tenancy": "default",
                            "user_data": "0b4f36eb66bf45eb3ce8d247d9a857934e625764",
                            "vpc_security_group_ids.#": "2",
                            "vpc_security_group_ids.1656255801": "sg-7821586e",
                            "vpc_security_group_ids.3945185533": "sg-b85d24a9"
                        },
                        "meta": {
                            "schema_version": "1"
                        },
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                },
                "aws_instance.XYZ_PMDXYZA1012": {
                    "type": "aws_instance",
                    "depends_on": [
                        "data.terraform_remote_state.net",
                        "data.terraform_remote_state.net",
                        "module.XYZ_PMDXYZA1012_user_data"
                    ],
                    "primary": {
                        "id": "i-0218ceb56734b5a13",
                        "attributes": {
                            "ami": "ami-cf9722af",
                            "associate_public_ip_address": "false",
                            "availability_zone": "us-west-2a",
                            "disable_api_termination": "false",
                            "ebs_block_device.#": "1",
                            "ebs_block_device.2659407853.delete_on_termination": "false",
                            "ebs_block_device.2659407853.device_name": "/dev/sdf",
                            "ebs_block_device.2659407853.encrypted": "true",
                            "ebs_block_device.2659407853.iops": "0",
                            "ebs_block_device.2659407853.snapshot_id": "",
                            "ebs_block_device.2659407853.volume_size": "100",
                            "ebs_block_device.2659407853.volume_type": "standard",
                            "ebs_optimized": "false",
                            "ephemeral_block_device.#": "0",
                            "iam_instance_profile": "XYZ_NonProd_Web_InstanceProfile",
                            "id": "i-0218ceb56734b5a13",
                            "instance_state": "running",
                            "instance_type": "t2.medium",
                            "key_name": "MyKey",
                            "monitoring": "false",
                            "network_interface_id": "eni-885a2bf7",
                            "private_dns": "ip-10-12-3-20.us-west-2.compute.internal",
                            "private_ip": "10.12.3.20",
                            "public_dns": "",
                            "public_ip": "",
                            "root_block_device.#": "1",
                            "root_block_device.0.delete_on_termination": "false",
                            "root_block_device.0.iops": "150",
                            "root_block_device.0.volume_size": "50",
                            "root_block_device.0.volume_type": "gp2",
                            "security_groups.#": "0",
                            "source_dest_check": "true",
                            "subnet_id": "subnet-04513588",
                            "tags.%": "9",
                            "tags.ApplicationCode": "XYZ",
                            "tags.ApplicationId": "UID12345789",
                            "tags.BackupInterval": "30",
                            "tags.BackupLifespan": "336",
                            "tags.CostCenter": "\u003cBOGUS\u003e",
                            "tags.DRClass": "DR2",
                            "tags.Environment": "DEV",
                            "tags.Name": "PMDXYZA1012",
                            "tags.SecClass": "Really Secret",
                            "tenancy": "default",
                            "user_data": "11f750d36222c95acdd947e3e51228ed6c2319b2",
                            "vpc_security_group_ids.#": "2",
                            "vpc_security_group_ids.1656255801": "sg-7821586e",
                            "vpc_security_group_ids.288913062": "sg-b8552ca9"
                        },
                        "meta": {
                            "schema_version": "1"
                        },
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                },
                "aws_s3_bucket.XYZ_bucket": {
                    "type": "aws_s3_bucket",
                    "depends_on": [],
                    "primary": {
                        "id": "acme-myproject-xyz-dev",
                        "attributes": {
                            "acceleration_status": "",
                            "acl": "private",
                            "arn": "arn:aws:s3:::acme-myproject-xyz-dev",
                            "bucket": "acme-myproject-xyz-dev",
                            "force_destroy": "false",
                            "hosted_zone_id": "Z3BJ6K6RIION7M",
                            "id": "acme-myproject-xyz-dev",
                            "region": "us-west-2",
                            "request_payer": "BucketOwner",
                            "tags.%": "5",
                            "tags.ApplicationCode": "XYZ",
                            "tags.ApplicationId": "UID12345789",
                            "tags.DRClass": "DR2",
                            "tags.Environment": "DEV",
                            "tags.SecClass": "Really Secret",
                            "website.#": "0"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                },
                "aws_volume_attachment.XYZ_PMDXYZA1000_Web_sdf_attachment": {
                    "type": "aws_volume_attachment",
                    "depends_on": [
                        "aws_ebs_volume.XYZ_PMDXYZA1000_Web_sdf",
                        "aws_instance.XYZ_PMDXYZA1000"
                    ],
                    "primary": {
                        "id": "vai-2354109661",
                        "attributes": {
                            "device_name": "/dev/sdf",
                            "id": "vai-2354109661",
                            "instance_id": "i-00283026245e2171c",
                            "volume_id": "vol-961e9ac04f295ebc1"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                },
                "aws_volume_attachment.XYZ_PMDXYZA1001_Web_sdf_attachment": {
                    "type": "aws_volume_attachment",
                    "depends_on": [
                        "aws_ebs_volume.XYZ_PMDXYZA1001_Web_sdf",
                        "aws_instance.XYZ_PMDXYZA1001"
                    ],
                    "primary": {
                        "id": "vai-173045560",
                        "attributes": {
                            "device_name": "/dev/sdf",
                            "id": "vai-173045560",
                            "instance_id": "i-0fdff17ec37affabf",
                            "volume_id": "vol-cb98f640fedbaba21"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                },
                "aws_volume_attachment.XYZ_PMDXYZA1004_Database_sdf_attachment": {
                    "type": "aws_volume_attachment",
                    "depends_on": [
                        "aws_ebs_volume.XYZ_PMDXYZA1004_Database_sdf",
                        "aws_instance.XYZ_PMDXYZA1004"
                    ],
                    "primary": {
                        "id": "vai-3903583388",
                        "attributes": {
                            "device_name": "/dev/sdf",
                            "id": "vai-3903583388",
                            "instance_id": "i-077d78ce29121656c",
                            "volume_id": "vol-e58f1b9061b928213"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                },
                "aws_volume_attachment.XYZ_PMDXYZA1005_Application_sdf_attachment": {
                    "type": "aws_volume_attachment",
                    "depends_on": [
                        "aws_ebs_volume.XYZ_PMDXYZA1005_Application_sdf",
                        "aws_instance.XYZ_PMDXYZA1005"
                    ],
                    "primary": {
                        "id": "vai-186186938",
                        "attributes": {
                            "device_name": "/dev/sdf",
                            "id": "vai-186186938",
                            "instance_id": "i-019745466dd654df3",
                            "volume_id": "vol-f554fa20bb369714c"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                },
                "aws_volume_attachment.XYZ_PMDXYZA1006_Application_sdf_attachment": {
                    "type": "aws_volume_attachment",
                    "depends_on": [
                        "aws_ebs_volume.XYZ_PMDXYZA1006_Application_sdf",
                        "aws_instance.XYZ_PMDXYZA1006"
                    ],
                    "primary": {
                        "id": "vai-513180377",
                        "attributes": {
                            "device_name": "/dev/sdf",
                            "id": "vai-513180377",
                            "instance_id": "i-0a70527434f7a5b64",
                            "volume_id": "vol-997bc110ff3a39714"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                },
                "aws_volume_attachment.XYZ_PMDXYZA1011_Application_sdf_attachment": {
                    "type": "aws_volume_attachment",
                    "depends_on": [
                        "aws_ebs_volume.XYZ_PMDXYZA1011_Application_sdf",
                        "aws_instance.XYZ_PMDXYZA1011"
                    ],
                    "primary": {
                        "id": "vai-2790157018",
                        "attributes": {
                            "device_name": "/dev/sdf",
                            "id": "vai-2790157018",
                            "instance_id": "i-0d8655bdcc3b0e99b",
                            "volume_id": "vol-6f495c201d59bd9d1"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                },
                "aws_volume_attachment.XYZ_PMDXYZA1012_Web_sdf_attachment": {
                    "type": "aws_volume_attachment",
                    "depends_on": [
                        "aws_ebs_volume.XYZ_PMDXYZA1012_Web_sdf",
                        "aws_instance.XYZ_PMDXYZA1012"
                    ],
                    "primary": {
                        "id": "vai-4106492933",
                        "attributes": {
                            "device_name": "/dev/sdf",
                            "id": "vai-4106492933",
                            "instance_id": "i-0218ceb56734b5a13",
                            "volume_id": "vol-73216ad0b223b3f06"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                },
                "data.aws_ami.amazon_linux": {
                    "type": "aws_ami",
                    "depends_on": [],
                    "primary": {
                        "id": "ami-1e299d7e",
                        "attributes": {
                            "architecture": "x86_64",
                            "block_device_mappings.#": "1",
                            "block_device_mappings.340275815.device_name": "/dev/xvda",
                            "block_device_mappings.340275815.ebs.%": "6",
                            "block_device_mappings.340275815.ebs.delete_on_termination": "true",
                            "block_device_mappings.340275815.ebs.encrypted": "false",
                            "block_device_mappings.340275815.ebs.iops": "0",
                            "block_device_mappings.340275815.ebs.snapshot_id": "snap-0bf6845989e028a9a",
                            "block_device_mappings.340275815.ebs.volume_size": "8",
                            "block_device_mappings.340275815.ebs.volume_type": "gp2",
                            "block_device_mappings.340275815.no_device": "",
                            "block_device_mappings.340275815.virtual_name": "",
                            "creation_date": "2016-12-20T23:24:47.000Z",
                            "description": "Amazon Linux AMI 2016.09.1.20161221 x86_64 HVM GP2",
                            "filter.#": "2",
                            "filter.3930796444.name": "description",
                            "filter.3930796444.values.#": "1",
                            "filter.3930796444.values.0": "Amazon Linux AMI*",
                            "filter.490168357.name": "virtualization-type",
                            "filter.490168357.values.#": "1",
                            "filter.490168357.values.0": "hvm",
                            "hypervisor": "xen",
                            "id": "ami-1e299d7e",
                            "image_id": "ami-1e299d7e",
                            "image_location": "amazon/amzn-ami-hvm-2016.09.1.20161221-x86_64-gp2",
                            "image_owner_alias": "amazon",
                            "image_type": "machine",
                            "most_recent": "true",
                            "name": "amzn-ami-hvm-2016.09.1.20161221-x86_64-gp2",
                            "owner_id": "137112412989",
                            "owners.#": "1",
                            "owners.0": "amazon",
                            "product_codes.#": "0",
                            "public": "true",
                            "root_device_name": "/dev/xvda",
                            "root_device_type": "ebs",
                            "sriov_net_support": "simple",
                            "state": "available",
                            "state_reason.%": "2",
                            "state_reason.code": "UNSET",
                            "state_reason.message": "UNSET",
                            "tags.#": "0",
                            "virtualization_type": "hvm"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                },
                "data.aws_ami.redhat": {
                    "type": "aws_ami",
                    "depends_on": [],
                    "primary": {
                        "id": "ami-9b4cf9fb",
                        "attributes": {
                            "architecture": "x86_64",
                            "block_device_mappings.#": "1",
                            "block_device_mappings.309099847.device_name": "/dev/sda1",
                            "block_device_mappings.309099847.ebs.%": "6",
                            "block_device_mappings.309099847.ebs.delete_on_termination": "true",
                            "block_device_mappings.309099847.ebs.encrypted": "false",
                            "block_device_mappings.309099847.ebs.iops": "0",
                            "block_device_mappings.309099847.ebs.snapshot_id": "snap-03e5e6a91af63b049",
                            "block_device_mappings.309099847.ebs.volume_size": "10",
                            "block_device_mappings.309099847.ebs.volume_type": "gp2",
                            "block_device_mappings.309099847.no_device": "",
                            "block_device_mappings.309099847.virtual_name": "",
                            "creation_date": "2016-12-16T22:53:31.000Z",
                            "description": "Provided by Red Hat, Inc.",
                            "filter.#": "2",
                            "filter.1039744189.name": "description",
                            "filter.1039744189.values.#": "1",
                            "filter.1039744189.values.0": "Provided by Red Hat, Inc.",
                            "filter.490168357.name": "virtualization-type",
                            "filter.490168357.values.#": "1",
                            "filter.490168357.values.0": "hvm",
                            "hypervisor": "xen",
                            "id": "ami-9b4cf9fb",
                            "image_id": "ami-9b4cf9fb",
                            "image_location": "aws-marketplace/SAP-7.2_HVM-20161206-x86_64-1-Hourly2-GP2-b676039c-a4f8-4be7-9866-c804b1ade684-ami-653c3b72.3",
                            "image_owner_alias": "aws-marketplace",
                            "image_type": "machine",
                            "most_recent": "true",
                            "name": "SAP-7.2_HVM-20161206-x86_64-1-Hourly2-GP2-b676039c-a4f8-4be7-9866-c804b1ade684-ami-653c3b72.3",
                            "owner_id": "679593333241",
                            "product_codes.#": "1",
                            "product_codes.2425488962.product_code_id": "asvkacev6m1dpsznzooafsvpg",
                            "product_codes.2425488962.product_code_type": "marketplace",
                            "public": "true",
                            "root_device_name": "/dev/sda1",
                            "root_device_type": "ebs",
                            "sriov_net_support": "simple",
                            "state": "available",
                            "state_reason.%": "2",
                            "state_reason.code": "UNSET",
                            "state_reason.message": "UNSET",
                            "tags.#": "0",
                            "virtualization_type": "hvm"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                },
                "data.aws_ami.windows_2008_amazon": {
                    "type": "aws_ami",
                    "depends_on": [],
                    "primary": {
                        "id": "ami-6d91240d",
                        "attributes": {
                            "architecture": "x86_64",
                            "block_device_mappings.#": "27",
                            "block_device_mappings.1016747457.device_name": "/dev/sda1",
                            "block_device_mappings.1016747457.ebs.%": "6",
                            "block_device_mappings.1016747457.ebs.delete_on_termination": "true",
                            "block_device_mappings.1016747457.ebs.encrypted": "false",
                            "block_device_mappings.1016747457.ebs.iops": "0",
                            "block_device_mappings.1016747457.ebs.snapshot_id": "snap-9e9fa165",
                            "block_device_mappings.1016747457.ebs.volume_size": "30",
                            "block_device_mappings.1016747457.ebs.volume_type": "gp2",
                            "block_device_mappings.1016747457.no_device": "",
                            "block_device_mappings.1016747457.virtual_name": "",
                            "block_device_mappings.1059705198.device_name": "xvdcq",
                            "block_device_mappings.1059705198.ebs.%": "0",
                            "block_device_mappings.1059705198.no_device": "",
                            "block_device_mappings.1059705198.virtual_name": "ephemeral16",
                            "block_device_mappings.1243518129.device_name": "xvdck",
                            "block_device_mappings.1243518129.ebs.%": "0",
                            "block_device_mappings.1243518129.no_device": "",
                            "block_device_mappings.1243518129.virtual_name": "ephemeral10",
                            "block_device_mappings.1387559417.device_name": "xvdcn",
                            "block_device_mappings.1387559417.ebs.%": "0",
                            "block_device_mappings.1387559417.no_device": "",
                            "block_device_mappings.1387559417.virtual_name": "ephemeral13",
                            "block_device_mappings.1523720897.device_name": "xvdcm",
                            "block_device_mappings.1523720897.ebs.%": "0",
                            "block_device_mappings.1523720897.no_device": "",
                            "block_device_mappings.1523720897.virtual_name": "ephemeral12",
                            "block_device_mappings.153898353.device_name": "xvdcs",
                            "block_device_mappings.153898353.ebs.%": "0",
                            "block_device_mappings.153898353.no_device": "",
                            "block_device_mappings.153898353.virtual_name": "ephemeral18",
                            "block_device_mappings.1718683500.device_name": "xvdca",
                            "block_device_mappings.1718683500.ebs.%": "0",
                            "block_device_mappings.1718683500.no_device": "",
                            "block_device_mappings.1718683500.virtual_name": "ephemeral0",
                            "block_device_mappings.2079948481.device_name": "xvdcw",
                            "block_device_mappings.2079948481.ebs.%": "0",
                            "block_device_mappings.2079948481.no_device": "",
                            "block_device_mappings.2079948481.virtual_name": "ephemeral22",
                            "block_device_mappings.2127256041.device_name": "xvdcf",
                            "block_device_mappings.2127256041.ebs.%": "0",
                            "block_device_mappings.2127256041.no_device": "",
                            "block_device_mappings.2127256041.virtual_name": "ephemeral5",
                            "block_device_mappings.2271637227.device_name": "xvdch",
                            "block_device_mappings.2271637227.ebs.%": "0",
                            "block_device_mappings.2271637227.no_device": "",
                            "block_device_mappings.2271637227.virtual_name": "ephemeral7",
                            "block_device_mappings.2335601450.device_name": "xvdct",
                            "block_device_mappings.2335601450.ebs.%": "0",
                            "block_device_mappings.2335601450.no_device": "",
                            "block_device_mappings.2335601450.virtual_name": "ephemeral19",
                            "block_device_mappings.2649854802.device_name": "xvdci",
                            "block_device_mappings.2649854802.ebs.%": "0",
                            "block_device_mappings.2649854802.no_device": "",
                            "block_device_mappings.2649854802.virtual_name": "ephemeral8",
                            "block_device_mappings.2752394454.device_name": "xvdco",
                            "block_device_mappings.2752394454.ebs.%": "0",
                            "block_device_mappings.2752394454.no_device": "",
                            "block_device_mappings.2752394454.virtual_name": "ephemeral14",
                            "block_device_mappings.2919192901.device_name": "xvdcp",
                            "block_device_mappings.2919192901.ebs.%": "0",
                            "block_device_mappings.2919192901.no_device": "",
                            "block_device_mappings.2919192901.virtual_name": "ephemeral15",
                            "block_device_mappings.3039404355.device_name": "xvdcc",
                            "block_device_mappings.3039404355.ebs.%": "0",
                            "block_device_mappings.3039404355.no_device": "",
                            "block_device_mappings.3039404355.virtual_name": "ephemeral2",
                            "block_device_mappings.3234906418.device_name": "xvdcy",
                            "block_device_mappings.3234906418.ebs.%": "0",
                            "block_device_mappings.3234906418.no_device": "",
                            "block_device_mappings.3234906418.virtual_name": "ephemeral24",
                            "block_device_mappings.3355749098.device_name": "xvdcl",
                            "block_device_mappings.3355749098.ebs.%": "0",
                            "block_device_mappings.3355749098.no_device": "",
                            "block_device_mappings.3355749098.virtual_name": "ephemeral11",
                            "block_device_mappings.3367410186.device_name": "xvdcz",
                            "block_device_mappings.3367410186.ebs.%": "0",
                            "block_device_mappings.3367410186.no_device": "",
                            "block_device_mappings.3367410186.virtual_name": "ephemeral25",
                            "block_device_mappings.3370773340.device_name": "xvdcg",
                            "block_device_mappings.3370773340.ebs.%": "0",
                            "block_device_mappings.3370773340.no_device": "",
                            "block_device_mappings.3370773340.virtual_name": "ephemeral6",
                            "block_device_mappings.3388947138.device_name": "xvdcd",
                            "block_device_mappings.3388947138.ebs.%": "0",
                            "block_device_mappings.3388947138.no_device": "",
                            "block_device_mappings.3388947138.virtual_name": "ephemeral3",
                            "block_device_mappings.3779702226.device_name": "xvdcu",
                            "block_device_mappings.3779702226.ebs.%": "0",
                            "block_device_mappings.3779702226.no_device": "",
                            "block_device_mappings.3779702226.virtual_name": "ephemeral20",
                            "block_device_mappings.3912234730.device_name": "xvdcv",
                            "block_device_mappings.3912234730.ebs.%": "0",
                            "block_device_mappings.3912234730.no_device": "",
                            "block_device_mappings.3912234730.virtual_name": "ephemeral21",
                            "block_device_mappings.4169893832.device_name": "xvdcj",
                            "block_device_mappings.4169893832.ebs.%": "0",
                            "block_device_mappings.4169893832.no_device": "",
                            "block_device_mappings.4169893832.virtual_name": "ephemeral9",
                            "block_device_mappings.464604531.device_name": "xvdce",
                            "block_device_mappings.464604531.ebs.%": "0",
                            "block_device_mappings.464604531.no_device": "",
                            "block_device_mappings.464604531.virtual_name": "ephemeral4",
                            "block_device_mappings.51057654.device_name": "xvdcb",
                            "block_device_mappings.51057654.ebs.%": "0",
                            "block_device_mappings.51057654.no_device": "",
                            "block_device_mappings.51057654.virtual_name": "ephemeral1",
                            "block_device_mappings.912952349.device_name": "xvdcx",
                            "block_device_mappings.912952349.ebs.%": "0",
                            "block_device_mappings.912952349.no_device": "",
                            "block_device_mappings.912952349.virtual_name": "ephemeral23",
                            "block_device_mappings.927959638.device_name": "xvdcr",
                            "block_device_mappings.927959638.ebs.%": "0",
                            "block_device_mappings.927959638.no_device": "",
                            "block_device_mappings.927959638.virtual_name": "ephemeral17",
                            "creation_date": "2016-12-15T18:51:16.000Z",
                            "description": "Microsoft Windows Server 2008 R2 SP1 Datacenter 64-bit Locale English Base AMI provided by Amazon",
                            "filter.#": "2",
                            "filter.2393702702.name": "name",
                            "filter.2393702702.values.#": "1",
                            "filter.2393702702.values.0": "Windows_Server-2008-R2_SP1-English-64Bit-Base*",
                            "filter.490168357.name": "virtualization-type",
                            "filter.490168357.values.#": "1",
                            "filter.490168357.values.0": "hvm",
                            "hypervisor": "xen",
                            "id": "ami-6d91240d",
                            "image_id": "ami-6d91240d",
                            "image_location": "amazon/Windows_Server-2008-R2_SP1-English-64Bit-Base-2016.12.14",
                            "image_owner_alias": "amazon",
                            "image_type": "machine",
                            "most_recent": "true",
                            "name": "Windows_Server-2008-R2_SP1-English-64Bit-Base-2016.12.14",
                            "owner_id": "801119661308",
                            "owners.#": "1",
                            "owners.0": "amazon",
                            "platform": "windows",
                            "product_codes.#": "0",
                            "public": "true",
                            "root_device_name": "/dev/sda1",
                            "root_device_type": "ebs",
                            "state": "available",
                            "state_reason.%": "2",
                            "state_reason.code": "UNSET",
                            "state_reason.message": "UNSET",
                            "tags.#": "0",
                            "virtualization_type": "hvm"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                },
                "data.aws_ami.windows_2012_amazon": {
                    "type": "aws_ami",
                    "depends_on": [],
                    "primary": {
                        "id": "ami-cf9722af",
                        "attributes": {
                            "architecture": "x86_64",
                            "block_device_mappings.#": "27",
                            "block_device_mappings.1016747457.device_name": "/dev/sda1",
                            "block_device_mappings.1016747457.ebs.%": "6",
                            "block_device_mappings.1016747457.ebs.delete_on_termination": "true",
                            "block_device_mappings.1016747457.ebs.encrypted": "false",
                            "block_device_mappings.1016747457.ebs.iops": "0",
                            "block_device_mappings.1016747457.ebs.snapshot_id": "snap-e7d9b0c3",
                            "block_device_mappings.1016747457.ebs.volume_size": "30",
                            "block_device_mappings.1016747457.ebs.volume_type": "gp2",
                            "block_device_mappings.1016747457.no_device": "",
                            "block_device_mappings.1016747457.virtual_name": "",
                            "block_device_mappings.1059705198.device_name": "xvdcq",
                            "block_device_mappings.1059705198.ebs.%": "0",
                            "block_device_mappings.1059705198.no_device": "",
                            "block_device_mappings.1059705198.virtual_name": "ephemeral16",
                            "block_device_mappings.1243518129.device_name": "xvdck",
                            "block_device_mappings.1243518129.ebs.%": "0",
                            "block_device_mappings.1243518129.no_device": "",
                            "block_device_mappings.1243518129.virtual_name": "ephemeral10",
                            "block_device_mappings.1387559417.device_name": "xvdcn",
                            "block_device_mappings.1387559417.ebs.%": "0",
                            "block_device_mappings.1387559417.no_device": "",
                            "block_device_mappings.1387559417.virtual_name": "ephemeral13",
                            "block_device_mappings.1523720897.device_name": "xvdcm",
                            "block_device_mappings.1523720897.ebs.%": "0",
                            "block_device_mappings.1523720897.no_device": "",
                            "block_device_mappings.1523720897.virtual_name": "ephemeral12",
                            "block_device_mappings.153898353.device_name": "xvdcs",
                            "block_device_mappings.153898353.ebs.%": "0",
                            "block_device_mappings.153898353.no_device": "",
                            "block_device_mappings.153898353.virtual_name": "ephemeral18",
                            "block_device_mappings.1718683500.device_name": "xvdca",
                            "block_device_mappings.1718683500.ebs.%": "0",
                            "block_device_mappings.1718683500.no_device": "",
                            "block_device_mappings.1718683500.virtual_name": "ephemeral0",
                            "block_device_mappings.2079948481.device_name": "xvdcw",
                            "block_device_mappings.2079948481.ebs.%": "0",
                            "block_device_mappings.2079948481.no_device": "",
                            "block_device_mappings.2079948481.virtual_name": "ephemeral22",
                            "block_device_mappings.2127256041.device_name": "xvdcf",
                            "block_device_mappings.2127256041.ebs.%": "0",
                            "block_device_mappings.2127256041.no_device": "",
                            "block_device_mappings.2127256041.virtual_name": "ephemeral5",
                            "block_device_mappings.2271637227.device_name": "xvdch",
                            "block_device_mappings.2271637227.ebs.%": "0",
                            "block_device_mappings.2271637227.no_device": "",
                            "block_device_mappings.2271637227.virtual_name": "ephemeral7",
                            "block_device_mappings.2335601450.device_name": "xvdct",
                            "block_device_mappings.2335601450.ebs.%": "0",
                            "block_device_mappings.2335601450.no_device": "",
                            "block_device_mappings.2335601450.virtual_name": "ephemeral19",
                            "block_device_mappings.2649854802.device_name": "xvdci",
                            "block_device_mappings.2649854802.ebs.%": "0",
                            "block_device_mappings.2649854802.no_device": "",
                            "block_device_mappings.2649854802.virtual_name": "ephemeral8",
                            "block_device_mappings.2752394454.device_name": "xvdco",
                            "block_device_mappings.2752394454.ebs.%": "0",
                            "block_device_mappings.2752394454.no_device": "",
                            "block_device_mappings.2752394454.virtual_name": "ephemeral14",
                            "block_device_mappings.2919192901.device_name": "xvdcp",
                            "block_device_mappings.2919192901.ebs.%": "0",
                            "block_device_mappings.2919192901.no_device": "",
                            "block_device_mappings.2919192901.virtual_name": "ephemeral15",
                            "block_device_mappings.3039404355.device_name": "xvdcc",
                            "block_device_mappings.3039404355.ebs.%": "0",
                            "block_device_mappings.3039404355.no_device": "",
                            "block_device_mappings.3039404355.virtual_name": "ephemeral2",
                            "block_device_mappings.3234906418.device_name": "xvdcy",
                            "block_device_mappings.3234906418.ebs.%": "0",
                            "block_device_mappings.3234906418.no_device": "",
                            "block_device_mappings.3234906418.virtual_name": "ephemeral24",
                            "block_device_mappings.3355749098.device_name": "xvdcl",
                            "block_device_mappings.3355749098.ebs.%": "0",
                            "block_device_mappings.3355749098.no_device": "",
                            "block_device_mappings.3355749098.virtual_name": "ephemeral11",
                            "block_device_mappings.3367410186.device_name": "xvdcz",
                            "block_device_mappings.3367410186.ebs.%": "0",
                            "block_device_mappings.3367410186.no_device": "",
                            "block_device_mappings.3367410186.virtual_name": "ephemeral25",
                            "block_device_mappings.3370773340.device_name": "xvdcg",
                            "block_device_mappings.3370773340.ebs.%": "0",
                            "block_device_mappings.3370773340.no_device": "",
                            "block_device_mappings.3370773340.virtual_name": "ephemeral6",
                            "block_device_mappings.3388947138.device_name": "xvdcd",
                            "block_device_mappings.3388947138.ebs.%": "0",
                            "block_device_mappings.3388947138.no_device": "",
                            "block_device_mappings.3388947138.virtual_name": "ephemeral3",
                            "block_device_mappings.3779702226.device_name": "xvdcu",
                            "block_device_mappings.3779702226.ebs.%": "0",
                            "block_device_mappings.3779702226.no_device": "",
                            "block_device_mappings.3779702226.virtual_name": "ephemeral20",
                            "block_device_mappings.3912234730.device_name": "xvdcv",
                            "block_device_mappings.3912234730.ebs.%": "0",
                            "block_device_mappings.3912234730.no_device": "",
                            "block_device_mappings.3912234730.virtual_name": "ephemeral21",
                            "block_device_mappings.4169893832.device_name": "xvdcj",
                            "block_device_mappings.4169893832.ebs.%": "0",
                            "block_device_mappings.4169893832.no_device": "",
                            "block_device_mappings.4169893832.virtual_name": "ephemeral9",
                            "block_device_mappings.464604531.device_name": "xvdce",
                            "block_device_mappings.464604531.ebs.%": "0",
                            "block_device_mappings.464604531.no_device": "",
                            "block_device_mappings.464604531.virtual_name": "ephemeral4",
                            "block_device_mappings.51057654.device_name": "xvdcb",
                            "block_device_mappings.51057654.ebs.%": "0",
                            "block_device_mappings.51057654.no_device": "",
                            "block_device_mappings.51057654.virtual_name": "ephemeral1",
                            "block_device_mappings.912952349.device_name": "xvdcx",
                            "block_device_mappings.912952349.ebs.%": "0",
                            "block_device_mappings.912952349.no_device": "",
                            "block_device_mappings.912952349.virtual_name": "ephemeral23",
                            "block_device_mappings.927959638.device_name": "xvdcr",
                            "block_device_mappings.927959638.ebs.%": "0",
                            "block_device_mappings.927959638.no_device": "",
                            "block_device_mappings.927959638.virtual_name": "ephemeral17",
                            "creation_date": "2016-12-15T19:50:31.000Z",
                            "description": "Microsoft Windows Server 2012 R2 RTM 64-bit Locale English AMI provided by Amazon",
                            "filter.#": "2",
                            "filter.357410513.name": "name",
                            "filter.357410513.values.#": "1",
                            "filter.357410513.values.0": "Windows_Server-2012-R2_RTM-English-64Bit-Base*",
                            "filter.490168357.name": "virtualization-type",
                            "filter.490168357.values.#": "1",
                            "filter.490168357.values.0": "hvm",
                            "hypervisor": "xen",
                            "id": "ami-cf9722af",
                            "image_id": "ami-cf9722af",
                            "image_location": "amazon/Windows_Server-2012-R2_RTM-English-64Bit-Base-2016.12.14",
                            "image_owner_alias": "amazon",
                            "image_type": "machine",
                            "most_recent": "true",
                            "name": "Windows_Server-2012-R2_RTM-English-64Bit-Base-2016.12.14",
                            "owner_id": "801119661308",
                            "owners.#": "1",
                            "owners.0": "amazon",
                            "platform": "windows",
                            "product_codes.#": "0",
                            "public": "true",
                            "root_device_name": "/dev/sda1",
                            "root_device_type": "ebs",
                            "sriov_net_support": "simple",
                            "state": "available",
                            "state_reason.%": "2",
                            "state_reason.code": "UNSET",
                            "state_reason.message": "UNSET",
                            "tags.#": "0",
                            "virtualization_type": "hvm"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                },
                "data.terraform_remote_state.net": {
                    "type": "terraform_remote_state",
                    "depends_on": [],
                    "primary": {
                        "id": "2016-12-23 18:16:05.370725371 +0000 UTC",
                        "attributes": {
                            "XYZ_Application.%": "2",
                            "XYZ_Application.id": "sg-b85d24a9",
                            "XYZ_Application.name": "XYZ_Application_NONPROD",
                            "XYZ_Application_InstanceProfile.%": "2",
                            "XYZ_Application_InstanceProfile.id": "XYZ_NonProd_Application_InstanceProfile",
                            "XYZ_Application_InstanceProfile.name": "XYZ_NonProd_Application_InstanceProfile",
                            "XYZ_Database.%": "2",
                            "XYZ_Database.id": "sg-b8720ba9",
                            "XYZ_Database.name": "XYZ_Database_NONPROD",
                            "XYZ_Database_InstanceProfile.%": "2",
                            "XYZ_Database_InstanceProfile.id": "XYZ_NonProd_Database_InstanceProfile",
                            "XYZ_Database_InstanceProfile.name": "XYZ_NonProd_Database_InstanceProfile",
                            "XYZ_Web.%": "2",
                            "XYZ_Web.id": "sg-b8552ca9",
                            "XYZ_Web.name": "XYZ_Web_NONPROD",
                            "XYZ_Web_InstanceProfile.%": "2",
                            "XYZ_Web_InstanceProfile.id": "XYZ_NonProd_Web_InstanceProfile",
                            "XYZ_Web_InstanceProfile.name": "XYZ_NonProd_Web_InstanceProfile",
                            "backend": "local",
                            "config.%": "1",
                            "config.path": "/var/lib/go-agent/pipelines/acme_XYZ_infrastructure/terraform/env-dev/../net-nonprod/terraform.tfstate",
                            "id": "2016-12-23 18:16:05.370725371 +0000 UTC"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                }
            },
            "depends_on": []
        },
        {
            "path": [
                "root",
                "XYZ_PUDXYZA1002_user_data"
            ],
            "outputs": {
                "linux": {
                    "sensitive": false,
                    "type": "string",
                    "value": "#!/bin/bash\n\n# Configure the web-proxy\necho \"proxy=http://secureproxy.segment.domain.com:880\" \u003e\u003e /etc/yum.conf\n\n\n# Set the hostname\nhostnamectl set-hostname PUDXYZA1002.segment.domain.com\necho \"PUDXYZA1002.segment.domain.com\" \u003e /etc/hostname\necho \"127.0.0.1 PUDXYZA1002.segment.domain.com localhost.localdomain localhost\" \u003e /etc/hosts\necho \"\nNETWORKING=yes\nNOZEROCONF=yes\nNETWORKING_IPV6=no\nHOSTNAME=PUDXYZA1002.segment.domain.com\" \u003e /etc/sysconfig/network\necho \"preserve_hostname: true\" \u003e\u003e /etc/cloud/cloud.cfg\n\n\n# Update Packages\nyum update -y\n\n\n# Install Puppet\ncurl -k https://acme-puppet.segment.domain.com:8080/packages/current/install.bash | bash\n\n\n# Custom User Data\n\n"
                },
                "windows": {
                    "sensitive": false,
                    "type": "string",
                    "value": "\u003cpowershell\u003e\n\nSet-ExecutionPolicy -executionpolicy remotesigned -force\nImport-Module AWSPowershell\n\n$hostname = \"PUDXYZA1002.segment.domain.com\"\n$installer = \"puppet-agent-1.7.1-x64.msi\"\n$installer_bucket = \"acme-software-media-share-virginia\"\n$puppet_master = \"acme-puppet.segment.domain.com\"\n\nfunction getIdDocVal($key, $instIdDoc=\"\") {\n    if ($instIdDoc -eq \"\") {\n        $instIdDoc = getEc2Metadata('dynamic/instance-identity/document') | ConvertFrom-Json\n    }\n\n    if($instIdDoc.PSObject.Properties.Match($key).Count) {\n        return $instIdDoc | Select -ExpandProperty $key\n    }\n}\n\nfunction getEc2Metadata($path) {\n    $url = \"http://169.254.169.254/latest/$path\"\n    try {\n        $metadata = (Invoke-WebRequest -Uri $url -TimeoutSec 0)\n\n        if ($?) {\n            return $metadata\n        } else {\n            log \"Failed to get EC2 Metadata for $path\" red\n        }\n    } catch {\n        log \"Failed to get EC2 Metadata for $path\" red\n        Break\n    }\n}\n\nfunction getInstanceId() {\n    return (getEc2Metadata('meta-data/instance-id')).Content\n}\n\nfunction setHostname($hostname) {\n    if (([System.Net.Dns]::GetHostName()) -ne $hostname) {\n        log \"Setting hostname; current host $([System.Net.Dns]::GetHostName()) does not match $hostname\"\n        Rename-Computer -NewName $hostname -Force -Restart\n    }\n}\n\n# Set up the web proxy for KO\n\n$reg = \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\"\n\nSet-ItemProperty -Path $reg -Name ProxyServer -Value \"http://secureproxy.segment.domain.com:880\"\nSet-ItemProperty -Path $reg -Name ProxyEnable -Value 1\nSet-ItemProperty -Path $reg -Name ProxyOverride -Value \"*domain.com;231.92.*'10.*;169.254.169.254;\u003clocal\u003e\"\n\n# download the puppet agent from local bucket and install\nCopy-S3Object -BucketName $installer_bucket -Key $installer -LocalFile $env:TEMP\\$installer\n\n# msiexec /qn /norestart /i puppet-agent-\u003cVERSION\u003e-x64.msi PUPPET_MASTER_SERVER=puppet.example.com\n(Start-Process -FilePath \"msiexec.exe\" -ArgumentList \"/qn /norestart /i $env:TEMP\\$installer PUPPET_MASTER_SERVER=$puppet_master\" -Wait -Passthru).ExitCode\n\n\n# Custom User-data\n\n\n\nRename-Computer -NewName $hostname -Force -Restart\n\u003c/powershell\u003e\n"
                }
            },
            "resources": {
                "data.template_file.linux": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "b86ba5813b0a741cf1880f7a55e5ae8a2ea918dd11a6d08e879a5c366b2d69a6",
                        "attributes": {
                            "id": "b86ba5813b0a741cf1880f7a55e5ae8a2ea918dd11a6d08e879a5c366b2d69a6",
                            "rendered": "#!/bin/bash\n\n# Configure the web-proxy\necho \"proxy=http://secureproxy.segment.domain.com:880\" \u003e\u003e /etc/yum.conf\n\n\n# Set the hostname\nhostnamectl set-hostname PUDXYZA1002.segment.domain.com\necho \"PUDXYZA1002.segment.domain.com\" \u003e /etc/hostname\necho \"127.0.0.1 PUDXYZA1002.segment.domain.com localhost.localdomain localhost\" \u003e /etc/hosts\necho \"\nNETWORKING=yes\nNOZEROCONF=yes\nNETWORKING_IPV6=no\nHOSTNAME=PUDXYZA1002.segment.domain.com\" \u003e /etc/sysconfig/network\necho \"preserve_hostname: true\" \u003e\u003e /etc/cloud/cloud.cfg\n\n\n# Update Packages\nyum update -y\n\n\n# Install Puppet\ncurl -k https://acme-puppet.segment.domain.com:8080/packages/current/install.bash | bash\n\n\n# Custom User Data\n\n",
                            "template": "#!/bin/bash\n\n# Configure the web-proxy\necho \"proxy=${proxy_url}\" \u003e\u003e /etc/yum.conf\n\n\n# Set the hostname\nhostnamectl set-hostname ${hostname}\necho \"${hostname}\" \u003e /etc/hostname\necho \"127.0.0.1 ${hostname} localhost.localdomain localhost\" \u003e /etc/hosts\necho \"\nNETWORKING=yes\nNOZEROCONF=yes\nNETWORKING_IPV6=no\nHOSTNAME=${hostname}\" \u003e /etc/sysconfig/network\necho \"preserve_hostname: true\" \u003e\u003e /etc/cloud/cloud.cfg\n\n\n# Update Packages\nyum update -y\n\n\n# Install Puppet\ncurl -k https://${puppet_master_domain}:8080/packages/current/install.bash | bash\n\n\n# Custom User Data\n${user_data}\n",
                            "vars.%": "4",
                            "vars.hostname": "PUDXYZA1002.segment.domain.com",
                            "vars.proxy_url": "http://secureproxy.segment.domain.com:880",
                            "vars.puppet_master_domain": "acme-puppet.segment.domain.com",
                            "vars.user_data": ""
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                },
                "data.template_file.windows": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "34e590123be3ca392521271cefe5823ba5e39afd3e5d5c5e9e9942a982ed15c5",
                        "attributes": {
                            "id": "34e590123be3ca392521271cefe5823ba5e39afd3e5d5c5e9e9942a982ed15c5",
                            "rendered": "\u003cpowershell\u003e\n\nSet-ExecutionPolicy -executionpolicy remotesigned -force\nImport-Module AWSPowershell\n\n$hostname = \"PUDXYZA1002.segment.domain.com\"\n$installer = \"puppet-agent-1.7.1-x64.msi\"\n$installer_bucket = \"acme-software-media-share-virginia\"\n$puppet_master = \"acme-puppet.segment.domain.com\"\n\nfunction getIdDocVal($key, $instIdDoc=\"\") {\n    if ($instIdDoc -eq \"\") {\n        $instIdDoc = getEc2Metadata('dynamic/instance-identity/document') | ConvertFrom-Json\n    }\n\n    if($instIdDoc.PSObject.Properties.Match($key).Count) {\n        return $instIdDoc | Select -ExpandProperty $key\n    }\n}\n\nfunction getEc2Metadata($path) {\n    $url = \"http://169.254.169.254/latest/$path\"\n    try {\n        $metadata = (Invoke-WebRequest -Uri $url -TimeoutSec 0)\n\n        if ($?) {\n            return $metadata\n        } else {\n            log \"Failed to get EC2 Metadata for $path\" red\n        }\n    } catch {\n        log \"Failed to get EC2 Metadata for $path\" red\n        Break\n    }\n}\n\nfunction getInstanceId() {\n    return (getEc2Metadata('meta-data/instance-id')).Content\n}\n\nfunction setHostname($hostname) {\n    if (([System.Net.Dns]::GetHostName()) -ne $hostname) {\n        log \"Setting hostname; current host $([System.Net.Dns]::GetHostName()) does not match $hostname\"\n        Rename-Computer -NewName $hostname -Force -Restart\n    }\n}\n\n# Set up the web proxy for KO\n\n$reg = \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\"\n\nSet-ItemProperty -Path $reg -Name ProxyServer -Value \"http://secureproxy.segment.domain.com:880\"\nSet-ItemProperty -Path $reg -Name ProxyEnable -Value 1\nSet-ItemProperty -Path $reg -Name ProxyOverride -Value \"*domain.com;231.92.*'10.*;169.254.169.254;\u003clocal\u003e\"\n\n# download the puppet agent from local bucket and install\nCopy-S3Object -BucketName $installer_bucket -Key $installer -LocalFile $env:TEMP\\$installer\n\n# msiexec /qn /norestart /i puppet-agent-\u003cVERSION\u003e-x64.msi PUPPET_MASTER_SERVER=puppet.example.com\n(Start-Process -FilePath \"msiexec.exe\" -ArgumentList \"/qn /norestart /i $env:TEMP\\$installer PUPPET_MASTER_SERVER=$puppet_master\" -Wait -Passthru).ExitCode\n\n\n# Custom User-data\n\n\n\nRename-Computer -NewName $hostname -Force -Restart\n\u003c/powershell\u003e\n",
                            "template": "\u003cpowershell\u003e\n\nSet-ExecutionPolicy -executionpolicy remotesigned -force\nImport-Module AWSPowershell\n\n$hostname = \"${hostname}\"\n$installer = \"${installer}\"\n$installer_bucket = \"${installer_bucket}\"\n$puppet_master = \"${puppet_master_domain}\"\n\nfunction getIdDocVal($key, $instIdDoc=\"\") {\n    if ($instIdDoc -eq \"\") {\n        $instIdDoc = getEc2Metadata('dynamic/instance-identity/document') | ConvertFrom-Json\n    }\n\n    if($instIdDoc.PSObject.Properties.Match($key).Count) {\n        return $instIdDoc | Select -ExpandProperty $key\n    }\n}\n\nfunction getEc2Metadata($path) {\n    $url = \"http://169.254.169.254/latest/$path\"\n    try {\n        $metadata = (Invoke-WebRequest -Uri $url -TimeoutSec 0)\n\n        if ($?) {\n            return $metadata\n        } else {\n            log \"Failed to get EC2 Metadata for $path\" red\n        }\n    } catch {\n        log \"Failed to get EC2 Metadata for $path\" red\n        Break\n    }\n}\n\nfunction getInstanceId() {\n    return (getEc2Metadata('meta-data/instance-id')).Content\n}\n\nfunction setHostname($hostname) {\n    if (([System.Net.Dns]::GetHostName()) -ne $hostname) {\n        log \"Setting hostname; current host $([System.Net.Dns]::GetHostName()) does not match $hostname\"\n        Rename-Computer -NewName $hostname -Force -Restart\n    }\n}\n\n# Set up the web proxy for KO\n\n$reg = \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\"\n\nSet-ItemProperty -Path $reg -Name ProxyServer -Value \"${proxy_url}\"\nSet-ItemProperty -Path $reg -Name ProxyEnable -Value 1\nSet-ItemProperty -Path $reg -Name ProxyOverride -Value \"${proxy_override}\"\n\n# download the puppet agent from local bucket and install\nCopy-S3Object -BucketName $installer_bucket -Key $installer -LocalFile $env:TEMP\\$installer\n\n# msiexec /qn /norestart /i puppet-agent-\u003cVERSION\u003e-x64.msi PUPPET_MASTER_SERVER=puppet.example.com\n(Start-Process -FilePath \"msiexec.exe\" -ArgumentList \"/qn /norestart /i $env:TEMP\\$installer PUPPET_MASTER_SERVER=$puppet_master\" -Wait -Passthru).ExitCode\n\n\n# Custom User-data\n${user_data}\n\n\nRename-Computer -NewName $hostname -Force -Restart\n\u003c/powershell\u003e\n",
                            "vars.%": "7",
                            "vars.hostname": "PUDXYZA1002.segment.domain.com",
                            "vars.installer": "puppet-agent-1.7.1-x64.msi",
                            "vars.installer_bucket": "acme-software-media-share-virginia",
                            "vars.proxy_override": "*domain.com;231.92.*'10.*;169.254.169.254;\u003clocal\u003e",
                            "vars.proxy_url": "http://secureproxy.segment.domain.com:880",
                            "vars.puppet_master_domain": "acme-puppet.segment.domain.com",
                            "vars.user_data": ""
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                }
            },
            "depends_on": []
        },
        {
            "path": [
                "root",
                "XYZ_PUDXYZA1007_user_data"
            ],
            "outputs": {
                "linux": {
                    "sensitive": false,
                    "type": "string",
                    "value": "#!/bin/bash\n\n# Configure the web-proxy\necho \"proxy=http://secureproxy.segment.domain.com:880\" \u003e\u003e /etc/yum.conf\n\n\n# Set the hostname\nhostnamectl set-hostname PUDXYZA1007.segment.domain.com\necho \"PUDXYZA1007.segment.domain.com\" \u003e /etc/hostname\necho \"127.0.0.1 PUDXYZA1007.segment.domain.com localhost.localdomain localhost\" \u003e /etc/hosts\necho \"\nNETWORKING=yes\nNOZEROCONF=yes\nNETWORKING_IPV6=no\nHOSTNAME=PUDXYZA1007.segment.domain.com\" \u003e /etc/sysconfig/network\necho \"preserve_hostname: true\" \u003e\u003e /etc/cloud/cloud.cfg\n\n\n# Update Packages\nyum update -y\n\n\n# Install Puppet\ncurl -k https://acme-puppet.segment.domain.com:8080/packages/current/install.bash | bash\n\n\n# Custom User Data\n\n"
                },
                "windows": {
                    "sensitive": false,
                    "type": "string",
                    "value": "\u003cpowershell\u003e\n\nSet-ExecutionPolicy -executionpolicy remotesigned -force\nImport-Module AWSPowershell\n\n$hostname = \"PUDXYZA1007.segment.domain.com\"\n$installer = \"puppet-agent-1.7.1-x64.msi\"\n$installer_bucket = \"acme-software-media-share-virginia\"\n$puppet_master = \"acme-puppet.segment.domain.com\"\n\nfunction getIdDocVal($key, $instIdDoc=\"\") {\n    if ($instIdDoc -eq \"\") {\n        $instIdDoc = getEc2Metadata('dynamic/instance-identity/document') | ConvertFrom-Json\n    }\n\n    if($instIdDoc.PSObject.Properties.Match($key).Count) {\n        return $instIdDoc | Select -ExpandProperty $key\n    }\n}\n\nfunction getEc2Metadata($path) {\n    $url = \"http://169.254.169.254/latest/$path\"\n    try {\n        $metadata = (Invoke-WebRequest -Uri $url -TimeoutSec 0)\n\n        if ($?) {\n            return $metadata\n        } else {\n            log \"Failed to get EC2 Metadata for $path\" red\n        }\n    } catch {\n        log \"Failed to get EC2 Metadata for $path\" red\n        Break\n    }\n}\n\nfunction getInstanceId() {\n    return (getEc2Metadata('meta-data/instance-id')).Content\n}\n\nfunction setHostname($hostname) {\n    if (([System.Net.Dns]::GetHostName()) -ne $hostname) {\n        log \"Setting hostname; current host $([System.Net.Dns]::GetHostName()) does not match $hostname\"\n        Rename-Computer -NewName $hostname -Force -Restart\n    }\n}\n\n# Set up the web proxy for KO\n\n$reg = \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\"\n\nSet-ItemProperty -Path $reg -Name ProxyServer -Value \"http://secureproxy.segment.domain.com:880\"\nSet-ItemProperty -Path $reg -Name ProxyEnable -Value 1\nSet-ItemProperty -Path $reg -Name ProxyOverride -Value \"*domain.com;231.92.*'10.*;169.254.169.254;\u003clocal\u003e\"\n\n# download the puppet agent from local bucket and install\nCopy-S3Object -BucketName $installer_bucket -Key $installer -LocalFile $env:TEMP\\$installer\n\n# msiexec /qn /norestart /i puppet-agent-\u003cVERSION\u003e-x64.msi PUPPET_MASTER_SERVER=puppet.example.com\n(Start-Process -FilePath \"msiexec.exe\" -ArgumentList \"/qn /norestart /i $env:TEMP\\$installer PUPPET_MASTER_SERVER=$puppet_master\" -Wait -Passthru).ExitCode\n\n\n# Custom User-data\n\n\n\nRename-Computer -NewName $hostname -Force -Restart\n\u003c/powershell\u003e\n"
                }
            },
            "resources": {
                "data.template_file.linux": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "0af2956d78b10594c505a03297cd675d81ed00cb4a8fa3c1eb14b2f8d92f435e",
                        "attributes": {
                            "id": "0af2956d78b10594c505a03297cd675d81ed00cb4a8fa3c1eb14b2f8d92f435e",
                            "rendered": "#!/bin/bash\n\n# Configure the web-proxy\necho \"proxy=http://secureproxy.segment.domain.com:880\" \u003e\u003e /etc/yum.conf\n\n\n# Set the hostname\nhostnamectl set-hostname PUDXYZA1007.segment.domain.com\necho \"PUDXYZA1007.segment.domain.com\" \u003e /etc/hostname\necho \"127.0.0.1 PUDXYZA1007.segment.domain.com localhost.localdomain localhost\" \u003e /etc/hosts\necho \"\nNETWORKING=yes\nNOZEROCONF=yes\nNETWORKING_IPV6=no\nHOSTNAME=PUDXYZA1007.segment.domain.com\" \u003e /etc/sysconfig/network\necho \"preserve_hostname: true\" \u003e\u003e /etc/cloud/cloud.cfg\n\n\n# Update Packages\nyum update -y\n\n\n# Install Puppet\ncurl -k https://acme-puppet.segment.domain.com:8080/packages/current/install.bash | bash\n\n\n# Custom User Data\n\n",
                            "template": "#!/bin/bash\n\n# Configure the web-proxy\necho \"proxy=${proxy_url}\" \u003e\u003e /etc/yum.conf\n\n\n# Set the hostname\nhostnamectl set-hostname ${hostname}\necho \"${hostname}\" \u003e /etc/hostname\necho \"127.0.0.1 ${hostname} localhost.localdomain localhost\" \u003e /etc/hosts\necho \"\nNETWORKING=yes\nNOZEROCONF=yes\nNETWORKING_IPV6=no\nHOSTNAME=${hostname}\" \u003e /etc/sysconfig/network\necho \"preserve_hostname: true\" \u003e\u003e /etc/cloud/cloud.cfg\n\n\n# Update Packages\nyum update -y\n\n\n# Install Puppet\ncurl -k https://${puppet_master_domain}:8080/packages/current/install.bash | bash\n\n\n# Custom User Data\n${user_data}\n",
                            "vars.%": "4",
                            "vars.hostname": "PUDXYZA1007.segment.domain.com",
                            "vars.proxy_url": "http://secureproxy.segment.domain.com:880",
                            "vars.puppet_master_domain": "acme-puppet.segment.domain.com",
                            "vars.user_data": ""
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                },
                "data.template_file.windows": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "eabf5710f225e05c76aba07ec77ab0ac03fdefad09b3137a6cda80e945e92bb5",
                        "attributes": {
                            "id": "eabf5710f225e05c76aba07ec77ab0ac03fdefad09b3137a6cda80e945e92bb5",
                            "rendered": "\u003cpowershell\u003e\n\nSet-ExecutionPolicy -executionpolicy remotesigned -force\nImport-Module AWSPowershell\n\n$hostname = \"PUDXYZA1007.segment.domain.com\"\n$installer = \"puppet-agent-1.7.1-x64.msi\"\n$installer_bucket = \"acme-software-media-share-virginia\"\n$puppet_master = \"acme-puppet.segment.domain.com\"\n\nfunction getIdDocVal($key, $instIdDoc=\"\") {\n    if ($instIdDoc -eq \"\") {\n        $instIdDoc = getEc2Metadata('dynamic/instance-identity/document') | ConvertFrom-Json\n    }\n\n    if($instIdDoc.PSObject.Properties.Match($key).Count) {\n        return $instIdDoc | Select -ExpandProperty $key\n    }\n}\n\nfunction getEc2Metadata($path) {\n    $url = \"http://169.254.169.254/latest/$path\"\n    try {\n        $metadata = (Invoke-WebRequest -Uri $url -TimeoutSec 0)\n\n        if ($?) {\n            return $metadata\n        } else {\n            log \"Failed to get EC2 Metadata for $path\" red\n        }\n    } catch {\n        log \"Failed to get EC2 Metadata for $path\" red\n        Break\n    }\n}\n\nfunction getInstanceId() {\n    return (getEc2Metadata('meta-data/instance-id')).Content\n}\n\nfunction setHostname($hostname) {\n    if (([System.Net.Dns]::GetHostName()) -ne $hostname) {\n        log \"Setting hostname; current host $([System.Net.Dns]::GetHostName()) does not match $hostname\"\n        Rename-Computer -NewName $hostname -Force -Restart\n    }\n}\n\n# Set up the web proxy for KO\n\n$reg = \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\"\n\nSet-ItemProperty -Path $reg -Name ProxyServer -Value \"http://secureproxy.segment.domain.com:880\"\nSet-ItemProperty -Path $reg -Name ProxyEnable -Value 1\nSet-ItemProperty -Path $reg -Name ProxyOverride -Value \"*domain.com;231.92.*'10.*;169.254.169.254;\u003clocal\u003e\"\n\n# download the puppet agent from local bucket and install\nCopy-S3Object -BucketName $installer_bucket -Key $installer -LocalFile $env:TEMP\\$installer\n\n# msiexec /qn /norestart /i puppet-agent-\u003cVERSION\u003e-x64.msi PUPPET_MASTER_SERVER=puppet.example.com\n(Start-Process -FilePath \"msiexec.exe\" -ArgumentList \"/qn /norestart /i $env:TEMP\\$installer PUPPET_MASTER_SERVER=$puppet_master\" -Wait -Passthru).ExitCode\n\n\n# Custom User-data\n\n\n\nRename-Computer -NewName $hostname -Force -Restart\n\u003c/powershell\u003e\n",
                            "template": "\u003cpowershell\u003e\n\nSet-ExecutionPolicy -executionpolicy remotesigned -force\nImport-Module AWSPowershell\n\n$hostname = \"${hostname}\"\n$installer = \"${installer}\"\n$installer_bucket = \"${installer_bucket}\"\n$puppet_master = \"${puppet_master_domain}\"\n\nfunction getIdDocVal($key, $instIdDoc=\"\") {\n    if ($instIdDoc -eq \"\") {\n        $instIdDoc = getEc2Metadata('dynamic/instance-identity/document') | ConvertFrom-Json\n    }\n\n    if($instIdDoc.PSObject.Properties.Match($key).Count) {\n        return $instIdDoc | Select -ExpandProperty $key\n    }\n}\n\nfunction getEc2Metadata($path) {\n    $url = \"http://169.254.169.254/latest/$path\"\n    try {\n        $metadata = (Invoke-WebRequest -Uri $url -TimeoutSec 0)\n\n        if ($?) {\n            return $metadata\n        } else {\n            log \"Failed to get EC2 Metadata for $path\" red\n        }\n    } catch {\n        log \"Failed to get EC2 Metadata for $path\" red\n        Break\n    }\n}\n\nfunction getInstanceId() {\n    return (getEc2Metadata('meta-data/instance-id')).Content\n}\n\nfunction setHostname($hostname) {\n    if (([System.Net.Dns]::GetHostName()) -ne $hostname) {\n        log \"Setting hostname; current host $([System.Net.Dns]::GetHostName()) does not match $hostname\"\n        Rename-Computer -NewName $hostname -Force -Restart\n    }\n}\n\n# Set up the web proxy for KO\n\n$reg = \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\"\n\nSet-ItemProperty -Path $reg -Name ProxyServer -Value \"${proxy_url}\"\nSet-ItemProperty -Path $reg -Name ProxyEnable -Value 1\nSet-ItemProperty -Path $reg -Name ProxyOverride -Value \"${proxy_override}\"\n\n# download the puppet agent from local bucket and install\nCopy-S3Object -BucketName $installer_bucket -Key $installer -LocalFile $env:TEMP\\$installer\n\n# msiexec /qn /norestart /i puppet-agent-\u003cVERSION\u003e-x64.msi PUPPET_MASTER_SERVER=puppet.example.com\n(Start-Process -FilePath \"msiexec.exe\" -ArgumentList \"/qn /norestart /i $env:TEMP\\$installer PUPPET_MASTER_SERVER=$puppet_master\" -Wait -Passthru).ExitCode\n\n\n# Custom User-data\n${user_data}\n\n\nRename-Computer -NewName $hostname -Force -Restart\n\u003c/powershell\u003e\n",
                            "vars.%": "7",
                            "vars.hostname": "PUDXYZA1007.segment.domain.com",
                            "vars.installer": "puppet-agent-1.7.1-x64.msi",
                            "vars.installer_bucket": "acme-software-media-share-virginia",
                            "vars.proxy_override": "*domain.com;231.92.*'10.*;169.254.169.254;\u003clocal\u003e",
                            "vars.proxy_url": "http://secureproxy.segment.domain.com:880",
                            "vars.puppet_master_domain": "acme-puppet.segment.domain.com",
                            "vars.user_data": ""
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                }
            },
            "depends_on": []
        },
        {
            "path": [
                "root",
                "XYZ_PUDXYZA1008_user_data"
            ],
            "outputs": {
                "linux": {
                    "sensitive": false,
                    "type": "string",
                    "value": "#!/bin/bash\n\n# Configure the web-proxy\necho \"proxy=http://secureproxy.segment.domain.com:880\" \u003e\u003e /etc/yum.conf\n\n\n# Set the hostname\nhostnamectl set-hostname PUDXYZA1008.segment.domain.com\necho \"PUDXYZA1008.segment.domain.com\" \u003e /etc/hostname\necho \"127.0.0.1 PUDXYZA1008.segment.domain.com localhost.localdomain localhost\" \u003e /etc/hosts\necho \"\nNETWORKING=yes\nNOZEROCONF=yes\nNETWORKING_IPV6=no\nHOSTNAME=PUDXYZA1008.segment.domain.com\" \u003e /etc/sysconfig/network\necho \"preserve_hostname: true\" \u003e\u003e /etc/cloud/cloud.cfg\n\n\n# Update Packages\nyum update -y\n\n\n# Install Puppet\ncurl -k https://acme-puppet.segment.domain.com:8080/packages/current/install.bash | bash\n\n\n# Custom User Data\n\n"
                },
                "windows": {
                    "sensitive": false,
                    "type": "string",
                    "value": "\u003cpowershell\u003e\n\nSet-ExecutionPolicy -executionpolicy remotesigned -force\nImport-Module AWSPowershell\n\n$hostname = \"PUDXYZA1008.segment.domain.com\"\n$installer = \"puppet-agent-1.7.1-x64.msi\"\n$installer_bucket = \"acme-software-media-share-virginia\"\n$puppet_master = \"acme-puppet.segment.domain.com\"\n\nfunction getIdDocVal($key, $instIdDoc=\"\") {\n    if ($instIdDoc -eq \"\") {\n        $instIdDoc = getEc2Metadata('dynamic/instance-identity/document') | ConvertFrom-Json\n    }\n\n    if($instIdDoc.PSObject.Properties.Match($key).Count) {\n        return $instIdDoc | Select -ExpandProperty $key\n    }\n}\n\nfunction getEc2Metadata($path) {\n    $url = \"http://169.254.169.254/latest/$path\"\n    try {\n        $metadata = (Invoke-WebRequest -Uri $url -TimeoutSec 0)\n\n        if ($?) {\n            return $metadata\n        } else {\n            log \"Failed to get EC2 Metadata for $path\" red\n        }\n    } catch {\n        log \"Failed to get EC2 Metadata for $path\" red\n        Break\n    }\n}\n\nfunction getInstanceId() {\n    return (getEc2Metadata('meta-data/instance-id')).Content\n}\n\nfunction setHostname($hostname) {\n    if (([System.Net.Dns]::GetHostName()) -ne $hostname) {\n        log \"Setting hostname; current host $([System.Net.Dns]::GetHostName()) does not match $hostname\"\n        Rename-Computer -NewName $hostname -Force -Restart\n    }\n}\n\n# Set up the web proxy for KO\n\n$reg = \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\"\n\nSet-ItemProperty -Path $reg -Name ProxyServer -Value \"http://secureproxy.segment.domain.com:880\"\nSet-ItemProperty -Path $reg -Name ProxyEnable -Value 1\nSet-ItemProperty -Path $reg -Name ProxyOverride -Value \"*domain.com;231.92.*'10.*;169.254.169.254;\u003clocal\u003e\"\n\n# download the puppet agent from local bucket and install\nCopy-S3Object -BucketName $installer_bucket -Key $installer -LocalFile $env:TEMP\\$installer\n\n# msiexec /qn /norestart /i puppet-agent-\u003cVERSION\u003e-x64.msi PUPPET_MASTER_SERVER=puppet.example.com\n(Start-Process -FilePath \"msiexec.exe\" -ArgumentList \"/qn /norestart /i $env:TEMP\\$installer PUPPET_MASTER_SERVER=$puppet_master\" -Wait -Passthru).ExitCode\n\n\n# Custom User-data\n\n\n\nRename-Computer -NewName $hostname -Force -Restart\n\u003c/powershell\u003e\n"
                }
            },
            "resources": {
                "data.template_file.linux": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "368d31f9c1196080d273fb71f85ce20576aaf5f2a5ffd1aecaeabf0b06227935",
                        "attributes": {
                            "id": "368d31f9c1196080d273fb71f85ce20576aaf5f2a5ffd1aecaeabf0b06227935",
                            "rendered": "#!/bin/bash\n\n# Configure the web-proxy\necho \"proxy=http://secureproxy.segment.domain.com:880\" \u003e\u003e /etc/yum.conf\n\n\n# Set the hostname\nhostnamectl set-hostname PUDXYZA1008.segment.domain.com\necho \"PUDXYZA1008.segment.domain.com\" \u003e /etc/hostname\necho \"127.0.0.1 PUDXYZA1008.segment.domain.com localhost.localdomain localhost\" \u003e /etc/hosts\necho \"\nNETWORKING=yes\nNOZEROCONF=yes\nNETWORKING_IPV6=no\nHOSTNAME=PUDXYZA1008.segment.domain.com\" \u003e /etc/sysconfig/network\necho \"preserve_hostname: true\" \u003e\u003e /etc/cloud/cloud.cfg\n\n\n# Update Packages\nyum update -y\n\n\n# Install Puppet\ncurl -k https://acme-puppet.segment.domain.com:8080/packages/current/install.bash | bash\n\n\n# Custom User Data\n\n",
                            "template": "#!/bin/bash\n\n# Configure the web-proxy\necho \"proxy=${proxy_url}\" \u003e\u003e /etc/yum.conf\n\n\n# Set the hostname\nhostnamectl set-hostname ${hostname}\necho \"${hostname}\" \u003e /etc/hostname\necho \"127.0.0.1 ${hostname} localhost.localdomain localhost\" \u003e /etc/hosts\necho \"\nNETWORKING=yes\nNOZEROCONF=yes\nNETWORKING_IPV6=no\nHOSTNAME=${hostname}\" \u003e /etc/sysconfig/network\necho \"preserve_hostname: true\" \u003e\u003e /etc/cloud/cloud.cfg\n\n\n# Update Packages\nyum update -y\n\n\n# Install Puppet\ncurl -k https://${puppet_master_domain}:8080/packages/current/install.bash | bash\n\n\n# Custom User Data\n${user_data}\n",
                            "vars.%": "4",
                            "vars.hostname": "PUDXYZA1008.segment.domain.com",
                            "vars.proxy_url": "http://secureproxy.segment.domain.com:880",
                            "vars.puppet_master_domain": "acme-puppet.segment.domain.com",
                            "vars.user_data": ""
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                },
                "data.template_file.windows": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "5a4cdd6b6bc8b88f0ce82246c4b9c847948128807668205c64bffb2787b9ad88",
                        "attributes": {
                            "id": "5a4cdd6b6bc8b88f0ce82246c4b9c847948128807668205c64bffb2787b9ad88",
                            "rendered": "\u003cpowershell\u003e\n\nSet-ExecutionPolicy -executionpolicy remotesigned -force\nImport-Module AWSPowershell\n\n$hostname = \"PUDXYZA1008.segment.domain.com\"\n$installer = \"puppet-agent-1.7.1-x64.msi\"\n$installer_bucket = \"acme-software-media-share-virginia\"\n$puppet_master = \"acme-puppet.segment.domain.com\"\n\nfunction getIdDocVal($key, $instIdDoc=\"\") {\n    if ($instIdDoc -eq \"\") {\n        $instIdDoc = getEc2Metadata('dynamic/instance-identity/document') | ConvertFrom-Json\n    }\n\n    if($instIdDoc.PSObject.Properties.Match($key).Count) {\n        return $instIdDoc | Select -ExpandProperty $key\n    }\n}\n\nfunction getEc2Metadata($path) {\n    $url = \"http://169.254.169.254/latest/$path\"\n    try {\n        $metadata = (Invoke-WebRequest -Uri $url -TimeoutSec 0)\n\n        if ($?) {\n            return $metadata\n        } else {\n            log \"Failed to get EC2 Metadata for $path\" red\n        }\n    } catch {\n        log \"Failed to get EC2 Metadata for $path\" red\n        Break\n    }\n}\n\nfunction getInstanceId() {\n    return (getEc2Metadata('meta-data/instance-id')).Content\n}\n\nfunction setHostname($hostname) {\n    if (([System.Net.Dns]::GetHostName()) -ne $hostname) {\n        log \"Setting hostname; current host $([System.Net.Dns]::GetHostName()) does not match $hostname\"\n        Rename-Computer -NewName $hostname -Force -Restart\n    }\n}\n\n# Set up the web proxy for KO\n\n$reg = \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\"\n\nSet-ItemProperty -Path $reg -Name ProxyServer -Value \"http://secureproxy.segment.domain.com:880\"\nSet-ItemProperty -Path $reg -Name ProxyEnable -Value 1\nSet-ItemProperty -Path $reg -Name ProxyOverride -Value \"*domain.com;231.92.*'10.*;169.254.169.254;\u003clocal\u003e\"\n\n# download the puppet agent from local bucket and install\nCopy-S3Object -BucketName $installer_bucket -Key $installer -LocalFile $env:TEMP\\$installer\n\n# msiexec /qn /norestart /i puppet-agent-\u003cVERSION\u003e-x64.msi PUPPET_MASTER_SERVER=puppet.example.com\n(Start-Process -FilePath \"msiexec.exe\" -ArgumentList \"/qn /norestart /i $env:TEMP\\$installer PUPPET_MASTER_SERVER=$puppet_master\" -Wait -Passthru).ExitCode\n\n\n# Custom User-data\n\n\n\nRename-Computer -NewName $hostname -Force -Restart\n\u003c/powershell\u003e\n",
                            "template": "\u003cpowershell\u003e\n\nSet-ExecutionPolicy -executionpolicy remotesigned -force\nImport-Module AWSPowershell\n\n$hostname = \"${hostname}\"\n$installer = \"${installer}\"\n$installer_bucket = \"${installer_bucket}\"\n$puppet_master = \"${puppet_master_domain}\"\n\nfunction getIdDocVal($key, $instIdDoc=\"\") {\n    if ($instIdDoc -eq \"\") {\n        $instIdDoc = getEc2Metadata('dynamic/instance-identity/document') | ConvertFrom-Json\n    }\n\n    if($instIdDoc.PSObject.Properties.Match($key).Count) {\n        return $instIdDoc | Select -ExpandProperty $key\n    }\n}\n\nfunction getEc2Metadata($path) {\n    $url = \"http://169.254.169.254/latest/$path\"\n    try {\n        $metadata = (Invoke-WebRequest -Uri $url -TimeoutSec 0)\n\n        if ($?) {\n            return $metadata\n        } else {\n            log \"Failed to get EC2 Metadata for $path\" red\n        }\n    } catch {\n        log \"Failed to get EC2 Metadata for $path\" red\n        Break\n    }\n}\n\nfunction getInstanceId() {\n    return (getEc2Metadata('meta-data/instance-id')).Content\n}\n\nfunction setHostname($hostname) {\n    if (([System.Net.Dns]::GetHostName()) -ne $hostname) {\n        log \"Setting hostname; current host $([System.Net.Dns]::GetHostName()) does not match $hostname\"\n        Rename-Computer -NewName $hostname -Force -Restart\n    }\n}\n\n# Set up the web proxy for KO\n\n$reg = \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\"\n\nSet-ItemProperty -Path $reg -Name ProxyServer -Value \"${proxy_url}\"\nSet-ItemProperty -Path $reg -Name ProxyEnable -Value 1\nSet-ItemProperty -Path $reg -Name ProxyOverride -Value \"${proxy_override}\"\n\n# download the puppet agent from local bucket and install\nCopy-S3Object -BucketName $installer_bucket -Key $installer -LocalFile $env:TEMP\\$installer\n\n# msiexec /qn /norestart /i puppet-agent-\u003cVERSION\u003e-x64.msi PUPPET_MASTER_SERVER=puppet.example.com\n(Start-Process -FilePath \"msiexec.exe\" -ArgumentList \"/qn /norestart /i $env:TEMP\\$installer PUPPET_MASTER_SERVER=$puppet_master\" -Wait -Passthru).ExitCode\n\n\n# Custom User-data\n${user_data}\n\n\nRename-Computer -NewName $hostname -Force -Restart\n\u003c/powershell\u003e\n",
                            "vars.%": "7",
                            "vars.hostname": "PUDXYZA1008.segment.domain.com",
                            "vars.installer": "puppet-agent-1.7.1-x64.msi",
                            "vars.installer_bucket": "acme-software-media-share-virginia",
                            "vars.proxy_override": "*domain.com;231.92.*'10.*;169.254.169.254;\u003clocal\u003e",
                            "vars.proxy_url": "http://secureproxy.segment.domain.com:880",
                            "vars.puppet_master_domain": "acme-puppet.segment.domain.com",
                            "vars.user_data": ""
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                }
            },
            "depends_on": []
        },
        {
            "path": [
                "root",
                "XYZ_PUDXYZA1009_user_data"
            ],
            "outputs": {
                "linux": {
                    "sensitive": false,
                    "type": "string",
                    "value": "#!/bin/bash\n\n# Configure the web-proxy\necho \"proxy=http://secureproxy.segment.domain.com:880\" \u003e\u003e /etc/yum.conf\n\n\n# Set the hostname\nhostnamectl set-hostname PUDXYZA1009.segment.domain.com\necho \"PUDXYZA1009.segment.domain.com\" \u003e /etc/hostname\necho \"127.0.0.1 PUDXYZA1009.segment.domain.com localhost.localdomain localhost\" \u003e /etc/hosts\necho \"\nNETWORKING=yes\nNOZEROCONF=yes\nNETWORKING_IPV6=no\nHOSTNAME=PUDXYZA1009.segment.domain.com\" \u003e /etc/sysconfig/network\necho \"preserve_hostname: true\" \u003e\u003e /etc/cloud/cloud.cfg\n\n\n# Update Packages\nyum update -y\n\n\n# Install Puppet\ncurl -k https://acme-puppet.segment.domain.com:8080/packages/current/install.bash | bash\n\n\n# Custom User Data\n\n"
                },
                "windows": {
                    "sensitive": false,
                    "type": "string",
                    "value": "\u003cpowershell\u003e\n\nSet-ExecutionPolicy -executionpolicy remotesigned -force\nImport-Module AWSPowershell\n\n$hostname = \"PUDXYZA1009.segment.domain.com\"\n$installer = \"puppet-agent-1.7.1-x64.msi\"\n$installer_bucket = \"acme-software-media-share-virginia\"\n$puppet_master = \"acme-puppet.segment.domain.com\"\n\nfunction getIdDocVal($key, $instIdDoc=\"\") {\n    if ($instIdDoc -eq \"\") {\n        $instIdDoc = getEc2Metadata('dynamic/instance-identity/document') | ConvertFrom-Json\n    }\n\n    if($instIdDoc.PSObject.Properties.Match($key).Count) {\n        return $instIdDoc | Select -ExpandProperty $key\n    }\n}\n\nfunction getEc2Metadata($path) {\n    $url = \"http://169.254.169.254/latest/$path\"\n    try {\n        $metadata = (Invoke-WebRequest -Uri $url -TimeoutSec 0)\n\n        if ($?) {\n            return $metadata\n        } else {\n            log \"Failed to get EC2 Metadata for $path\" red\n        }\n    } catch {\n        log \"Failed to get EC2 Metadata for $path\" red\n        Break\n    }\n}\n\nfunction getInstanceId() {\n    return (getEc2Metadata('meta-data/instance-id')).Content\n}\n\nfunction setHostname($hostname) {\n    if (([System.Net.Dns]::GetHostName()) -ne $hostname) {\n        log \"Setting hostname; current host $([System.Net.Dns]::GetHostName()) does not match $hostname\"\n        Rename-Computer -NewName $hostname -Force -Restart\n    }\n}\n\n# Set up the web proxy for KO\n\n$reg = \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\"\n\nSet-ItemProperty -Path $reg -Name ProxyServer -Value \"http://secureproxy.segment.domain.com:880\"\nSet-ItemProperty -Path $reg -Name ProxyEnable -Value 1\nSet-ItemProperty -Path $reg -Name ProxyOverride -Value \"*domain.com;231.92.*'10.*;169.254.169.254;\u003clocal\u003e\"\n\n# download the puppet agent from local bucket and install\nCopy-S3Object -BucketName $installer_bucket -Key $installer -LocalFile $env:TEMP\\$installer\n\n# msiexec /qn /norestart /i puppet-agent-\u003cVERSION\u003e-x64.msi PUPPET_MASTER_SERVER=puppet.example.com\n(Start-Process -FilePath \"msiexec.exe\" -ArgumentList \"/qn /norestart /i $env:TEMP\\$installer PUPPET_MASTER_SERVER=$puppet_master\" -Wait -Passthru).ExitCode\n\n\n# Custom User-data\n\n\n\nRename-Computer -NewName $hostname -Force -Restart\n\u003c/powershell\u003e\n"
                }
            },
            "resources": {
                "data.template_file.linux": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "6a963cdbd7683e88e0d580e145dd62edebee4cabc9bd24473834ba08597c6e98",
                        "attributes": {
                            "id": "6a963cdbd7683e88e0d580e145dd62edebee4cabc9bd24473834ba08597c6e98",
                            "rendered": "#!/bin/bash\n\n# Configure the web-proxy\necho \"proxy=http://secureproxy.segment.domain.com:880\" \u003e\u003e /etc/yum.conf\n\n\n# Set the hostname\nhostnamectl set-hostname PUDXYZA1009.segment.domain.com\necho \"PUDXYZA1009.segment.domain.com\" \u003e /etc/hostname\necho \"127.0.0.1 PUDXYZA1009.segment.domain.com localhost.localdomain localhost\" \u003e /etc/hosts\necho \"\nNETWORKING=yes\nNOZEROCONF=yes\nNETWORKING_IPV6=no\nHOSTNAME=PUDXYZA1009.segment.domain.com\" \u003e /etc/sysconfig/network\necho \"preserve_hostname: true\" \u003e\u003e /etc/cloud/cloud.cfg\n\n\n# Update Packages\nyum update -y\n\n\n# Install Puppet\ncurl -k https://acme-puppet.segment.domain.com:8080/packages/current/install.bash | bash\n\n\n# Custom User Data\n\n",
                            "template": "#!/bin/bash\n\n# Configure the web-proxy\necho \"proxy=${proxy_url}\" \u003e\u003e /etc/yum.conf\n\n\n# Set the hostname\nhostnamectl set-hostname ${hostname}\necho \"${hostname}\" \u003e /etc/hostname\necho \"127.0.0.1 ${hostname} localhost.localdomain localhost\" \u003e /etc/hosts\necho \"\nNETWORKING=yes\nNOZEROCONF=yes\nNETWORKING_IPV6=no\nHOSTNAME=${hostname}\" \u003e /etc/sysconfig/network\necho \"preserve_hostname: true\" \u003e\u003e /etc/cloud/cloud.cfg\n\n\n# Update Packages\nyum update -y\n\n\n# Install Puppet\ncurl -k https://${puppet_master_domain}:8080/packages/current/install.bash | bash\n\n\n# Custom User Data\n${user_data}\n",
                            "vars.%": "4",
                            "vars.hostname": "PUDXYZA1009.segment.domain.com",
                            "vars.proxy_url": "http://secureproxy.segment.domain.com:880",
                            "vars.puppet_master_domain": "acme-puppet.segment.domain.com",
                            "vars.user_data": ""
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                },
                "data.template_file.windows": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "01064133815346a30baf6bb30b2839f299caae2b351009da8ce6fd1d0283951d",
                        "attributes": {
                            "id": "01064133815346a30baf6bb30b2839f299caae2b351009da8ce6fd1d0283951d",
                            "rendered": "\u003cpowershell\u003e\n\nSet-ExecutionPolicy -executionpolicy remotesigned -force\nImport-Module AWSPowershell\n\n$hostname = \"PUDXYZA1009.segment.domain.com\"\n$installer = \"puppet-agent-1.7.1-x64.msi\"\n$installer_bucket = \"acme-software-media-share-virginia\"\n$puppet_master = \"acme-puppet.segment.domain.com\"\n\nfunction getIdDocVal($key, $instIdDoc=\"\") {\n    if ($instIdDoc -eq \"\") {\n        $instIdDoc = getEc2Metadata('dynamic/instance-identity/document') | ConvertFrom-Json\n    }\n\n    if($instIdDoc.PSObject.Properties.Match($key).Count) {\n        return $instIdDoc | Select -ExpandProperty $key\n    }\n}\n\nfunction getEc2Metadata($path) {\n    $url = \"http://169.254.169.254/latest/$path\"\n    try {\n        $metadata = (Invoke-WebRequest -Uri $url -TimeoutSec 0)\n\n        if ($?) {\n            return $metadata\n        } else {\n            log \"Failed to get EC2 Metadata for $path\" red\n        }\n    } catch {\n        log \"Failed to get EC2 Metadata for $path\" red\n        Break\n    }\n}\n\nfunction getInstanceId() {\n    return (getEc2Metadata('meta-data/instance-id')).Content\n}\n\nfunction setHostname($hostname) {\n    if (([System.Net.Dns]::GetHostName()) -ne $hostname) {\n        log \"Setting hostname; current host $([System.Net.Dns]::GetHostName()) does not match $hostname\"\n        Rename-Computer -NewName $hostname -Force -Restart\n    }\n}\n\n# Set up the web proxy for KO\n\n$reg = \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\"\n\nSet-ItemProperty -Path $reg -Name ProxyServer -Value \"http://secureproxy.segment.domain.com:880\"\nSet-ItemProperty -Path $reg -Name ProxyEnable -Value 1\nSet-ItemProperty -Path $reg -Name ProxyOverride -Value \"*domain.com;231.92.*'10.*;169.254.169.254;\u003clocal\u003e\"\n\n# download the puppet agent from local bucket and install\nCopy-S3Object -BucketName $installer_bucket -Key $installer -LocalFile $env:TEMP\\$installer\n\n# msiexec /qn /norestart /i puppet-agent-\u003cVERSION\u003e-x64.msi PUPPET_MASTER_SERVER=puppet.example.com\n(Start-Process -FilePath \"msiexec.exe\" -ArgumentList \"/qn /norestart /i $env:TEMP\\$installer PUPPET_MASTER_SERVER=$puppet_master\" -Wait -Passthru).ExitCode\n\n\n# Custom User-data\n\n\n\nRename-Computer -NewName $hostname -Force -Restart\n\u003c/powershell\u003e\n",
                            "template": "\u003cpowershell\u003e\n\nSet-ExecutionPolicy -executionpolicy remotesigned -force\nImport-Module AWSPowershell\n\n$hostname = \"${hostname}\"\n$installer = \"${installer}\"\n$installer_bucket = \"${installer_bucket}\"\n$puppet_master = \"${puppet_master_domain}\"\n\nfunction getIdDocVal($key, $instIdDoc=\"\") {\n    if ($instIdDoc -eq \"\") {\n        $instIdDoc = getEc2Metadata('dynamic/instance-identity/document') | ConvertFrom-Json\n    }\n\n    if($instIdDoc.PSObject.Properties.Match($key).Count) {\n        return $instIdDoc | Select -ExpandProperty $key\n    }\n}\n\nfunction getEc2Metadata($path) {\n    $url = \"http://169.254.169.254/latest/$path\"\n    try {\n        $metadata = (Invoke-WebRequest -Uri $url -TimeoutSec 0)\n\n        if ($?) {\n            return $metadata\n        } else {\n            log \"Failed to get EC2 Metadata for $path\" red\n        }\n    } catch {\n        log \"Failed to get EC2 Metadata for $path\" red\n        Break\n    }\n}\n\nfunction getInstanceId() {\n    return (getEc2Metadata('meta-data/instance-id')).Content\n}\n\nfunction setHostname($hostname) {\n    if (([System.Net.Dns]::GetHostName()) -ne $hostname) {\n        log \"Setting hostname; current host $([System.Net.Dns]::GetHostName()) does not match $hostname\"\n        Rename-Computer -NewName $hostname -Force -Restart\n    }\n}\n\n# Set up the web proxy for KO\n\n$reg = \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\"\n\nSet-ItemProperty -Path $reg -Name ProxyServer -Value \"${proxy_url}\"\nSet-ItemProperty -Path $reg -Name ProxyEnable -Value 1\nSet-ItemProperty -Path $reg -Name ProxyOverride -Value \"${proxy_override}\"\n\n# download the puppet agent from local bucket and install\nCopy-S3Object -BucketName $installer_bucket -Key $installer -LocalFile $env:TEMP\\$installer\n\n# msiexec /qn /norestart /i puppet-agent-\u003cVERSION\u003e-x64.msi PUPPET_MASTER_SERVER=puppet.example.com\n(Start-Process -FilePath \"msiexec.exe\" -ArgumentList \"/qn /norestart /i $env:TEMP\\$installer PUPPET_MASTER_SERVER=$puppet_master\" -Wait -Passthru).ExitCode\n\n\n# Custom User-data\n${user_data}\n\n\nRename-Computer -NewName $hostname -Force -Restart\n\u003c/powershell\u003e\n",
                            "vars.%": "7",
                            "vars.hostname": "PUDXYZA1009.segment.domain.com",
                            "vars.installer": "puppet-agent-1.7.1-x64.msi",
                            "vars.installer_bucket": "acme-software-media-share-virginia",
                            "vars.proxy_override": "*domain.com;231.92.*'10.*;169.254.169.254;\u003clocal\u003e",
                            "vars.proxy_url": "http://secureproxy.segment.domain.com:880",
                            "vars.puppet_master_domain": "acme-puppet.segment.domain.com",
                            "vars.user_data": ""
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                }
            },
            "depends_on": []
        },
        {
            "path": [
                "root",
                "XYZ_PUPXYZA1000_user_data"
            ],
            "outputs": {
                "user_data": {
                    "sensitive": false,
                    "type": "string",
                    "value": "#!/bin/bash\n\n# Configure the web-proxy\necho \"proxy=http://secureproxy.segment.domain.com:880\" \u003e\u003e /etc/yum.conf\n\n\n# Set the hostname\nhostnamectl set-hostname PUPXYZA1000\necho \"PUPXYZA1000\" \u003e /etc/hostname\necho \"127.0.0.1 PUPXYZA1000 localhost.localdomain localhost\" \u003e /etc/hosts\necho \"\nNETWORKING=yes\nNOZEROCONF=yes\nNETWORKING_IPV6=no\nHOSTNAME=PUPXYZA1000\" \u003e /etc/sysconfig/network\necho \"preserve_hostname: true\" \u003e\u003e /etc/cloud/cloud.cfg\n\n\n# Update Packages\nyum update -y\n\n\n# Install Puppet\ncurl -k https://acme-puppet.segment.domain.com:8080/packages/current/install.bash | bash\n\n\n# Custom User Data\n\n"
                }
            },
            "resources": {},
            "depends_on": []
        },
        {
            "path": [
                "root",
                "XYZ_PUPXYZA1001_user_data"
            ],
            "outputs": {
                "user_data": {
                    "sensitive": false,
                    "type": "string",
                    "value": "#!/bin/bash\n\n# Configure the web-proxy\necho \"proxy=http://secureproxy.segment.domain.com:880\" \u003e\u003e /etc/yum.conf\n\n\n# Set the hostname\nhostnamectl set-hostname PUPXYZA1001\necho \"PUPXYZA1001\" \u003e /etc/hostname\necho \"127.0.0.1 PUPXYZA1001 localhost.localdomain localhost\" \u003e /etc/hosts\necho \"\nNETWORKING=yes\nNOZEROCONF=yes\nNETWORKING_IPV6=no\nHOSTNAME=PUPXYZA1001\" \u003e /etc/sysconfig/network\necho \"preserve_hostname: true\" \u003e\u003e /etc/cloud/cloud.cfg\n\n\n# Update Packages\nyum update -y\n\n\n# Install Puppet\ncurl -k https://acme-puppet.segment.domain.com:8080/packages/current/install.bash | bash\n\n\n# Custom User Data\n\n"
                }
            },
            "resources": {},
            "depends_on": []
        },
        {
            "path": [
                "root",
                "XYZ_PUPXYZA1002_user_data"
            ],
            "outputs": {
                "linux": {
                    "sensitive": false,
                    "type": "string",
                    "value": "#!/bin/bash\n\n# Configure the web-proxy\necho \"proxy=http://secureproxy.segment.domain.com:880\" \u003e\u003e /etc/yum.conf\n\n\n# Set the hostname\nhostnamectl set-hostname PUPXYZA1002\necho \"PUPXYZA1002\" \u003e /etc/hostname\necho \"127.0.0.1 PUPXYZA1002 localhost.localdomain localhost\" \u003e /etc/hosts\necho \"\nNETWORKING=yes\nNOZEROCONF=yes\nNETWORKING_IPV6=no\nHOSTNAME=PUPXYZA1002\" \u003e /etc/sysconfig/network\necho \"preserve_hostname: true\" \u003e\u003e /etc/cloud/cloud.cfg\n\n\n# Update Packages\nyum update -y\n\n\n# Install Puppet\ncurl -k https://acme-puppet.segment.domain.com:8080/packages/current/install.bash | bash\n\n\n# Custom User Data\n\n"
                },
                "windows": {
                    "sensitive": false,
                    "type": "string",
                    "value": "\u003cpowershell\u003e\n\nSet-ExecutionPolicy -executionpolicy remotesigned -force\nImport-Module AWSPowershell\n\n$hostname = \"PUPXYZA1002\"\n$installer = \"puppet-agent-1.7.1-x64.msi\"\n$installer_bucket = \"acme-software-media-share-virginia\"\n$puppet_master = \"acme-puppet.segment.domain.com\"\n\nfunction getIdDocVal($key, $instIdDoc=\"\") {\n    if ($instIdDoc -eq \"\") {\n        $instIdDoc = getEc2Metadata('dynamic/instance-identity/document') | ConvertFrom-Json\n    }\n\n    if($instIdDoc.PSObject.Properties.Match($key).Count) {\n        return $instIdDoc | Select -ExpandProperty $key\n    }\n}\n\nfunction getEc2Metadata($path) {\n    $url = \"http://169.254.169.254/latest/$path\"\n    try {\n        $metadata = (Invoke-WebRequest -Uri $url -TimeoutSec 0)\n\n        if ($?) {\n            return $metadata\n        } else {\n            log \"Failed to get EC2 Metadata for $path\" red\n        }\n    } catch {\n        log \"Failed to get EC2 Metadata for $path\" red\n        Break\n    }\n}\n\nfunction getInstanceId() {\n    return (getEc2Metadata('meta-data/instance-id')).Content\n}\n\nfunction setHostname($hostname) {\n    if (([System.Net.Dns]::GetHostName()) -ne $hostname) {\n        log \"Setting hostname; current host $([System.Net.Dns]::GetHostName()) does not match $hostname\"\n        Rename-Computer -NewName $hostname -Force -Restart\n    }\n}\n\n# Set up the web proxy for KO\n\n$reg = \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\"\n\nSet-ItemProperty -Path $reg -Name ProxyServer -Value \"http://secureproxy.segment.domain.com:880\"\nSet-ItemProperty -Path $reg -Name ProxyEnable -Value 1\nSet-ItemProperty -Path $reg -Name ProxyOverride -Value \"*domain.com;231.92.*'10.*;169.254.169.254;\u003clocal\u003e\"\n\n# download the puppet agent from local bucket and install\nCopy-S3Object -BucketName $installer_bucket -Key $installer -LocalFile $env:TEMP\\$installer\n\n# msiexec /qn /norestart /i puppet-agent-\u003cVERSION\u003e-x64.msi PUPPET_MASTER_SERVER=puppet.example.com\n(Start-Process -FilePath \"msiexec.exe\" -ArgumentList \"/qn /norestart /i $env:TEMP\\$installer PUPPET_MASTER_SERVER=$puppet_master\" -Wait -Passthru).ExitCode\n\n\n# Custom User-data\n\n\n\nRename-Computer -NewName $hostname -Force -Restart\n\u003c/powershell\u003e\n"
                }
            },
            "resources": {},
            "depends_on": []
        },
        {
            "path": [
                "root",
                "XYZ_PUPXYZA1003_user_data"
            ],
            "outputs": {
                "user_data": {
                    "sensitive": false,
                    "type": "string",
                    "value": "#!/bin/bash\n\n# Configure the web-proxy\necho \"proxy=http://secureproxy.segment.domain.com:880\" \u003e\u003e /etc/yum.conf\n\n\n# Set the hostname\nhostnamectl set-hostname PUPXYZA1003\necho \"PUPXYZA1003\" \u003e /etc/hostname\necho \"127.0.0.1 PUPXYZA1003 localhost.localdomain localhost\" \u003e /etc/hosts\necho \"\nNETWORKING=yes\nNOZEROCONF=yes\nNETWORKING_IPV6=no\nHOSTNAME=PUPXYZA1003\" \u003e /etc/sysconfig/network\necho \"preserve_hostname: true\" \u003e\u003e /etc/cloud/cloud.cfg\n\n\n# Update Packages\nyum update -y\n\n\n# Install Puppet\ncurl -k https://acme-puppet.segment.domain.com:8080/packages/current/install.bash | bash\n\n\n# Custom User Data\n\n"
                }
            },
            "resources": {},
            "depends_on": []
        },
        {
            "path": [
                "root",
                "XYZ_PUPXYZA1004_user_data"
            ],
            "outputs": {
                "user_data": {
                    "sensitive": false,
                    "type": "string",
                    "value": "#!/bin/bash\n\n# Configure the web-proxy\necho \"proxy=http://secureproxy.segment.domain.com:880\" \u003e\u003e /etc/yum.conf\n\n\n# Set the hostname\nhostnamectl set-hostname PUPXYZA1004\necho \"PUPXYZA1004\" \u003e /etc/hostname\necho \"127.0.0.1 PUPXYZA1004 localhost.localdomain localhost\" \u003e /etc/hosts\necho \"\nNETWORKING=yes\nNOZEROCONF=yes\nNETWORKING_IPV6=no\nHOSTNAME=PUPXYZA1004\" \u003e /etc/sysconfig/network\necho \"preserve_hostname: true\" \u003e\u003e /etc/cloud/cloud.cfg\n\n\n# Update Packages\nyum update -y\n\n\n# Install Puppet\ncurl -k https://acme-puppet.segment.domain.com:8080/packages/current/install.bash | bash\n\n\n# Custom User Data\n\n"
                }
            },
            "resources": {},
            "depends_on": []
        },
        {
            "path": [
                "root",
                "XYZ_PUPXYZA1005_user_data"
            ],
            "outputs": {
                "user_data": {
                    "sensitive": false,
                    "type": "string",
                    "value": "#!/bin/bash\n\n# Configure the web-proxy\necho \"proxy=http://secureproxy.segment.domain.com:880\" \u003e\u003e /etc/yum.conf\n\n\n# Set the hostname\nhostnamectl set-hostname PUPXYZA1005\necho \"PUPXYZA1005\" \u003e /etc/hostname\necho \"127.0.0.1 PUPXYZA1005 localhost.localdomain localhost\" \u003e /etc/hosts\necho \"\nNETWORKING=yes\nNOZEROCONF=yes\nNETWORKING_IPV6=no\nHOSTNAME=PUPXYZA1005\" \u003e /etc/sysconfig/network\necho \"preserve_hostname: true\" \u003e\u003e /etc/cloud/cloud.cfg\n\n\n# Update Packages\nyum update -y\n\n\n# Install Puppet\ncurl -k https://acme-puppet.segment.domain.com:8080/packages/current/install.bash | bash\n\n\n# Custom User Data\n\n"
                }
            },
            "resources": {},
            "depends_on": []
        },
        {
            "path": [
                "root",
                "XYZ_PUPXYZA1006_user_data"
            ],
            "outputs": {
                "user_data": {
                    "sensitive": false,
                    "type": "string",
                    "value": "#!/bin/bash\n\n# Configure the web-proxy\necho \"proxy=http://secureproxy.segment.domain.com:880\" \u003e\u003e /etc/yum.conf\n\n\n# Set the hostname\nhostnamectl set-hostname PUPXYZA1006\necho \"PUPXYZA1006\" \u003e /etc/hostname\necho \"127.0.0.1 PUPXYZA1006 localhost.localdomain localhost\" \u003e /etc/hosts\necho \"\nNETWORKING=yes\nNOZEROCONF=yes\nNETWORKING_IPV6=no\nHOSTNAME=PUPXYZA1006\" \u003e /etc/sysconfig/network\necho \"preserve_hostname: true\" \u003e\u003e /etc/cloud/cloud.cfg\n\n\n# Update Packages\nyum update -y\n\n\n# Install Puppet\ncurl -k https://acme-puppet.segment.domain.com:8080/packages/current/install.bash | bash\n\n\n# Custom User Data\n\n"
                }
            },
            "resources": {},
            "depends_on": []
        },
        {
            "path": [
                "root",
                "XYZ_PUPXYZA1007_user_data"
            ],
            "outputs": {
                "linux": {
                    "sensitive": false,
                    "type": "string",
                    "value": "#!/bin/bash\n\n# Configure the web-proxy\necho \"proxy=http://secureproxy.segment.domain.com:880\" \u003e\u003e /etc/yum.conf\n\n\n# Set the hostname\nhostnamectl set-hostname PUPXYZA1007\necho \"PUPXYZA1007\" \u003e /etc/hostname\necho \"127.0.0.1 PUPXYZA1007 localhost.localdomain localhost\" \u003e /etc/hosts\necho \"\nNETWORKING=yes\nNOZEROCONF=yes\nNETWORKING_IPV6=no\nHOSTNAME=PUPXYZA1007\" \u003e /etc/sysconfig/network\necho \"preserve_hostname: true\" \u003e\u003e /etc/cloud/cloud.cfg\n\n\n# Update Packages\nyum update -y\n\n\n# Install Puppet\ncurl -k https://acme-puppet.segment.domain.com:8080/packages/current/install.bash | bash\n\n\n# Custom User Data\n\n"
                },
                "windows": {
                    "sensitive": false,
                    "type": "string",
                    "value": "\u003cpowershell\u003e\n\nSet-ExecutionPolicy -executionpolicy remotesigned -force\nImport-Module AWSPowershell\n\n$hostname = \"PUPXYZA1007\"\n$installer = \"puppet-agent-1.7.1-x64.msi\"\n$installer_bucket = \"acme-software-media-share-virginia\"\n$puppet_master = \"acme-puppet.segment.domain.com\"\n\nfunction getIdDocVal($key, $instIdDoc=\"\") {\n    if ($instIdDoc -eq \"\") {\n        $instIdDoc = getEc2Metadata('dynamic/instance-identity/document') | ConvertFrom-Json\n    }\n\n    if($instIdDoc.PSObject.Properties.Match($key).Count) {\n        return $instIdDoc | Select -ExpandProperty $key\n    }\n}\n\nfunction getEc2Metadata($path) {\n    $url = \"http://169.254.169.254/latest/$path\"\n    try {\n        $metadata = (Invoke-WebRequest -Uri $url -TimeoutSec 0)\n\n        if ($?) {\n            return $metadata\n        } else {\n            log \"Failed to get EC2 Metadata for $path\" red\n        }\n    } catch {\n        log \"Failed to get EC2 Metadata for $path\" red\n        Break\n    }\n}\n\nfunction getInstanceId() {\n    return (getEc2Metadata('meta-data/instance-id')).Content\n}\n\nfunction setHostname($hostname) {\n    if (([System.Net.Dns]::GetHostName()) -ne $hostname) {\n        log \"Setting hostname; current host $([System.Net.Dns]::GetHostName()) does not match $hostname\"\n        Rename-Computer -NewName $hostname -Force -Restart\n    }\n}\n\n# Set up the web proxy for KO\n\n$reg = \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\"\n\nSet-ItemProperty -Path $reg -Name ProxyServer -Value \"http://secureproxy.segment.domain.com:880\"\nSet-ItemProperty -Path $reg -Name ProxyEnable -Value 1\nSet-ItemProperty -Path $reg -Name ProxyOverride -Value \"*domain.com;231.92.*'10.*;169.254.169.254;\u003clocal\u003e\"\n\n# download the puppet agent from local bucket and install\nCopy-S3Object -BucketName $installer_bucket -Key $installer -LocalFile $env:TEMP\\$installer\n\n# msiexec /qn /norestart /i puppet-agent-\u003cVERSION\u003e-x64.msi PUPPET_MASTER_SERVER=puppet.example.com\n(Start-Process -FilePath \"msiexec.exe\" -ArgumentList \"/qn /norestart /i $env:TEMP\\$installer PUPPET_MASTER_SERVER=$puppet_master\" -Wait -Passthru).ExitCode\n\n\n# Custom User-data\n\n\n\nRename-Computer -NewName $hostname -Force -Restart\n\u003c/powershell\u003e\n"
                }
            },
            "resources": {},
            "depends_on": []
        },
        {
            "path": [
                "root",
                "XYZ_PUPXYZA1008_user_data"
            ],
            "outputs": {
                "linux": {
                    "sensitive": false,
                    "type": "string",
                    "value": "#!/bin/bash\n\n# Configure the web-proxy\necho \"proxy=http://secureproxy.segment.domain.com:880\" \u003e\u003e /etc/yum.conf\n\n\n# Set the hostname\nhostnamectl set-hostname PUPXYZA1008\necho \"PUPXYZA1008\" \u003e /etc/hostname\necho \"127.0.0.1 PUPXYZA1008 localhost.localdomain localhost\" \u003e /etc/hosts\necho \"\nNETWORKING=yes\nNOZEROCONF=yes\nNETWORKING_IPV6=no\nHOSTNAME=PUPXYZA1008\" \u003e /etc/sysconfig/network\necho \"preserve_hostname: true\" \u003e\u003e /etc/cloud/cloud.cfg\n\n\n# Update Packages\nyum update -y\n\n\n# Install Puppet\ncurl -k https://acme-puppet.segment.domain.com:8080/packages/current/install.bash | bash\n\n\n# Custom User Data\n\n"
                },
                "windows": {
                    "sensitive": false,
                    "type": "string",
                    "value": "\u003cpowershell\u003e\n\nSet-ExecutionPolicy -executionpolicy remotesigned -force\nImport-Module AWSPowershell\n\n$hostname = \"PUPXYZA1008\"\n$installer = \"puppet-agent-1.7.1-x64.msi\"\n$installer_bucket = \"acme-software-media-share-virginia\"\n$puppet_master = \"acme-puppet.segment.domain.com\"\n\nfunction getIdDocVal($key, $instIdDoc=\"\") {\n    if ($instIdDoc -eq \"\") {\n        $instIdDoc = getEc2Metadata('dynamic/instance-identity/document') | ConvertFrom-Json\n    }\n\n    if($instIdDoc.PSObject.Properties.Match($key).Count) {\n        return $instIdDoc | Select -ExpandProperty $key\n    }\n}\n\nfunction getEc2Metadata($path) {\n    $url = \"http://169.254.169.254/latest/$path\"\n    try {\n        $metadata = (Invoke-WebRequest -Uri $url -TimeoutSec 0)\n\n        if ($?) {\n            return $metadata\n        } else {\n            log \"Failed to get EC2 Metadata for $path\" red\n        }\n    } catch {\n        log \"Failed to get EC2 Metadata for $path\" red\n        Break\n    }\n}\n\nfunction getInstanceId() {\n    return (getEc2Metadata('meta-data/instance-id')).Content\n}\n\nfunction setHostname($hostname) {\n    if (([System.Net.Dns]::GetHostName()) -ne $hostname) {\n        log \"Setting hostname; current host $([System.Net.Dns]::GetHostName()) does not match $hostname\"\n        Rename-Computer -NewName $hostname -Force -Restart\n    }\n}\n\n# Set up the web proxy for KO\n\n$reg = \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\"\n\nSet-ItemProperty -Path $reg -Name ProxyServer -Value \"http://secureproxy.segment.domain.com:880\"\nSet-ItemProperty -Path $reg -Name ProxyEnable -Value 1\nSet-ItemProperty -Path $reg -Name ProxyOverride -Value \"*domain.com;231.92.*'10.*;169.254.169.254;\u003clocal\u003e\"\n\n# download the puppet agent from local bucket and install\nCopy-S3Object -BucketName $installer_bucket -Key $installer -LocalFile $env:TEMP\\$installer\n\n# msiexec /qn /norestart /i puppet-agent-\u003cVERSION\u003e-x64.msi PUPPET_MASTER_SERVER=puppet.example.com\n(Start-Process -FilePath \"msiexec.exe\" -ArgumentList \"/qn /norestart /i $env:TEMP\\$installer PUPPET_MASTER_SERVER=$puppet_master\" -Wait -Passthru).ExitCode\n\n\n# Custom User-data\n\n\n\nRename-Computer -NewName $hostname -Force -Restart\n\u003c/powershell\u003e\n"
                }
            },
            "resources": {},
            "depends_on": []
        },
        {
            "path": [
                "root",
                "XYZ_PUPXYZA1009_user_data"
            ],
            "outputs": {
                "linux": {
                    "sensitive": false,
                    "type": "string",
                    "value": "#!/bin/bash\n\n# Configure the web-proxy\necho \"proxy=http://secureproxy.segment.domain.com:880\" \u003e\u003e /etc/yum.conf\n\n\n# Set the hostname\nhostnamectl set-hostname PUPXYZA1009\necho \"PUPXYZA1009\" \u003e /etc/hostname\necho \"127.0.0.1 PUPXYZA1009 localhost.localdomain localhost\" \u003e /etc/hosts\necho \"\nNETWORKING=yes\nNOZEROCONF=yes\nNETWORKING_IPV6=no\nHOSTNAME=PUPXYZA1009\" \u003e /etc/sysconfig/network\necho \"preserve_hostname: true\" \u003e\u003e /etc/cloud/cloud.cfg\n\n\n# Update Packages\nyum update -y\n\n\n# Install Puppet\ncurl -k https://acme-puppet.segment.domain.com:8080/packages/current/install.bash | bash\n\n\n# Custom User Data\n\n"
                },
                "windows": {
                    "sensitive": false,
                    "type": "string",
                    "value": "\u003cpowershell\u003e\n\nSet-ExecutionPolicy -executionpolicy remotesigned -force\nImport-Module AWSPowershell\n\n$hostname = \"PUPXYZA1009\"\n$installer = \"puppet-agent-1.7.1-x64.msi\"\n$installer_bucket = \"acme-software-media-share-virginia\"\n$puppet_master = \"acme-puppet.segment.domain.com\"\n\nfunction getIdDocVal($key, $instIdDoc=\"\") {\n    if ($instIdDoc -eq \"\") {\n        $instIdDoc = getEc2Metadata('dynamic/instance-identity/document') | ConvertFrom-Json\n    }\n\n    if($instIdDoc.PSObject.Properties.Match($key).Count) {\n        return $instIdDoc | Select -ExpandProperty $key\n    }\n}\n\nfunction getEc2Metadata($path) {\n    $url = \"http://169.254.169.254/latest/$path\"\n    try {\n        $metadata = (Invoke-WebRequest -Uri $url -TimeoutSec 0)\n\n        if ($?) {\n            return $metadata\n        } else {\n            log \"Failed to get EC2 Metadata for $path\" red\n        }\n    } catch {\n        log \"Failed to get EC2 Metadata for $path\" red\n        Break\n    }\n}\n\nfunction getInstanceId() {\n    return (getEc2Metadata('meta-data/instance-id')).Content\n}\n\nfunction setHostname($hostname) {\n    if (([System.Net.Dns]::GetHostName()) -ne $hostname) {\n        log \"Setting hostname; current host $([System.Net.Dns]::GetHostName()) does not match $hostname\"\n        Rename-Computer -NewName $hostname -Force -Restart\n    }\n}\n\n# Set up the web proxy for KO\n\n$reg = \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\"\n\nSet-ItemProperty -Path $reg -Name ProxyServer -Value \"http://secureproxy.segment.domain.com:880\"\nSet-ItemProperty -Path $reg -Name ProxyEnable -Value 1\nSet-ItemProperty -Path $reg -Name ProxyOverride -Value \"*domain.com;231.92.*'10.*;169.254.169.254;\u003clocal\u003e\"\n\n# download the puppet agent from local bucket and install\nCopy-S3Object -BucketName $installer_bucket -Key $installer -LocalFile $env:TEMP\\$installer\n\n# msiexec /qn /norestart /i puppet-agent-\u003cVERSION\u003e-x64.msi PUPPET_MASTER_SERVER=puppet.example.com\n(Start-Process -FilePath \"msiexec.exe\" -ArgumentList \"/qn /norestart /i $env:TEMP\\$installer PUPPET_MASTER_SERVER=$puppet_master\" -Wait -Passthru).ExitCode\n\n\n# Custom User-data\n\n\n\nRename-Computer -NewName $hostname -Force -Restart\n\u003c/powershell\u003e\n"
                }
            },
            "resources": {},
            "depends_on": []
        },
        {
            "path": [
                "root",
                "XYZ_PUPXYZA1010_user_data"
            ],
            "outputs": {
                "user_data": {
                    "sensitive": false,
                    "type": "string",
                    "value": "#!/bin/bash\n\n# Configure the web-proxy\necho \"proxy=http://secureproxy.segment.domain.com:880\" \u003e\u003e /etc/yum.conf\n\n\n# Set the hostname\nhostnamectl set-hostname PUPXYZA1010\necho \"PUPXYZA1010\" \u003e /etc/hostname\necho \"127.0.0.1 PUPXYZA1010 localhost.localdomain localhost\" \u003e /etc/hosts\necho \"\nNETWORKING=yes\nNOZEROCONF=yes\nNETWORKING_IPV6=no\nHOSTNAME=PUPXYZA1010\" \u003e /etc/sysconfig/network\necho \"preserve_hostname: true\" \u003e\u003e /etc/cloud/cloud.cfg\n\n\n# Update Packages\nyum update -y\n\n\n# Install Puppet\ncurl -k https://acme-puppet.segment.domain.com:8080/packages/current/install.bash | bash\n\n\n# Custom User Data\n\n"
                }
            },
            "resources": {},
            "depends_on": []
        },
        {
            "path": [
                "root",
                "XYZ_PUPXYZA1011_user_data"
            ],
            "outputs": {
                "user_data": {
                    "sensitive": false,
                    "type": "string",
                    "value": "#!/bin/bash\n\n# Configure the web-proxy\necho \"proxy=http://secureproxy.segment.domain.com:880\" \u003e\u003e /etc/yum.conf\n\n\n# Set the hostname\nhostnamectl set-hostname PUPXYZA1011\necho \"PUPXYZA1011\" \u003e /etc/hostname\necho \"127.0.0.1 PUPXYZA1011 localhost.localdomain localhost\" \u003e /etc/hosts\necho \"\nNETWORKING=yes\nNOZEROCONF=yes\nNETWORKING_IPV6=no\nHOSTNAME=PUPXYZA1011\" \u003e /etc/sysconfig/network\necho \"preserve_hostname: true\" \u003e\u003e /etc/cloud/cloud.cfg\n\n\n# Update Packages\nyum update -y\n\n\n# Install Puppet\ncurl -k https://acme-puppet.segment.domain.com:8080/packages/current/install.bash | bash\n\n\n# Custom User Data\n\n"
                }
            },
            "resources": {},
            "depends_on": []
        },
        {
            "path": [
                "root",
                "XYZ_PUPXYZA1012_user_data"
            ],
            "outputs": {
                "user_data": {
                    "sensitive": false,
                    "type": "string",
                    "value": "#!/bin/bash\n\n# Configure the web-proxy\necho \"proxy=http://secureproxy.segment.domain.com:880\" \u003e\u003e /etc/yum.conf\n\n\n# Set the hostname\nhostnamectl set-hostname PUPXYZA1012\necho \"PUPXYZA1012\" \u003e /etc/hostname\necho \"127.0.0.1 PUPXYZA1012 localhost.localdomain localhost\" \u003e /etc/hosts\necho \"\nNETWORKING=yes\nNOZEROCONF=yes\nNETWORKING_IPV6=no\nHOSTNAME=PUPXYZA1012\" \u003e /etc/sysconfig/network\necho \"preserve_hostname: true\" \u003e\u003e /etc/cloud/cloud.cfg\n\n\n# Update Packages\nyum update -y\n\n\n# Install Puppet\ncurl -k https://acme-puppet.segment.domain.com:8080/packages/current/install.bash | bash\n\n\n# Custom User Data\n\n"
                }
            },
            "resources": {},
            "depends_on": []
        },
        {
            "path": [
                "root",
                "XYZ_PMDXYZA1000_user_data"
            ],
            "outputs": {
                "linux": {
                    "sensitive": false,
                    "type": "string",
                    "value": "#!/bin/bash\n\n# Configure the web-proxy\necho \"proxy=http://secureproxy.segment.domain.com:880\" \u003e\u003e /etc/yum.conf\n\n\n# Set the hostname\nhostnamectl set-hostname PMDXYZA1000\necho \"PMDXYZA1000\" \u003e /etc/hostname\necho \"127.0.0.1 PMDXYZA1000 localhost.localdomain localhost\" \u003e /etc/hosts\necho \"\nNETWORKING=yes\nNOZEROCONF=yes\nNETWORKING_IPV6=no\nHOSTNAME=PMDXYZA1000\" \u003e /etc/sysconfig/network\necho \"preserve_hostname: true\" \u003e\u003e /etc/cloud/cloud.cfg\n\n\n# Update Packages\nyum update -y\n\n\n# Install Puppet\ncurl -k https://acme-puppet.segment.domain.com:8080/packages/current/install.bash | bash\n\n\n# Custom User Data\n\n"
                },
                "windows": {
                    "sensitive": false,
                    "type": "string",
                    "value": "\u003cpowershell\u003e\n\nSet-ExecutionPolicy -executionpolicy remotesigned -force\nImport-Module AWSPowershell\n\n$hostname = \"PMDXYZA1000\"\n$installer = \"puppet-agent-1.5.2-x64.msi\"\n$installer_bucket = \"myproject-acme-software-media-share\"\n$puppet_master = \"acme-puppet.segment.domain.com\"\n\nfunction getIdDocVal($key, $instIdDoc=\"\") {\n    if ($instIdDoc -eq \"\") {\n        $instIdDoc = getEc2Metadata('dynamic/instance-identity/document') | ConvertFrom-Json\n    }\n\n    if($instIdDoc.PSObject.Properties.Match($key).Count) {\n        return $instIdDoc | Select -ExpandProperty $key\n    }\n}\n\nfunction getEc2Metadata($path) {\n    $url = \"http://169.254.169.254/latest/$path\"\n    try {\n        $metadata = (Invoke-WebRequest -Uri $url -TimeoutSec 0)\n\n        if ($?) {\n            return $metadata\n        } else {\n            log \"Failed to get EC2 Metadata for $path\" red\n        }\n    } catch {\n        log \"Failed to get EC2 Metadata for $path\" red\n        Break\n    }\n}\n\nfunction getInstanceId() {\n    return (getEc2Metadata('meta-data/instance-id')).Content\n}\n\nfunction setHostname($hostname) {\n    if (([System.Net.Dns]::GetHostName()) -ne $hostname) {\n        log \"Setting hostname; current host $([System.Net.Dns]::GetHostName()) does not match $hostname\"\n        Rename-Computer -NewName $hostname -Force -Restart\n    }\n}\n\n# Set up the web proxy for KO\n\n$reg = \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\"\n\nSet-ItemProperty -Path $reg -Name ProxyServer -Value \"http://secureproxy.segment.domain.com:880\"\nSet-ItemProperty -Path $reg -Name ProxyEnable -Value 1\nSet-ItemProperty -Path $reg -Name ProxyOverride -Value \"*domain.com;231.92.*'10.*;169.254.169.254;\u003clocal\u003e\"\n\n# download the puppet agent from local bucket and install\nCopy-S3Object -BucketName $installer_bucket -Key $installer -LocalFile $env:TEMP\\$installer\n\n# msiexec /qn /norestart /i puppet-agent-\u003cVERSION\u003e-x64.msi PUPPET_MASTER_SERVER=puppet.example.com\n(Start-Process -FilePath \"msiexec.exe\" -ArgumentList \"/qn /norestart /i $env:TEMP\\$installer PUPPET_MASTER_SERVER=$puppet_master\" -Wait -Passthru).ExitCode\n\n\n# Custom User-data\n\n\n\nRename-Computer -NewName $hostname -Force -Restart\n\u003c/powershell\u003e\n"
                }
            },
            "resources": {
                "data.template_file.linux": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "5f892075ce9bc68580e0dd711036300c22094deb1a2912a1d9a241a21b0fbf99",
                        "attributes": {
                            "id": "5f892075ce9bc68580e0dd711036300c22094deb1a2912a1d9a241a21b0fbf99",
                            "rendered": "#!/bin/bash\n\n# Configure the web-proxy\necho \"proxy=http://secureproxy.segment.domain.com:880\" \u003e\u003e /etc/yum.conf\n\n\n# Set the hostname\nhostnamectl set-hostname PMDXYZA1000\necho \"PMDXYZA1000\" \u003e /etc/hostname\necho \"127.0.0.1 PMDXYZA1000 localhost.localdomain localhost\" \u003e /etc/hosts\necho \"\nNETWORKING=yes\nNOZEROCONF=yes\nNETWORKING_IPV6=no\nHOSTNAME=PMDXYZA1000\" \u003e /etc/sysconfig/network\necho \"preserve_hostname: true\" \u003e\u003e /etc/cloud/cloud.cfg\n\n\n# Update Packages\nyum update -y\n\n\n# Install Puppet\ncurl -k https://acme-puppet.segment.domain.com:8080/packages/current/install.bash | bash\n\n\n# Custom User Data\n\n",
                            "template": "#!/bin/bash\n\n# Configure the web-proxy\necho \"proxy=${proxy_url}\" \u003e\u003e /etc/yum.conf\n\n\n# Set the hostname\nhostnamectl set-hostname ${hostname}\necho \"${hostname}\" \u003e /etc/hostname\necho \"127.0.0.1 ${hostname} localhost.localdomain localhost\" \u003e /etc/hosts\necho \"\nNETWORKING=yes\nNOZEROCONF=yes\nNETWORKING_IPV6=no\nHOSTNAME=${hostname}\" \u003e /etc/sysconfig/network\necho \"preserve_hostname: true\" \u003e\u003e /etc/cloud/cloud.cfg\n\n\n# Update Packages\nyum update -y\n\n\n# Install Puppet\ncurl -k https://${puppet_master_domain}:8080/packages/current/install.bash | bash\n\n\n# Custom User Data\n${user_data}\n",
                            "vars.%": "4",
                            "vars.hostname": "PMDXYZA1000",
                            "vars.proxy_url": "http://secureproxy.segment.domain.com:880",
                            "vars.puppet_master_domain": "acme-puppet.segment.domain.com",
                            "vars.user_data": ""
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                },
                "data.template_file.windows": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "3dc2248584a66f10944e0fff8e8e306f43a53b5196f3079cba912bbd2ec185be",
                        "attributes": {
                            "id": "3dc2248584a66f10944e0fff8e8e306f43a53b5196f3079cba912bbd2ec185be",
                            "rendered": "\u003cpowershell\u003e\n\nSet-ExecutionPolicy -executionpolicy remotesigned -force\nImport-Module AWSPowershell\n\n$hostname = \"PMDXYZA1000\"\n$installer = \"puppet-agent-1.5.2-x64.msi\"\n$installer_bucket = \"myproject-acme-software-media-share\"\n$puppet_master = \"acme-puppet.segment.domain.com\"\n\nfunction getIdDocVal($key, $instIdDoc=\"\") {\n    if ($instIdDoc -eq \"\") {\n        $instIdDoc = getEc2Metadata('dynamic/instance-identity/document') | ConvertFrom-Json\n    }\n\n    if($instIdDoc.PSObject.Properties.Match($key).Count) {\n        return $instIdDoc | Select -ExpandProperty $key\n    }\n}\n\nfunction getEc2Metadata($path) {\n    $url = \"http://169.254.169.254/latest/$path\"\n    try {\n        $metadata = (Invoke-WebRequest -Uri $url -TimeoutSec 0)\n\n        if ($?) {\n            return $metadata\n        } else {\n            log \"Failed to get EC2 Metadata for $path\" red\n        }\n    } catch {\n        log \"Failed to get EC2 Metadata for $path\" red\n        Break\n    }\n}\n\nfunction getInstanceId() {\n    return (getEc2Metadata('meta-data/instance-id')).Content\n}\n\nfunction setHostname($hostname) {\n    if (([System.Net.Dns]::GetHostName()) -ne $hostname) {\n        log \"Setting hostname; current host $([System.Net.Dns]::GetHostName()) does not match $hostname\"\n        Rename-Computer -NewName $hostname -Force -Restart\n    }\n}\n\n# Set up the web proxy for KO\n\n$reg = \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\"\n\nSet-ItemProperty -Path $reg -Name ProxyServer -Value \"http://secureproxy.segment.domain.com:880\"\nSet-ItemProperty -Path $reg -Name ProxyEnable -Value 1\nSet-ItemProperty -Path $reg -Name ProxyOverride -Value \"*domain.com;231.92.*'10.*;169.254.169.254;\u003clocal\u003e\"\n\n# download the puppet agent from local bucket and install\nCopy-S3Object -BucketName $installer_bucket -Key $installer -LocalFile $env:TEMP\\$installer\n\n# msiexec /qn /norestart /i puppet-agent-\u003cVERSION\u003e-x64.msi PUPPET_MASTER_SERVER=puppet.example.com\n(Start-Process -FilePath \"msiexec.exe\" -ArgumentList \"/qn /norestart /i $env:TEMP\\$installer PUPPET_MASTER_SERVER=$puppet_master\" -Wait -Passthru).ExitCode\n\n\n# Custom User-data\n\n\n\nRename-Computer -NewName $hostname -Force -Restart\n\u003c/powershell\u003e\n",
                            "template": "\u003cpowershell\u003e\n\nSet-ExecutionPolicy -executionpolicy remotesigned -force\nImport-Module AWSPowershell\n\n$hostname = \"${hostname}\"\n$installer = \"${installer}\"\n$installer_bucket = \"${installer_bucket}\"\n$puppet_master = \"${puppet_master_domain}\"\n\nfunction getIdDocVal($key, $instIdDoc=\"\") {\n    if ($instIdDoc -eq \"\") {\n        $instIdDoc = getEc2Metadata('dynamic/instance-identity/document') | ConvertFrom-Json\n    }\n\n    if($instIdDoc.PSObject.Properties.Match($key).Count) {\n        return $instIdDoc | Select -ExpandProperty $key\n    }\n}\n\nfunction getEc2Metadata($path) {\n    $url = \"http://169.254.169.254/latest/$path\"\n    try {\n        $metadata = (Invoke-WebRequest -Uri $url -TimeoutSec 0)\n\n        if ($?) {\n            return $metadata\n        } else {\n            log \"Failed to get EC2 Metadata for $path\" red\n        }\n    } catch {\n        log \"Failed to get EC2 Metadata for $path\" red\n        Break\n    }\n}\n\nfunction getInstanceId() {\n    return (getEc2Metadata('meta-data/instance-id')).Content\n}\n\nfunction setHostname($hostname) {\n    if (([System.Net.Dns]::GetHostName()) -ne $hostname) {\n        log \"Setting hostname; current host $([System.Net.Dns]::GetHostName()) does not match $hostname\"\n        Rename-Computer -NewName $hostname -Force -Restart\n    }\n}\n\n# Set up the web proxy for KO\n\n$reg = \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\"\n\nSet-ItemProperty -Path $reg -Name ProxyServer -Value \"${proxy_url}\"\nSet-ItemProperty -Path $reg -Name ProxyEnable -Value 1\nSet-ItemProperty -Path $reg -Name ProxyOverride -Value \"${proxy_override}\"\n\n# download the puppet agent from local bucket and install\nCopy-S3Object -BucketName $installer_bucket -Key $installer -LocalFile $env:TEMP\\$installer\n\n# msiexec /qn /norestart /i puppet-agent-\u003cVERSION\u003e-x64.msi PUPPET_MASTER_SERVER=puppet.example.com\n(Start-Process -FilePath \"msiexec.exe\" -ArgumentList \"/qn /norestart /i $env:TEMP\\$installer PUPPET_MASTER_SERVER=$puppet_master\" -Wait -Passthru).ExitCode\n\n\n# Custom User-data\n${user_data}\n\n\nRename-Computer -NewName $hostname -Force -Restart\n\u003c/powershell\u003e\n",
                            "vars.%": "7",
                            "vars.hostname": "PMDXYZA1000",
                            "vars.installer": "puppet-agent-1.5.2-x64.msi",
                            "vars.installer_bucket": "myproject-acme-software-media-share",
                            "vars.proxy_override": "*domain.com;231.92.*'10.*;169.254.169.254;\u003clocal\u003e",
                            "vars.proxy_url": "http://secureproxy.segment.domain.com:880",
                            "vars.puppet_master_domain": "acme-puppet.segment.domain.com",
                            "vars.user_data": ""
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                }
            },
            "depends_on": []
        },
        {
            "path": [
                "root",
                "XYZ_PMDXYZA1001_user_data"
            ],
            "outputs": {
                "linux": {
                    "sensitive": false,
                    "type": "string",
                    "value": "#!/bin/bash\n\n# Configure the web-proxy\necho \"proxy=http://secureproxy.segment.domain.com:880\" \u003e\u003e /etc/yum.conf\n\n\n# Set the hostname\nhostnamectl set-hostname PMDXYZA1001\necho \"PMDXYZA1001\" \u003e /etc/hostname\necho \"127.0.0.1 PMDXYZA1001 localhost.localdomain localhost\" \u003e /etc/hosts\necho \"\nNETWORKING=yes\nNOZEROCONF=yes\nNETWORKING_IPV6=no\nHOSTNAME=PMDXYZA1001\" \u003e /etc/sysconfig/network\necho \"preserve_hostname: true\" \u003e\u003e /etc/cloud/cloud.cfg\n\n\n# Update Packages\nyum update -y\n\n\n# Install Puppet\ncurl -k https://acme-puppet.segment.domain.com:8080/packages/current/install.bash | bash\n\n\n# Custom User Data\n\n"
                },
                "windows": {
                    "sensitive": false,
                    "type": "string",
                    "value": "\u003cpowershell\u003e\n\nSet-ExecutionPolicy -executionpolicy remotesigned -force\nImport-Module AWSPowershell\n\n$hostname = \"PMDXYZA1001\"\n$installer = \"puppet-agent-1.5.2-x64.msi\"\n$installer_bucket = \"myproject-acme-software-media-share\"\n$puppet_master = \"acme-puppet.segment.domain.com\"\n\nfunction getIdDocVal($key, $instIdDoc=\"\") {\n    if ($instIdDoc -eq \"\") {\n        $instIdDoc = getEc2Metadata('dynamic/instance-identity/document') | ConvertFrom-Json\n    }\n\n    if($instIdDoc.PSObject.Properties.Match($key).Count) {\n        return $instIdDoc | Select -ExpandProperty $key\n    }\n}\n\nfunction getEc2Metadata($path) {\n    $url = \"http://169.254.169.254/latest/$path\"\n    try {\n        $metadata = (Invoke-WebRequest -Uri $url -TimeoutSec 0)\n\n        if ($?) {\n            return $metadata\n        } else {\n            log \"Failed to get EC2 Metadata for $path\" red\n        }\n    } catch {\n        log \"Failed to get EC2 Metadata for $path\" red\n        Break\n    }\n}\n\nfunction getInstanceId() {\n    return (getEc2Metadata('meta-data/instance-id')).Content\n}\n\nfunction setHostname($hostname) {\n    if (([System.Net.Dns]::GetHostName()) -ne $hostname) {\n        log \"Setting hostname; current host $([System.Net.Dns]::GetHostName()) does not match $hostname\"\n        Rename-Computer -NewName $hostname -Force -Restart\n    }\n}\n\n# Set up the web proxy for KO\n\n$reg = \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\"\n\nSet-ItemProperty -Path $reg -Name ProxyServer -Value \"http://secureproxy.segment.domain.com:880\"\nSet-ItemProperty -Path $reg -Name ProxyEnable -Value 1\nSet-ItemProperty -Path $reg -Name ProxyOverride -Value \"*domain.com;231.92.*'10.*;169.254.169.254;\u003clocal\u003e\"\n\n# download the puppet agent from local bucket and install\nCopy-S3Object -BucketName $installer_bucket -Key $installer -LocalFile $env:TEMP\\$installer\n\n# msiexec /qn /norestart /i puppet-agent-\u003cVERSION\u003e-x64.msi PUPPET_MASTER_SERVER=puppet.example.com\n(Start-Process -FilePath \"msiexec.exe\" -ArgumentList \"/qn /norestart /i $env:TEMP\\$installer PUPPET_MASTER_SERVER=$puppet_master\" -Wait -Passthru).ExitCode\n\n\n# Custom User-data\n\n\n\nRename-Computer -NewName $hostname -Force -Restart\n\u003c/powershell\u003e\n"
                }
            },
            "resources": {
                "data.template_file.linux": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "67a8e5fd1648ac306269e1e39b861cb0a3256a50b10e6d70842a739b64fc8c39",
                        "attributes": {
                            "id": "67a8e5fd1648ac306269e1e39b861cb0a3256a50b10e6d70842a739b64fc8c39",
                            "rendered": "#!/bin/bash\n\n# Configure the web-proxy\necho \"proxy=http://secureproxy.segment.domain.com:880\" \u003e\u003e /etc/yum.conf\n\n\n# Set the hostname\nhostnamectl set-hostname PMDXYZA1001\necho \"PMDXYZA1001\" \u003e /etc/hostname\necho \"127.0.0.1 PMDXYZA1001 localhost.localdomain localhost\" \u003e /etc/hosts\necho \"\nNETWORKING=yes\nNOZEROCONF=yes\nNETWORKING_IPV6=no\nHOSTNAME=PMDXYZA1001\" \u003e /etc/sysconfig/network\necho \"preserve_hostname: true\" \u003e\u003e /etc/cloud/cloud.cfg\n\n\n# Update Packages\nyum update -y\n\n\n# Install Puppet\ncurl -k https://acme-puppet.segment.domain.com:8080/packages/current/install.bash | bash\n\n\n# Custom User Data\n\n",
                            "template": "#!/bin/bash\n\n# Configure the web-proxy\necho \"proxy=${proxy_url}\" \u003e\u003e /etc/yum.conf\n\n\n# Set the hostname\nhostnamectl set-hostname ${hostname}\necho \"${hostname}\" \u003e /etc/hostname\necho \"127.0.0.1 ${hostname} localhost.localdomain localhost\" \u003e /etc/hosts\necho \"\nNETWORKING=yes\nNOZEROCONF=yes\nNETWORKING_IPV6=no\nHOSTNAME=${hostname}\" \u003e /etc/sysconfig/network\necho \"preserve_hostname: true\" \u003e\u003e /etc/cloud/cloud.cfg\n\n\n# Update Packages\nyum update -y\n\n\n# Install Puppet\ncurl -k https://${puppet_master_domain}:8080/packages/current/install.bash | bash\n\n\n# Custom User Data\n${user_data}\n",
                            "vars.%": "4",
                            "vars.hostname": "PMDXYZA1001",
                            "vars.proxy_url": "http://secureproxy.segment.domain.com:880",
                            "vars.puppet_master_domain": "acme-puppet.segment.domain.com",
                            "vars.user_data": ""
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                },
                "data.template_file.windows": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "4931cc45f0d0b47cf3041614406b3e914b1436d5ee3fbe22dca49aee58403145",
                        "attributes": {
                            "id": "4931cc45f0d0b47cf3041614406b3e914b1436d5ee3fbe22dca49aee58403145",
                            "rendered": "\u003cpowershell\u003e\n\nSet-ExecutionPolicy -executionpolicy remotesigned -force\nImport-Module AWSPowershell\n\n$hostname = \"PMDXYZA1001\"\n$installer = \"puppet-agent-1.5.2-x64.msi\"\n$installer_bucket = \"myproject-acme-software-media-share\"\n$puppet_master = \"acme-puppet.segment.domain.com\"\n\nfunction getIdDocVal($key, $instIdDoc=\"\") {\n    if ($instIdDoc -eq \"\") {\n        $instIdDoc = getEc2Metadata('dynamic/instance-identity/document') | ConvertFrom-Json\n    }\n\n    if($instIdDoc.PSObject.Properties.Match($key).Count) {\n        return $instIdDoc | Select -ExpandProperty $key\n    }\n}\n\nfunction getEc2Metadata($path) {\n    $url = \"http://169.254.169.254/latest/$path\"\n    try {\n        $metadata = (Invoke-WebRequest -Uri $url -TimeoutSec 0)\n\n        if ($?) {\n            return $metadata\n        } else {\n            log \"Failed to get EC2 Metadata for $path\" red\n        }\n    } catch {\n        log \"Failed to get EC2 Metadata for $path\" red\n        Break\n    }\n}\n\nfunction getInstanceId() {\n    return (getEc2Metadata('meta-data/instance-id')).Content\n}\n\nfunction setHostname($hostname) {\n    if (([System.Net.Dns]::GetHostName()) -ne $hostname) {\n        log \"Setting hostname; current host $([System.Net.Dns]::GetHostName()) does not match $hostname\"\n        Rename-Computer -NewName $hostname -Force -Restart\n    }\n}\n\n# Set up the web proxy for KO\n\n$reg = \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\"\n\nSet-ItemProperty -Path $reg -Name ProxyServer -Value \"http://secureproxy.segment.domain.com:880\"\nSet-ItemProperty -Path $reg -Name ProxyEnable -Value 1\nSet-ItemProperty -Path $reg -Name ProxyOverride -Value \"*domain.com;231.92.*'10.*;169.254.169.254;\u003clocal\u003e\"\n\n# download the puppet agent from local bucket and install\nCopy-S3Object -BucketName $installer_bucket -Key $installer -LocalFile $env:TEMP\\$installer\n\n# msiexec /qn /norestart /i puppet-agent-\u003cVERSION\u003e-x64.msi PUPPET_MASTER_SERVER=puppet.example.com\n(Start-Process -FilePath \"msiexec.exe\" -ArgumentList \"/qn /norestart /i $env:TEMP\\$installer PUPPET_MASTER_SERVER=$puppet_master\" -Wait -Passthru).ExitCode\n\n\n# Custom User-data\n\n\n\nRename-Computer -NewName $hostname -Force -Restart\n\u003c/powershell\u003e\n",
                            "template": "\u003cpowershell\u003e\n\nSet-ExecutionPolicy -executionpolicy remotesigned -force\nImport-Module AWSPowershell\n\n$hostname = \"${hostname}\"\n$installer = \"${installer}\"\n$installer_bucket = \"${installer_bucket}\"\n$puppet_master = \"${puppet_master_domain}\"\n\nfunction getIdDocVal($key, $instIdDoc=\"\") {\n    if ($instIdDoc -eq \"\") {\n        $instIdDoc = getEc2Metadata('dynamic/instance-identity/document') | ConvertFrom-Json\n    }\n\n    if($instIdDoc.PSObject.Properties.Match($key).Count) {\n        return $instIdDoc | Select -ExpandProperty $key\n    }\n}\n\nfunction getEc2Metadata($path) {\n    $url = \"http://169.254.169.254/latest/$path\"\n    try {\n        $metadata = (Invoke-WebRequest -Uri $url -TimeoutSec 0)\n\n        if ($?) {\n            return $metadata\n        } else {\n            log \"Failed to get EC2 Metadata for $path\" red\n        }\n    } catch {\n        log \"Failed to get EC2 Metadata for $path\" red\n        Break\n    }\n}\n\nfunction getInstanceId() {\n    return (getEc2Metadata('meta-data/instance-id')).Content\n}\n\nfunction setHostname($hostname) {\n    if (([System.Net.Dns]::GetHostName()) -ne $hostname) {\n        log \"Setting hostname; current host $([System.Net.Dns]::GetHostName()) does not match $hostname\"\n        Rename-Computer -NewName $hostname -Force -Restart\n    }\n}\n\n# Set up the web proxy for KO\n\n$reg = \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\"\n\nSet-ItemProperty -Path $reg -Name ProxyServer -Value \"${proxy_url}\"\nSet-ItemProperty -Path $reg -Name ProxyEnable -Value 1\nSet-ItemProperty -Path $reg -Name ProxyOverride -Value \"${proxy_override}\"\n\n# download the puppet agent from local bucket and install\nCopy-S3Object -BucketName $installer_bucket -Key $installer -LocalFile $env:TEMP\\$installer\n\n# msiexec /qn /norestart /i puppet-agent-\u003cVERSION\u003e-x64.msi PUPPET_MASTER_SERVER=puppet.example.com\n(Start-Process -FilePath \"msiexec.exe\" -ArgumentList \"/qn /norestart /i $env:TEMP\\$installer PUPPET_MASTER_SERVER=$puppet_master\" -Wait -Passthru).ExitCode\n\n\n# Custom User-data\n${user_data}\n\n\nRename-Computer -NewName $hostname -Force -Restart\n\u003c/powershell\u003e\n",
                            "vars.%": "7",
                            "vars.hostname": "PMDXYZA1001",
                            "vars.installer": "puppet-agent-1.5.2-x64.msi",
                            "vars.installer_bucket": "myproject-acme-software-media-share",
                            "vars.proxy_override": "*domain.com;231.92.*'10.*;169.254.169.254;\u003clocal\u003e",
                            "vars.proxy_url": "http://secureproxy.segment.domain.com:880",
                            "vars.puppet_master_domain": "acme-puppet.segment.domain.com",
                            "vars.user_data": ""
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                }
            },
            "depends_on": []
        },
        {
            "path": [
                "root",
                "XYZ_PMDXYZA1003_user_data"
            ],
            "outputs": {
                "linux": {
                    "sensitive": false,
                    "type": "string",
                    "value": "#!/bin/bash\n\n# Configure the web-proxy\necho \"proxy=http://secureproxy.segment.domain.com:880\" \u003e\u003e /etc/yum.conf\n\n\n# Set the hostname\nhostnamectl set-hostname PMDXYZA1003\necho \"PMDXYZA1003\" \u003e /etc/hostname\necho \"127.0.0.1 PMDXYZA1003 localhost.localdomain localhost\" \u003e /etc/hosts\necho \"\nNETWORKING=yes\nNOZEROCONF=yes\nNETWORKING_IPV6=no\nHOSTNAME=PMDXYZA1003\" \u003e /etc/sysconfig/network\necho \"preserve_hostname: true\" \u003e\u003e /etc/cloud/cloud.cfg\n\n\n# Update Packages\nyum update -y\n\n\n# Install Puppet\ncurl -k https://acme-puppet.segment.domain.com:8080/packages/current/install.bash | bash\n\n\n# Custom User Data\n\n"
                },
                "windows": {
                    "sensitive": false,
                    "type": "string",
                    "value": "\u003cpowershell\u003e\n\nSet-ExecutionPolicy -executionpolicy remotesigned -force\nImport-Module AWSPowershell\n\n$hostname = \"PMDXYZA1003\"\n$installer = \"puppet-agent-1.5.2-x64.msi\"\n$installer_bucket = \"myproject-acme-software-media-share\"\n$puppet_master = \"acme-puppet.segment.domain.com\"\n\nfunction getIdDocVal($key, $instIdDoc=\"\") {\n    if ($instIdDoc -eq \"\") {\n        $instIdDoc = getEc2Metadata('dynamic/instance-identity/document') | ConvertFrom-Json\n    }\n\n    if($instIdDoc.PSObject.Properties.Match($key).Count) {\n        return $instIdDoc | Select -ExpandProperty $key\n    }\n}\n\nfunction getEc2Metadata($path) {\n    $url = \"http://169.254.169.254/latest/$path\"\n    try {\n        $metadata = (Invoke-WebRequest -Uri $url -TimeoutSec 0)\n\n        if ($?) {\n            return $metadata\n        } else {\n            log \"Failed to get EC2 Metadata for $path\" red\n        }\n    } catch {\n        log \"Failed to get EC2 Metadata for $path\" red\n        Break\n    }\n}\n\nfunction getInstanceId() {\n    return (getEc2Metadata('meta-data/instance-id')).Content\n}\n\nfunction setHostname($hostname) {\n    if (([System.Net.Dns]::GetHostName()) -ne $hostname) {\n        log \"Setting hostname; current host $([System.Net.Dns]::GetHostName()) does not match $hostname\"\n        Rename-Computer -NewName $hostname -Force -Restart\n    }\n}\n\n# Set up the web proxy for KO\n\n$reg = \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\"\n\nSet-ItemProperty -Path $reg -Name ProxyServer -Value \"http://secureproxy.segment.domain.com:880\"\nSet-ItemProperty -Path $reg -Name ProxyEnable -Value 1\nSet-ItemProperty -Path $reg -Name ProxyOverride -Value \"*domain.com;231.92.*'10.*;169.254.169.254;\u003clocal\u003e\"\n\n# download the puppet agent from local bucket and install\nCopy-S3Object -BucketName $installer_bucket -Key $installer -LocalFile $env:TEMP\\$installer\n\n# msiexec /qn /norestart /i puppet-agent-\u003cVERSION\u003e-x64.msi PUPPET_MASTER_SERVER=puppet.example.com\n(Start-Process -FilePath \"msiexec.exe\" -ArgumentList \"/qn /norestart /i $env:TEMP\\$installer PUPPET_MASTER_SERVER=$puppet_master\" -Wait -Passthru).ExitCode\n\n\n# Custom User-data\n\n\n\nRename-Computer -NewName $hostname -Force -Restart\n\u003c/powershell\u003e\n"
                }
            },
            "resources": {
                "data.template_file.linux": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "f38f8fa00ae13127e0153d0edbb888727b3976f25f87295b5d56a6f561072821",
                        "attributes": {
                            "id": "f38f8fa00ae13127e0153d0edbb888727b3976f25f87295b5d56a6f561072821",
                            "rendered": "#!/bin/bash\n\n# Configure the web-proxy\necho \"proxy=http://secureproxy.segment.domain.com:880\" \u003e\u003e /etc/yum.conf\n\n\n# Set the hostname\nhostnamectl set-hostname PMDXYZA1003\necho \"PMDXYZA1003\" \u003e /etc/hostname\necho \"127.0.0.1 PMDXYZA1003 localhost.localdomain localhost\" \u003e /etc/hosts\necho \"\nNETWORKING=yes\nNOZEROCONF=yes\nNETWORKING_IPV6=no\nHOSTNAME=PMDXYZA1003\" \u003e /etc/sysconfig/network\necho \"preserve_hostname: true\" \u003e\u003e /etc/cloud/cloud.cfg\n\n\n# Update Packages\nyum update -y\n\n\n# Install Puppet\ncurl -k https://acme-puppet.segment.domain.com:8080/packages/current/install.bash | bash\n\n\n# Custom User Data\n\n",
                            "template": "#!/bin/bash\n\n# Configure the web-proxy\necho \"proxy=${proxy_url}\" \u003e\u003e /etc/yum.conf\n\n\n# Set the hostname\nhostnamectl set-hostname ${hostname}\necho \"${hostname}\" \u003e /etc/hostname\necho \"127.0.0.1 ${hostname} localhost.localdomain localhost\" \u003e /etc/hosts\necho \"\nNETWORKING=yes\nNOZEROCONF=yes\nNETWORKING_IPV6=no\nHOSTNAME=${hostname}\" \u003e /etc/sysconfig/network\necho \"preserve_hostname: true\" \u003e\u003e /etc/cloud/cloud.cfg\n\n\n# Update Packages\nyum update -y\n\n\n# Install Puppet\ncurl -k https://${puppet_master_domain}:8080/packages/current/install.bash | bash\n\n\n# Custom User Data\n${user_data}\n",
                            "vars.%": "4",
                            "vars.hostname": "PMDXYZA1003",
                            "vars.proxy_url": "http://secureproxy.segment.domain.com:880",
                            "vars.puppet_master_domain": "acme-puppet.segment.domain.com",
                            "vars.user_data": ""
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                },
                "data.template_file.windows": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "e228c6c8de2bbccae52a36e3b585ef36ae59c353c9e5eb2ded48cec40bb44df6",
                        "attributes": {
                            "id": "e228c6c8de2bbccae52a36e3b585ef36ae59c353c9e5eb2ded48cec40bb44df6",
                            "rendered": "\u003cpowershell\u003e\n\nSet-ExecutionPolicy -executionpolicy remotesigned -force\nImport-Module AWSPowershell\n\n$hostname = \"PMDXYZA1003\"\n$installer = \"puppet-agent-1.5.2-x64.msi\"\n$installer_bucket = \"myproject-acme-software-media-share\"\n$puppet_master = \"acme-puppet.segment.domain.com\"\n\nfunction getIdDocVal($key, $instIdDoc=\"\") {\n    if ($instIdDoc -eq \"\") {\n        $instIdDoc = getEc2Metadata('dynamic/instance-identity/document') | ConvertFrom-Json\n    }\n\n    if($instIdDoc.PSObject.Properties.Match($key).Count) {\n        return $instIdDoc | Select -ExpandProperty $key\n    }\n}\n\nfunction getEc2Metadata($path) {\n    $url = \"http://169.254.169.254/latest/$path\"\n    try {\n        $metadata = (Invoke-WebRequest -Uri $url -TimeoutSec 0)\n\n        if ($?) {\n            return $metadata\n        } else {\n            log \"Failed to get EC2 Metadata for $path\" red\n        }\n    } catch {\n        log \"Failed to get EC2 Metadata for $path\" red\n        Break\n    }\n}\n\nfunction getInstanceId() {\n    return (getEc2Metadata('meta-data/instance-id')).Content\n}\n\nfunction setHostname($hostname) {\n    if (([System.Net.Dns]::GetHostName()) -ne $hostname) {\n        log \"Setting hostname; current host $([System.Net.Dns]::GetHostName()) does not match $hostname\"\n        Rename-Computer -NewName $hostname -Force -Restart\n    }\n}\n\n# Set up the web proxy for KO\n\n$reg = \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\"\n\nSet-ItemProperty -Path $reg -Name ProxyServer -Value \"http://secureproxy.segment.domain.com:880\"\nSet-ItemProperty -Path $reg -Name ProxyEnable -Value 1\nSet-ItemProperty -Path $reg -Name ProxyOverride -Value \"*domain.com;231.92.*'10.*;169.254.169.254;\u003clocal\u003e\"\n\n# download the puppet agent from local bucket and install\nCopy-S3Object -BucketName $installer_bucket -Key $installer -LocalFile $env:TEMP\\$installer\n\n# msiexec /qn /norestart /i puppet-agent-\u003cVERSION\u003e-x64.msi PUPPET_MASTER_SERVER=puppet.example.com\n(Start-Process -FilePath \"msiexec.exe\" -ArgumentList \"/qn /norestart /i $env:TEMP\\$installer PUPPET_MASTER_SERVER=$puppet_master\" -Wait -Passthru).ExitCode\n\n\n# Custom User-data\n\n\n\nRename-Computer -NewName $hostname -Force -Restart\n\u003c/powershell\u003e\n",
                            "template": "\u003cpowershell\u003e\n\nSet-ExecutionPolicy -executionpolicy remotesigned -force\nImport-Module AWSPowershell\n\n$hostname = \"${hostname}\"\n$installer = \"${installer}\"\n$installer_bucket = \"${installer_bucket}\"\n$puppet_master = \"${puppet_master_domain}\"\n\nfunction getIdDocVal($key, $instIdDoc=\"\") {\n    if ($instIdDoc -eq \"\") {\n        $instIdDoc = getEc2Metadata('dynamic/instance-identity/document') | ConvertFrom-Json\n    }\n\n    if($instIdDoc.PSObject.Properties.Match($key).Count) {\n        return $instIdDoc | Select -ExpandProperty $key\n    }\n}\n\nfunction getEc2Metadata($path) {\n    $url = \"http://169.254.169.254/latest/$path\"\n    try {\n        $metadata = (Invoke-WebRequest -Uri $url -TimeoutSec 0)\n\n        if ($?) {\n            return $metadata\n        } else {\n            log \"Failed to get EC2 Metadata for $path\" red\n        }\n    } catch {\n        log \"Failed to get EC2 Metadata for $path\" red\n        Break\n    }\n}\n\nfunction getInstanceId() {\n    return (getEc2Metadata('meta-data/instance-id')).Content\n}\n\nfunction setHostname($hostname) {\n    if (([System.Net.Dns]::GetHostName()) -ne $hostname) {\n        log \"Setting hostname; current host $([System.Net.Dns]::GetHostName()) does not match $hostname\"\n        Rename-Computer -NewName $hostname -Force -Restart\n    }\n}\n\n# Set up the web proxy for KO\n\n$reg = \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\"\n\nSet-ItemProperty -Path $reg -Name ProxyServer -Value \"${proxy_url}\"\nSet-ItemProperty -Path $reg -Name ProxyEnable -Value 1\nSet-ItemProperty -Path $reg -Name ProxyOverride -Value \"${proxy_override}\"\n\n# download the puppet agent from local bucket and install\nCopy-S3Object -BucketName $installer_bucket -Key $installer -LocalFile $env:TEMP\\$installer\n\n# msiexec /qn /norestart /i puppet-agent-\u003cVERSION\u003e-x64.msi PUPPET_MASTER_SERVER=puppet.example.com\n(Start-Process -FilePath \"msiexec.exe\" -ArgumentList \"/qn /norestart /i $env:TEMP\\$installer PUPPET_MASTER_SERVER=$puppet_master\" -Wait -Passthru).ExitCode\n\n\n# Custom User-data\n${user_data}\n\n\nRename-Computer -NewName $hostname -Force -Restart\n\u003c/powershell\u003e\n",
                            "vars.%": "7",
                            "vars.hostname": "PMDXYZA1003",
                            "vars.installer": "puppet-agent-1.5.2-x64.msi",
                            "vars.installer_bucket": "myproject-acme-software-media-share",
                            "vars.proxy_override": "*domain.com;231.92.*'10.*;169.254.169.254;\u003clocal\u003e",
                            "vars.proxy_url": "http://secureproxy.segment.domain.com:880",
                            "vars.puppet_master_domain": "acme-puppet.segment.domain.com",
                            "vars.user_data": ""
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                }
            },
            "depends_on": []
        },
        {
            "path": [
                "root",
                "XYZ_PMDXYZA1004_user_data"
            ],
            "outputs": {
                "linux": {
                    "sensitive": false,
                    "type": "string",
                    "value": "#!/bin/bash\n\n# Configure the web-proxy\necho \"proxy=http://secureproxy.segment.domain.com:880\" \u003e\u003e /etc/yum.conf\n\n\n# Set the hostname\nhostnamectl set-hostname PMDXYZA1004\necho \"PMDXYZA1004\" \u003e /etc/hostname\necho \"127.0.0.1 PMDXYZA1004 localhost.localdomain localhost\" \u003e /etc/hosts\necho \"\nNETWORKING=yes\nNOZEROCONF=yes\nNETWORKING_IPV6=no\nHOSTNAME=PMDXYZA1004\" \u003e /etc/sysconfig/network\necho \"preserve_hostname: true\" \u003e\u003e /etc/cloud/cloud.cfg\n\n\n# Update Packages\nyum update -y\n\n\n# Install Puppet\ncurl -k https://acme-puppet.segment.domain.com:8080/packages/current/install.bash | bash\n\n\n# Custom User Data\n\n"
                },
                "windows": {
                    "sensitive": false,
                    "type": "string",
                    "value": "\u003cpowershell\u003e\n\nSet-ExecutionPolicy -executionpolicy remotesigned -force\nImport-Module AWSPowershell\n\n$hostname = \"PMDXYZA1004\"\n$installer = \"puppet-agent-1.5.2-x64.msi\"\n$installer_bucket = \"myproject-acme-software-media-share\"\n$puppet_master = \"acme-puppet.segment.domain.com\"\n\nfunction getIdDocVal($key, $instIdDoc=\"\") {\n    if ($instIdDoc -eq \"\") {\n        $instIdDoc = getEc2Metadata('dynamic/instance-identity/document') | ConvertFrom-Json\n    }\n\n    if($instIdDoc.PSObject.Properties.Match($key).Count) {\n        return $instIdDoc | Select -ExpandProperty $key\n    }\n}\n\nfunction getEc2Metadata($path) {\n    $url = \"http://169.254.169.254/latest/$path\"\n    try {\n        $metadata = (Invoke-WebRequest -Uri $url -TimeoutSec 0)\n\n        if ($?) {\n            return $metadata\n        } else {\n            log \"Failed to get EC2 Metadata for $path\" red\n        }\n    } catch {\n        log \"Failed to get EC2 Metadata for $path\" red\n        Break\n    }\n}\n\nfunction getInstanceId() {\n    return (getEc2Metadata('meta-data/instance-id')).Content\n}\n\nfunction setHostname($hostname) {\n    if (([System.Net.Dns]::GetHostName()) -ne $hostname) {\n        log \"Setting hostname; current host $([System.Net.Dns]::GetHostName()) does not match $hostname\"\n        Rename-Computer -NewName $hostname -Force -Restart\n    }\n}\n\n# Set up the web proxy for KO\n\n$reg = \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\"\n\nSet-ItemProperty -Path $reg -Name ProxyServer -Value \"http://secureproxy.segment.domain.com:880\"\nSet-ItemProperty -Path $reg -Name ProxyEnable -Value 1\nSet-ItemProperty -Path $reg -Name ProxyOverride -Value \"*domain.com;231.92.*'10.*;169.254.169.254;\u003clocal\u003e\"\n\n# download the puppet agent from local bucket and install\nCopy-S3Object -BucketName $installer_bucket -Key $installer -LocalFile $env:TEMP\\$installer\n\n# msiexec /qn /norestart /i puppet-agent-\u003cVERSION\u003e-x64.msi PUPPET_MASTER_SERVER=puppet.example.com\n(Start-Process -FilePath \"msiexec.exe\" -ArgumentList \"/qn /norestart /i $env:TEMP\\$installer PUPPET_MASTER_SERVER=$puppet_master\" -Wait -Passthru).ExitCode\n\n\n# Custom User-data\n\n\n\nRename-Computer -NewName $hostname -Force -Restart\n\u003c/powershell\u003e\n"
                }
            },
            "resources": {
                "data.template_file.linux": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "a6a88a655a253cbfb3085fef843512b807288479a3460dc7be79c95bd1e50a77",
                        "attributes": {
                            "id": "a6a88a655a253cbfb3085fef843512b807288479a3460dc7be79c95bd1e50a77",
                            "rendered": "#!/bin/bash\n\n# Configure the web-proxy\necho \"proxy=http://secureproxy.segment.domain.com:880\" \u003e\u003e /etc/yum.conf\n\n\n# Set the hostname\nhostnamectl set-hostname PMDXYZA1004\necho \"PMDXYZA1004\" \u003e /etc/hostname\necho \"127.0.0.1 PMDXYZA1004 localhost.localdomain localhost\" \u003e /etc/hosts\necho \"\nNETWORKING=yes\nNOZEROCONF=yes\nNETWORKING_IPV6=no\nHOSTNAME=PMDXYZA1004\" \u003e /etc/sysconfig/network\necho \"preserve_hostname: true\" \u003e\u003e /etc/cloud/cloud.cfg\n\n\n# Update Packages\nyum update -y\n\n\n# Install Puppet\ncurl -k https://acme-puppet.segment.domain.com:8080/packages/current/install.bash | bash\n\n\n# Custom User Data\n\n",
                            "template": "#!/bin/bash\n\n# Configure the web-proxy\necho \"proxy=${proxy_url}\" \u003e\u003e /etc/yum.conf\n\n\n# Set the hostname\nhostnamectl set-hostname ${hostname}\necho \"${hostname}\" \u003e /etc/hostname\necho \"127.0.0.1 ${hostname} localhost.localdomain localhost\" \u003e /etc/hosts\necho \"\nNETWORKING=yes\nNOZEROCONF=yes\nNETWORKING_IPV6=no\nHOSTNAME=${hostname}\" \u003e /etc/sysconfig/network\necho \"preserve_hostname: true\" \u003e\u003e /etc/cloud/cloud.cfg\n\n\n# Update Packages\nyum update -y\n\n\n# Install Puppet\ncurl -k https://${puppet_master_domain}:8080/packages/current/install.bash | bash\n\n\n# Custom User Data\n${user_data}\n",
                            "vars.%": "4",
                            "vars.hostname": "PMDXYZA1004",
                            "vars.proxy_url": "http://secureproxy.segment.domain.com:880",
                            "vars.puppet_master_domain": "acme-puppet.segment.domain.com",
                            "vars.user_data": ""
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                },
                "data.template_file.windows": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "ee0097ae9bf5c7c730b25daa1c633c6f424592f51b78cc5f383815b8870f5896",
                        "attributes": {
                            "id": "ee0097ae9bf5c7c730b25daa1c633c6f424592f51b78cc5f383815b8870f5896",
                            "rendered": "\u003cpowershell\u003e\n\nSet-ExecutionPolicy -executionpolicy remotesigned -force\nImport-Module AWSPowershell\n\n$hostname = \"PMDXYZA1004\"\n$installer = \"puppet-agent-1.5.2-x64.msi\"\n$installer_bucket = \"myproject-acme-software-media-share\"\n$puppet_master = \"acme-puppet.segment.domain.com\"\n\nfunction getIdDocVal($key, $instIdDoc=\"\") {\n    if ($instIdDoc -eq \"\") {\n        $instIdDoc = getEc2Metadata('dynamic/instance-identity/document') | ConvertFrom-Json\n    }\n\n    if($instIdDoc.PSObject.Properties.Match($key).Count) {\n        return $instIdDoc | Select -ExpandProperty $key\n    }\n}\n\nfunction getEc2Metadata($path) {\n    $url = \"http://169.254.169.254/latest/$path\"\n    try {\n        $metadata = (Invoke-WebRequest -Uri $url -TimeoutSec 0)\n\n        if ($?) {\n            return $metadata\n        } else {\n            log \"Failed to get EC2 Metadata for $path\" red\n        }\n    } catch {\n        log \"Failed to get EC2 Metadata for $path\" red\n        Break\n    }\n}\n\nfunction getInstanceId() {\n    return (getEc2Metadata('meta-data/instance-id')).Content\n}\n\nfunction setHostname($hostname) {\n    if (([System.Net.Dns]::GetHostName()) -ne $hostname) {\n        log \"Setting hostname; current host $([System.Net.Dns]::GetHostName()) does not match $hostname\"\n        Rename-Computer -NewName $hostname -Force -Restart\n    }\n}\n\n# Set up the web proxy for KO\n\n$reg = \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\"\n\nSet-ItemProperty -Path $reg -Name ProxyServer -Value \"http://secureproxy.segment.domain.com:880\"\nSet-ItemProperty -Path $reg -Name ProxyEnable -Value 1\nSet-ItemProperty -Path $reg -Name ProxyOverride -Value \"*domain.com;231.92.*'10.*;169.254.169.254;\u003clocal\u003e\"\n\n# download the puppet agent from local bucket and install\nCopy-S3Object -BucketName $installer_bucket -Key $installer -LocalFile $env:TEMP\\$installer\n\n# msiexec /qn /norestart /i puppet-agent-\u003cVERSION\u003e-x64.msi PUPPET_MASTER_SERVER=puppet.example.com\n(Start-Process -FilePath \"msiexec.exe\" -ArgumentList \"/qn /norestart /i $env:TEMP\\$installer PUPPET_MASTER_SERVER=$puppet_master\" -Wait -Passthru).ExitCode\n\n\n# Custom User-data\n\n\n\nRename-Computer -NewName $hostname -Force -Restart\n\u003c/powershell\u003e\n",
                            "template": "\u003cpowershell\u003e\n\nSet-ExecutionPolicy -executionpolicy remotesigned -force\nImport-Module AWSPowershell\n\n$hostname = \"${hostname}\"\n$installer = \"${installer}\"\n$installer_bucket = \"${installer_bucket}\"\n$puppet_master = \"${puppet_master_domain}\"\n\nfunction getIdDocVal($key, $instIdDoc=\"\") {\n    if ($instIdDoc -eq \"\") {\n        $instIdDoc = getEc2Metadata('dynamic/instance-identity/document') | ConvertFrom-Json\n    }\n\n    if($instIdDoc.PSObject.Properties.Match($key).Count) {\n        return $instIdDoc | Select -ExpandProperty $key\n    }\n}\n\nfunction getEc2Metadata($path) {\n    $url = \"http://169.254.169.254/latest/$path\"\n    try {\n        $metadata = (Invoke-WebRequest -Uri $url -TimeoutSec 0)\n\n        if ($?) {\n            return $metadata\n        } else {\n            log \"Failed to get EC2 Metadata for $path\" red\n        }\n    } catch {\n        log \"Failed to get EC2 Metadata for $path\" red\n        Break\n    }\n}\n\nfunction getInstanceId() {\n    return (getEc2Metadata('meta-data/instance-id')).Content\n}\n\nfunction setHostname($hostname) {\n    if (([System.Net.Dns]::GetHostName()) -ne $hostname) {\n        log \"Setting hostname; current host $([System.Net.Dns]::GetHostName()) does not match $hostname\"\n        Rename-Computer -NewName $hostname -Force -Restart\n    }\n}\n\n# Set up the web proxy for KO\n\n$reg = \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\"\n\nSet-ItemProperty -Path $reg -Name ProxyServer -Value \"${proxy_url}\"\nSet-ItemProperty -Path $reg -Name ProxyEnable -Value 1\nSet-ItemProperty -Path $reg -Name ProxyOverride -Value \"${proxy_override}\"\n\n# download the puppet agent from local bucket and install\nCopy-S3Object -BucketName $installer_bucket -Key $installer -LocalFile $env:TEMP\\$installer\n\n# msiexec /qn /norestart /i puppet-agent-\u003cVERSION\u003e-x64.msi PUPPET_MASTER_SERVER=puppet.example.com\n(Start-Process -FilePath \"msiexec.exe\" -ArgumentList \"/qn /norestart /i $env:TEMP\\$installer PUPPET_MASTER_SERVER=$puppet_master\" -Wait -Passthru).ExitCode\n\n\n# Custom User-data\n${user_data}\n\n\nRename-Computer -NewName $hostname -Force -Restart\n\u003c/powershell\u003e\n",
                            "vars.%": "7",
                            "vars.hostname": "PMDXYZA1004",
                            "vars.installer": "puppet-agent-1.5.2-x64.msi",
                            "vars.installer_bucket": "myproject-acme-software-media-share",
                            "vars.proxy_override": "*domain.com;231.92.*'10.*;169.254.169.254;\u003clocal\u003e",
                            "vars.proxy_url": "http://secureproxy.segment.domain.com:880",
                            "vars.puppet_master_domain": "acme-puppet.segment.domain.com",
                            "vars.user_data": ""
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                }
            },
            "depends_on": []
        },
        {
            "path": [
                "root",
                "XYZ_PMDXYZA1005_user_data"
            ],
            "outputs": {
                "linux": {
                    "sensitive": false,
                    "type": "string",
                    "value": "#!/bin/bash\n\n# Configure the web-proxy\necho \"proxy=http://secureproxy.segment.domain.com:880\" \u003e\u003e /etc/yum.conf\n\n\n# Set the hostname\nhostnamectl set-hostname PMDXYZA1005\necho \"PMDXYZA1005\" \u003e /etc/hostname\necho \"127.0.0.1 PMDXYZA1005 localhost.localdomain localhost\" \u003e /etc/hosts\necho \"\nNETWORKING=yes\nNOZEROCONF=yes\nNETWORKING_IPV6=no\nHOSTNAME=PMDXYZA1005\" \u003e /etc/sysconfig/network\necho \"preserve_hostname: true\" \u003e\u003e /etc/cloud/cloud.cfg\n\n\n# Update Packages\nyum update -y\n\n\n# Install Puppet\ncurl -k https://acme-puppet.segment.domain.com:8080/packages/current/install.bash | bash\n\n\n# Custom User Data\n\n"
                },
                "windows": {
                    "sensitive": false,
                    "type": "string",
                    "value": "\u003cpowershell\u003e\n\nSet-ExecutionPolicy -executionpolicy remotesigned -force\nImport-Module AWSPowershell\n\n$hostname = \"PMDXYZA1005\"\n$installer = \"puppet-agent-1.5.2-x64.msi\"\n$installer_bucket = \"myproject-acme-software-media-share\"\n$puppet_master = \"acme-puppet.segment.domain.com\"\n\nfunction getIdDocVal($key, $instIdDoc=\"\") {\n    if ($instIdDoc -eq \"\") {\n        $instIdDoc = getEc2Metadata('dynamic/instance-identity/document') | ConvertFrom-Json\n    }\n\n    if($instIdDoc.PSObject.Properties.Match($key).Count) {\n        return $instIdDoc | Select -ExpandProperty $key\n    }\n}\n\nfunction getEc2Metadata($path) {\n    $url = \"http://169.254.169.254/latest/$path\"\n    try {\n        $metadata = (Invoke-WebRequest -Uri $url -TimeoutSec 0)\n\n        if ($?) {\n            return $metadata\n        } else {\n            log \"Failed to get EC2 Metadata for $path\" red\n        }\n    } catch {\n        log \"Failed to get EC2 Metadata for $path\" red\n        Break\n    }\n}\n\nfunction getInstanceId() {\n    return (getEc2Metadata('meta-data/instance-id')).Content\n}\n\nfunction setHostname($hostname) {\n    if (([System.Net.Dns]::GetHostName()) -ne $hostname) {\n        log \"Setting hostname; current host $([System.Net.Dns]::GetHostName()) does not match $hostname\"\n        Rename-Computer -NewName $hostname -Force -Restart\n    }\n}\n\n# Set up the web proxy for KO\n\n$reg = \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\"\n\nSet-ItemProperty -Path $reg -Name ProxyServer -Value \"http://secureproxy.segment.domain.com:880\"\nSet-ItemProperty -Path $reg -Name ProxyEnable -Value 1\nSet-ItemProperty -Path $reg -Name ProxyOverride -Value \"*domain.com;231.92.*'10.*;169.254.169.254;\u003clocal\u003e\"\n\n# download the puppet agent from local bucket and install\nCopy-S3Object -BucketName $installer_bucket -Key $installer -LocalFile $env:TEMP\\$installer\n\n# msiexec /qn /norestart /i puppet-agent-\u003cVERSION\u003e-x64.msi PUPPET_MASTER_SERVER=puppet.example.com\n(Start-Process -FilePath \"msiexec.exe\" -ArgumentList \"/qn /norestart /i $env:TEMP\\$installer PUPPET_MASTER_SERVER=$puppet_master\" -Wait -Passthru).ExitCode\n\n\n# Custom User-data\n\n\n\nRename-Computer -NewName $hostname -Force -Restart\n\u003c/powershell\u003e\n"
                }
            },
            "resources": {
                "data.template_file.linux": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "83750c1117db149b41102a73a55c98db3720e56802918ceac323fde07088ed3d",
                        "attributes": {
                            "id": "83750c1117db149b41102a73a55c98db3720e56802918ceac323fde07088ed3d",
                            "rendered": "#!/bin/bash\n\n# Configure the web-proxy\necho \"proxy=http://secureproxy.segment.domain.com:880\" \u003e\u003e /etc/yum.conf\n\n\n# Set the hostname\nhostnamectl set-hostname PMDXYZA1005\necho \"PMDXYZA1005\" \u003e /etc/hostname\necho \"127.0.0.1 PMDXYZA1005 localhost.localdomain localhost\" \u003e /etc/hosts\necho \"\nNETWORKING=yes\nNOZEROCONF=yes\nNETWORKING_IPV6=no\nHOSTNAME=PMDXYZA1005\" \u003e /etc/sysconfig/network\necho \"preserve_hostname: true\" \u003e\u003e /etc/cloud/cloud.cfg\n\n\n# Update Packages\nyum update -y\n\n\n# Install Puppet\ncurl -k https://acme-puppet.segment.domain.com:8080/packages/current/install.bash | bash\n\n\n# Custom User Data\n\n",
                            "template": "#!/bin/bash\n\n# Configure the web-proxy\necho \"proxy=${proxy_url}\" \u003e\u003e /etc/yum.conf\n\n\n# Set the hostname\nhostnamectl set-hostname ${hostname}\necho \"${hostname}\" \u003e /etc/hostname\necho \"127.0.0.1 ${hostname} localhost.localdomain localhost\" \u003e /etc/hosts\necho \"\nNETWORKING=yes\nNOZEROCONF=yes\nNETWORKING_IPV6=no\nHOSTNAME=${hostname}\" \u003e /etc/sysconfig/network\necho \"preserve_hostname: true\" \u003e\u003e /etc/cloud/cloud.cfg\n\n\n# Update Packages\nyum update -y\n\n\n# Install Puppet\ncurl -k https://${puppet_master_domain}:8080/packages/current/install.bash | bash\n\n\n# Custom User Data\n${user_data}\n",
                            "vars.%": "4",
                            "vars.hostname": "PMDXYZA1005",
                            "vars.proxy_url": "http://secureproxy.segment.domain.com:880",
                            "vars.puppet_master_domain": "acme-puppet.segment.domain.com",
                            "vars.user_data": ""
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                },
                "data.template_file.windows": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "3014ee389a9f5f8b8bee03a2da252eeb4bcbe0662440a0bec00df861d0fb916f",
                        "attributes": {
                            "id": "3014ee389a9f5f8b8bee03a2da252eeb4bcbe0662440a0bec00df861d0fb916f",
                            "rendered": "\u003cpowershell\u003e\n\nSet-ExecutionPolicy -executionpolicy remotesigned -force\nImport-Module AWSPowershell\n\n$hostname = \"PMDXYZA1005\"\n$installer = \"puppet-agent-1.5.2-x64.msi\"\n$installer_bucket = \"myproject-acme-software-media-share\"\n$puppet_master = \"acme-puppet.segment.domain.com\"\n\nfunction getIdDocVal($key, $instIdDoc=\"\") {\n    if ($instIdDoc -eq \"\") {\n        $instIdDoc = getEc2Metadata('dynamic/instance-identity/document') | ConvertFrom-Json\n    }\n\n    if($instIdDoc.PSObject.Properties.Match($key).Count) {\n        return $instIdDoc | Select -ExpandProperty $key\n    }\n}\n\nfunction getEc2Metadata($path) {\n    $url = \"http://169.254.169.254/latest/$path\"\n    try {\n        $metadata = (Invoke-WebRequest -Uri $url -TimeoutSec 0)\n\n        if ($?) {\n            return $metadata\n        } else {\n            log \"Failed to get EC2 Metadata for $path\" red\n        }\n    } catch {\n        log \"Failed to get EC2 Metadata for $path\" red\n        Break\n    }\n}\n\nfunction getInstanceId() {\n    return (getEc2Metadata('meta-data/instance-id')).Content\n}\n\nfunction setHostname($hostname) {\n    if (([System.Net.Dns]::GetHostName()) -ne $hostname) {\n        log \"Setting hostname; current host $([System.Net.Dns]::GetHostName()) does not match $hostname\"\n        Rename-Computer -NewName $hostname -Force -Restart\n    }\n}\n\n# Set up the web proxy for KO\n\n$reg = \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\"\n\nSet-ItemProperty -Path $reg -Name ProxyServer -Value \"http://secureproxy.segment.domain.com:880\"\nSet-ItemProperty -Path $reg -Name ProxyEnable -Value 1\nSet-ItemProperty -Path $reg -Name ProxyOverride -Value \"*domain.com;231.92.*'10.*;169.254.169.254;\u003clocal\u003e\"\n\n# download the puppet agent from local bucket and install\nCopy-S3Object -BucketName $installer_bucket -Key $installer -LocalFile $env:TEMP\\$installer\n\n# msiexec /qn /norestart /i puppet-agent-\u003cVERSION\u003e-x64.msi PUPPET_MASTER_SERVER=puppet.example.com\n(Start-Process -FilePath \"msiexec.exe\" -ArgumentList \"/qn /norestart /i $env:TEMP\\$installer PUPPET_MASTER_SERVER=$puppet_master\" -Wait -Passthru).ExitCode\n\n\n# Custom User-data\n\n\n\nRename-Computer -NewName $hostname -Force -Restart\n\u003c/powershell\u003e\n",
                            "template": "\u003cpowershell\u003e\n\nSet-ExecutionPolicy -executionpolicy remotesigned -force\nImport-Module AWSPowershell\n\n$hostname = \"${hostname}\"\n$installer = \"${installer}\"\n$installer_bucket = \"${installer_bucket}\"\n$puppet_master = \"${puppet_master_domain}\"\n\nfunction getIdDocVal($key, $instIdDoc=\"\") {\n    if ($instIdDoc -eq \"\") {\n        $instIdDoc = getEc2Metadata('dynamic/instance-identity/document') | ConvertFrom-Json\n    }\n\n    if($instIdDoc.PSObject.Properties.Match($key).Count) {\n        return $instIdDoc | Select -ExpandProperty $key\n    }\n}\n\nfunction getEc2Metadata($path) {\n    $url = \"http://169.254.169.254/latest/$path\"\n    try {\n        $metadata = (Invoke-WebRequest -Uri $url -TimeoutSec 0)\n\n        if ($?) {\n            return $metadata\n        } else {\n            log \"Failed to get EC2 Metadata for $path\" red\n        }\n    } catch {\n        log \"Failed to get EC2 Metadata for $path\" red\n        Break\n    }\n}\n\nfunction getInstanceId() {\n    return (getEc2Metadata('meta-data/instance-id')).Content\n}\n\nfunction setHostname($hostname) {\n    if (([System.Net.Dns]::GetHostName()) -ne $hostname) {\n        log \"Setting hostname; current host $([System.Net.Dns]::GetHostName()) does not match $hostname\"\n        Rename-Computer -NewName $hostname -Force -Restart\n    }\n}\n\n# Set up the web proxy for KO\n\n$reg = \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\"\n\nSet-ItemProperty -Path $reg -Name ProxyServer -Value \"${proxy_url}\"\nSet-ItemProperty -Path $reg -Name ProxyEnable -Value 1\nSet-ItemProperty -Path $reg -Name ProxyOverride -Value \"${proxy_override}\"\n\n# download the puppet agent from local bucket and install\nCopy-S3Object -BucketName $installer_bucket -Key $installer -LocalFile $env:TEMP\\$installer\n\n# msiexec /qn /norestart /i puppet-agent-\u003cVERSION\u003e-x64.msi PUPPET_MASTER_SERVER=puppet.example.com\n(Start-Process -FilePath \"msiexec.exe\" -ArgumentList \"/qn /norestart /i $env:TEMP\\$installer PUPPET_MASTER_SERVER=$puppet_master\" -Wait -Passthru).ExitCode\n\n\n# Custom User-data\n${user_data}\n\n\nRename-Computer -NewName $hostname -Force -Restart\n\u003c/powershell\u003e\n",
                            "vars.%": "7",
                            "vars.hostname": "PMDXYZA1005",
                            "vars.installer": "puppet-agent-1.5.2-x64.msi",
                            "vars.installer_bucket": "myproject-acme-software-media-share",
                            "vars.proxy_override": "*domain.com;231.92.*'10.*;169.254.169.254;\u003clocal\u003e",
                            "vars.proxy_url": "http://secureproxy.segment.domain.com:880",
                            "vars.puppet_master_domain": "acme-puppet.segment.domain.com",
                            "vars.user_data": ""
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                }
            },
            "depends_on": []
        },
        {
            "path": [
                "root",
                "XYZ_PMDXYZA1006_user_data"
            ],
            "outputs": {
                "linux": {
                    "sensitive": false,
                    "type": "string",
                    "value": "#!/bin/bash\n\n# Configure the web-proxy\necho \"proxy=http://secureproxy.segment.domain.com:880\" \u003e\u003e /etc/yum.conf\n\n\n# Set the hostname\nhostnamectl set-hostname PMDXYZA1006\necho \"PMDXYZA1006\" \u003e /etc/hostname\necho \"127.0.0.1 PMDXYZA1006 localhost.localdomain localhost\" \u003e /etc/hosts\necho \"\nNETWORKING=yes\nNOZEROCONF=yes\nNETWORKING_IPV6=no\nHOSTNAME=PMDXYZA1006\" \u003e /etc/sysconfig/network\necho \"preserve_hostname: true\" \u003e\u003e /etc/cloud/cloud.cfg\n\n\n# Update Packages\nyum update -y\n\n\n# Install Puppet\ncurl -k https://acme-puppet.segment.domain.com:8080/packages/current/install.bash | bash\n\n\n# Custom User Data\n\n"
                },
                "windows": {
                    "sensitive": false,
                    "type": "string",
                    "value": "\u003cpowershell\u003e\n\nSet-ExecutionPolicy -executionpolicy remotesigned -force\nImport-Module AWSPowershell\n\n$hostname = \"PMDXYZA1006\"\n$installer = \"puppet-agent-1.5.2-x64.msi\"\n$installer_bucket = \"myproject-acme-software-media-share\"\n$puppet_master = \"acme-puppet.segment.domain.com\"\n\nfunction getIdDocVal($key, $instIdDoc=\"\") {\n    if ($instIdDoc -eq \"\") {\n        $instIdDoc = getEc2Metadata('dynamic/instance-identity/document') | ConvertFrom-Json\n    }\n\n    if($instIdDoc.PSObject.Properties.Match($key).Count) {\n        return $instIdDoc | Select -ExpandProperty $key\n    }\n}\n\nfunction getEc2Metadata($path) {\n    $url = \"http://169.254.169.254/latest/$path\"\n    try {\n        $metadata = (Invoke-WebRequest -Uri $url -TimeoutSec 0)\n\n        if ($?) {\n            return $metadata\n        } else {\n            log \"Failed to get EC2 Metadata for $path\" red\n        }\n    } catch {\n        log \"Failed to get EC2 Metadata for $path\" red\n        Break\n    }\n}\n\nfunction getInstanceId() {\n    return (getEc2Metadata('meta-data/instance-id')).Content\n}\n\nfunction setHostname($hostname) {\n    if (([System.Net.Dns]::GetHostName()) -ne $hostname) {\n        log \"Setting hostname; current host $([System.Net.Dns]::GetHostName()) does not match $hostname\"\n        Rename-Computer -NewName $hostname -Force -Restart\n    }\n}\n\n# Set up the web proxy for KO\n\n$reg = \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\"\n\nSet-ItemProperty -Path $reg -Name ProxyServer -Value \"http://secureproxy.segment.domain.com:880\"\nSet-ItemProperty -Path $reg -Name ProxyEnable -Value 1\nSet-ItemProperty -Path $reg -Name ProxyOverride -Value \"*domain.com;231.92.*'10.*;169.254.169.254;\u003clocal\u003e\"\n\n# download the puppet agent from local bucket and install\nCopy-S3Object -BucketName $installer_bucket -Key $installer -LocalFile $env:TEMP\\$installer\n\n# msiexec /qn /norestart /i puppet-agent-\u003cVERSION\u003e-x64.msi PUPPET_MASTER_SERVER=puppet.example.com\n(Start-Process -FilePath \"msiexec.exe\" -ArgumentList \"/qn /norestart /i $env:TEMP\\$installer PUPPET_MASTER_SERVER=$puppet_master\" -Wait -Passthru).ExitCode\n\n\n# Custom User-data\n\n\n\nRename-Computer -NewName $hostname -Force -Restart\n\u003c/powershell\u003e\n"
                }
            },
            "resources": {
                "data.template_file.linux": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "4508ae1b9515964aa451523379cbe320dd41a0b1e74e71c495bb61e40a3c2f39",
                        "attributes": {
                            "id": "4508ae1b9515964aa451523379cbe320dd41a0b1e74e71c495bb61e40a3c2f39",
                            "rendered": "#!/bin/bash\n\n# Configure the web-proxy\necho \"proxy=http://secureproxy.segment.domain.com:880\" \u003e\u003e /etc/yum.conf\n\n\n# Set the hostname\nhostnamectl set-hostname PMDXYZA1006\necho \"PMDXYZA1006\" \u003e /etc/hostname\necho \"127.0.0.1 PMDXYZA1006 localhost.localdomain localhost\" \u003e /etc/hosts\necho \"\nNETWORKING=yes\nNOZEROCONF=yes\nNETWORKING_IPV6=no\nHOSTNAME=PMDXYZA1006\" \u003e /etc/sysconfig/network\necho \"preserve_hostname: true\" \u003e\u003e /etc/cloud/cloud.cfg\n\n\n# Update Packages\nyum update -y\n\n\n# Install Puppet\ncurl -k https://acme-puppet.segment.domain.com:8080/packages/current/install.bash | bash\n\n\n# Custom User Data\n\n",
                            "template": "#!/bin/bash\n\n# Configure the web-proxy\necho \"proxy=${proxy_url}\" \u003e\u003e /etc/yum.conf\n\n\n# Set the hostname\nhostnamectl set-hostname ${hostname}\necho \"${hostname}\" \u003e /etc/hostname\necho \"127.0.0.1 ${hostname} localhost.localdomain localhost\" \u003e /etc/hosts\necho \"\nNETWORKING=yes\nNOZEROCONF=yes\nNETWORKING_IPV6=no\nHOSTNAME=${hostname}\" \u003e /etc/sysconfig/network\necho \"preserve_hostname: true\" \u003e\u003e /etc/cloud/cloud.cfg\n\n\n# Update Packages\nyum update -y\n\n\n# Install Puppet\ncurl -k https://${puppet_master_domain}:8080/packages/current/install.bash | bash\n\n\n# Custom User Data\n${user_data}\n",
                            "vars.%": "4",
                            "vars.hostname": "PMDXYZA1006",
                            "vars.proxy_url": "http://secureproxy.segment.domain.com:880",
                            "vars.puppet_master_domain": "acme-puppet.segment.domain.com",
                            "vars.user_data": ""
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                },
                "data.template_file.windows": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "5921372c94810e976d7f96d7f2cbf23494eaee66921bfa80d158dc54dd5429b5",
                        "attributes": {
                            "id": "5921372c94810e976d7f96d7f2cbf23494eaee66921bfa80d158dc54dd5429b5",
                            "rendered": "\u003cpowershell\u003e\n\nSet-ExecutionPolicy -executionpolicy remotesigned -force\nImport-Module AWSPowershell\n\n$hostname = \"PMDXYZA1006\"\n$installer = \"puppet-agent-1.5.2-x64.msi\"\n$installer_bucket = \"myproject-acme-software-media-share\"\n$puppet_master = \"acme-puppet.segment.domain.com\"\n\nfunction getIdDocVal($key, $instIdDoc=\"\") {\n    if ($instIdDoc -eq \"\") {\n        $instIdDoc = getEc2Metadata('dynamic/instance-identity/document') | ConvertFrom-Json\n    }\n\n    if($instIdDoc.PSObject.Properties.Match($key).Count) {\n        return $instIdDoc | Select -ExpandProperty $key\n    }\n}\n\nfunction getEc2Metadata($path) {\n    $url = \"http://169.254.169.254/latest/$path\"\n    try {\n        $metadata = (Invoke-WebRequest -Uri $url -TimeoutSec 0)\n\n        if ($?) {\n            return $metadata\n        } else {\n            log \"Failed to get EC2 Metadata for $path\" red\n        }\n    } catch {\n        log \"Failed to get EC2 Metadata for $path\" red\n        Break\n    }\n}\n\nfunction getInstanceId() {\n    return (getEc2Metadata('meta-data/instance-id')).Content\n}\n\nfunction setHostname($hostname) {\n    if (([System.Net.Dns]::GetHostName()) -ne $hostname) {\n        log \"Setting hostname; current host $([System.Net.Dns]::GetHostName()) does not match $hostname\"\n        Rename-Computer -NewName $hostname -Force -Restart\n    }\n}\n\n# Set up the web proxy for KO\n\n$reg = \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\"\n\nSet-ItemProperty -Path $reg -Name ProxyServer -Value \"http://secureproxy.segment.domain.com:880\"\nSet-ItemProperty -Path $reg -Name ProxyEnable -Value 1\nSet-ItemProperty -Path $reg -Name ProxyOverride -Value \"*domain.com;231.92.*'10.*;169.254.169.254;\u003clocal\u003e\"\n\n# download the puppet agent from local bucket and install\nCopy-S3Object -BucketName $installer_bucket -Key $installer -LocalFile $env:TEMP\\$installer\n\n# msiexec /qn /norestart /i puppet-agent-\u003cVERSION\u003e-x64.msi PUPPET_MASTER_SERVER=puppet.example.com\n(Start-Process -FilePath \"msiexec.exe\" -ArgumentList \"/qn /norestart /i $env:TEMP\\$installer PUPPET_MASTER_SERVER=$puppet_master\" -Wait -Passthru).ExitCode\n\n\n# Custom User-data\n\n\n\nRename-Computer -NewName $hostname -Force -Restart\n\u003c/powershell\u003e\n",
                            "template": "\u003cpowershell\u003e\n\nSet-ExecutionPolicy -executionpolicy remotesigned -force\nImport-Module AWSPowershell\n\n$hostname = \"${hostname}\"\n$installer = \"${installer}\"\n$installer_bucket = \"${installer_bucket}\"\n$puppet_master = \"${puppet_master_domain}\"\n\nfunction getIdDocVal($key, $instIdDoc=\"\") {\n    if ($instIdDoc -eq \"\") {\n        $instIdDoc = getEc2Metadata('dynamic/instance-identity/document') | ConvertFrom-Json\n    }\n\n    if($instIdDoc.PSObject.Properties.Match($key).Count) {\n        return $instIdDoc | Select -ExpandProperty $key\n    }\n}\n\nfunction getEc2Metadata($path) {\n    $url = \"http://169.254.169.254/latest/$path\"\n    try {\n        $metadata = (Invoke-WebRequest -Uri $url -TimeoutSec 0)\n\n        if ($?) {\n            return $metadata\n        } else {\n            log \"Failed to get EC2 Metadata for $path\" red\n        }\n    } catch {\n        log \"Failed to get EC2 Metadata for $path\" red\n        Break\n    }\n}\n\nfunction getInstanceId() {\n    return (getEc2Metadata('meta-data/instance-id')).Content\n}\n\nfunction setHostname($hostname) {\n    if (([System.Net.Dns]::GetHostName()) -ne $hostname) {\n        log \"Setting hostname; current host $([System.Net.Dns]::GetHostName()) does not match $hostname\"\n        Rename-Computer -NewName $hostname -Force -Restart\n    }\n}\n\n# Set up the web proxy for KO\n\n$reg = \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\"\n\nSet-ItemProperty -Path $reg -Name ProxyServer -Value \"${proxy_url}\"\nSet-ItemProperty -Path $reg -Name ProxyEnable -Value 1\nSet-ItemProperty -Path $reg -Name ProxyOverride -Value \"${proxy_override}\"\n\n# download the puppet agent from local bucket and install\nCopy-S3Object -BucketName $installer_bucket -Key $installer -LocalFile $env:TEMP\\$installer\n\n# msiexec /qn /norestart /i puppet-agent-\u003cVERSION\u003e-x64.msi PUPPET_MASTER_SERVER=puppet.example.com\n(Start-Process -FilePath \"msiexec.exe\" -ArgumentList \"/qn /norestart /i $env:TEMP\\$installer PUPPET_MASTER_SERVER=$puppet_master\" -Wait -Passthru).ExitCode\n\n\n# Custom User-data\n${user_data}\n\n\nRename-Computer -NewName $hostname -Force -Restart\n\u003c/powershell\u003e\n",
                            "vars.%": "7",
                            "vars.hostname": "PMDXYZA1006",
                            "vars.installer": "puppet-agent-1.5.2-x64.msi",
                            "vars.installer_bucket": "myproject-acme-software-media-share",
                            "vars.proxy_override": "*domain.com;231.92.*'10.*;169.254.169.254;\u003clocal\u003e",
                            "vars.proxy_url": "http://secureproxy.segment.domain.com:880",
                            "vars.puppet_master_domain": "acme-puppet.segment.domain.com",
                            "vars.user_data": ""
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                }
            },
            "depends_on": []
        },
        {
            "path": [
                "root",
                "XYZ_PMDXYZA1010_user_data"
            ],
            "outputs": {
                "linux": {
                    "sensitive": false,
                    "type": "string",
                    "value": "#!/bin/bash\n\n# Configure the web-proxy\necho \"proxy=http://secureproxy.segment.domain.com:880\" \u003e\u003e /etc/yum.conf\n\n\n# Set the hostname\nhostnamectl set-hostname PMDXYZA1010\necho \"PMDXYZA1010\" \u003e /etc/hostname\necho \"127.0.0.1 PMDXYZA1010 localhost.localdomain localhost\" \u003e /etc/hosts\necho \"\nNETWORKING=yes\nNOZEROCONF=yes\nNETWORKING_IPV6=no\nHOSTNAME=PMDXYZA1010\" \u003e /etc/sysconfig/network\necho \"preserve_hostname: true\" \u003e\u003e /etc/cloud/cloud.cfg\n\n\n# Update Packages\nyum update -y\n\n\n# Install Puppet\ncurl -k https://acme-puppet.segment.domain.com:8080/packages/current/install.bash | bash\n\n\n# Custom User Data\n\n"
                },
                "windows": {
                    "sensitive": false,
                    "type": "string",
                    "value": "\u003cpowershell\u003e\n\nSet-ExecutionPolicy -executionpolicy remotesigned -force\nImport-Module AWSPowershell\n\n$hostname = \"PMDXYZA1010\"\n$installer = \"puppet-agent-1.5.2-x64.msi\"\n$installer_bucket = \"myproject-acme-software-media-share\"\n$puppet_master = \"acme-puppet.segment.domain.com\"\n\nfunction getIdDocVal($key, $instIdDoc=\"\") {\n    if ($instIdDoc -eq \"\") {\n        $instIdDoc = getEc2Metadata('dynamic/instance-identity/document') | ConvertFrom-Json\n    }\n\n    if($instIdDoc.PSObject.Properties.Match($key).Count) {\n        return $instIdDoc | Select -ExpandProperty $key\n    }\n}\n\nfunction getEc2Metadata($path) {\n    $url = \"http://169.254.169.254/latest/$path\"\n    try {\n        $metadata = (Invoke-WebRequest -Uri $url -TimeoutSec 0)\n\n        if ($?) {\n            return $metadata\n        } else {\n            log \"Failed to get EC2 Metadata for $path\" red\n        }\n    } catch {\n        log \"Failed to get EC2 Metadata for $path\" red\n        Break\n    }\n}\n\nfunction getInstanceId() {\n    return (getEc2Metadata('meta-data/instance-id')).Content\n}\n\nfunction setHostname($hostname) {\n    if (([System.Net.Dns]::GetHostName()) -ne $hostname) {\n        log \"Setting hostname; current host $([System.Net.Dns]::GetHostName()) does not match $hostname\"\n        Rename-Computer -NewName $hostname -Force -Restart\n    }\n}\n\n# Set up the web proxy for KO\n\n$reg = \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\"\n\nSet-ItemProperty -Path $reg -Name ProxyServer -Value \"http://secureproxy.segment.domain.com:880\"\nSet-ItemProperty -Path $reg -Name ProxyEnable -Value 1\nSet-ItemProperty -Path $reg -Name ProxyOverride -Value \"*domain.com;231.92.*'10.*;169.254.169.254;\u003clocal\u003e\"\n\n# download the puppet agent from local bucket and install\nCopy-S3Object -BucketName $installer_bucket -Key $installer -LocalFile $env:TEMP\\$installer\n\n# msiexec /qn /norestart /i puppet-agent-\u003cVERSION\u003e-x64.msi PUPPET_MASTER_SERVER=puppet.example.com\n(Start-Process -FilePath \"msiexec.exe\" -ArgumentList \"/qn /norestart /i $env:TEMP\\$installer PUPPET_MASTER_SERVER=$puppet_master\" -Wait -Passthru).ExitCode\n\n\n# Custom User-data\n\n\n\nRename-Computer -NewName $hostname -Force -Restart\n\u003c/powershell\u003e\n"
                }
            },
            "resources": {
                "data.template_file.linux": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "756c642f323de125b01de7a892536b65a2cc4b47a47f90d8daaa56a77e92f9ef",
                        "attributes": {
                            "id": "756c642f323de125b01de7a892536b65a2cc4b47a47f90d8daaa56a77e92f9ef",
                            "rendered": "#!/bin/bash\n\n# Configure the web-proxy\necho \"proxy=http://secureproxy.segment.domain.com:880\" \u003e\u003e /etc/yum.conf\n\n\n# Set the hostname\nhostnamectl set-hostname PMDXYZA1010\necho \"PMDXYZA1010\" \u003e /etc/hostname\necho \"127.0.0.1 PMDXYZA1010 localhost.localdomain localhost\" \u003e /etc/hosts\necho \"\nNETWORKING=yes\nNOZEROCONF=yes\nNETWORKING_IPV6=no\nHOSTNAME=PMDXYZA1010\" \u003e /etc/sysconfig/network\necho \"preserve_hostname: true\" \u003e\u003e /etc/cloud/cloud.cfg\n\n\n# Update Packages\nyum update -y\n\n\n# Install Puppet\ncurl -k https://acme-puppet.segment.domain.com:8080/packages/current/install.bash | bash\n\n\n# Custom User Data\n\n",
                            "template": "#!/bin/bash\n\n# Configure the web-proxy\necho \"proxy=${proxy_url}\" \u003e\u003e /etc/yum.conf\n\n\n# Set the hostname\nhostnamectl set-hostname ${hostname}\necho \"${hostname}\" \u003e /etc/hostname\necho \"127.0.0.1 ${hostname} localhost.localdomain localhost\" \u003e /etc/hosts\necho \"\nNETWORKING=yes\nNOZEROCONF=yes\nNETWORKING_IPV6=no\nHOSTNAME=${hostname}\" \u003e /etc/sysconfig/network\necho \"preserve_hostname: true\" \u003e\u003e /etc/cloud/cloud.cfg\n\n\n# Update Packages\nyum update -y\n\n\n# Install Puppet\ncurl -k https://${puppet_master_domain}:8080/packages/current/install.bash | bash\n\n\n# Custom User Data\n${user_data}\n",
                            "vars.%": "4",
                            "vars.hostname": "PMDXYZA1010",
                            "vars.proxy_url": "http://secureproxy.segment.domain.com:880",
                            "vars.puppet_master_domain": "acme-puppet.segment.domain.com",
                            "vars.user_data": ""
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                },
                "data.template_file.windows": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "1afceebb2192bdd8514fb6da5957bd1a825afed2ba19d5bdd1e33b785586ae36",
                        "attributes": {
                            "id": "1afceebb2192bdd8514fb6da5957bd1a825afed2ba19d5bdd1e33b785586ae36",
                            "rendered": "\u003cpowershell\u003e\n\nSet-ExecutionPolicy -executionpolicy remotesigned -force\nImport-Module AWSPowershell\n\n$hostname = \"PMDXYZA1010\"\n$installer = \"puppet-agent-1.5.2-x64.msi\"\n$installer_bucket = \"myproject-acme-software-media-share\"\n$puppet_master = \"acme-puppet.segment.domain.com\"\n\nfunction getIdDocVal($key, $instIdDoc=\"\") {\n    if ($instIdDoc -eq \"\") {\n        $instIdDoc = getEc2Metadata('dynamic/instance-identity/document') | ConvertFrom-Json\n    }\n\n    if($instIdDoc.PSObject.Properties.Match($key).Count) {\n        return $instIdDoc | Select -ExpandProperty $key\n    }\n}\n\nfunction getEc2Metadata($path) {\n    $url = \"http://169.254.169.254/latest/$path\"\n    try {\n        $metadata = (Invoke-WebRequest -Uri $url -TimeoutSec 0)\n\n        if ($?) {\n            return $metadata\n        } else {\n            log \"Failed to get EC2 Metadata for $path\" red\n        }\n    } catch {\n        log \"Failed to get EC2 Metadata for $path\" red\n        Break\n    }\n}\n\nfunction getInstanceId() {\n    return (getEc2Metadata('meta-data/instance-id')).Content\n}\n\nfunction setHostname($hostname) {\n    if (([System.Net.Dns]::GetHostName()) -ne $hostname) {\n        log \"Setting hostname; current host $([System.Net.Dns]::GetHostName()) does not match $hostname\"\n        Rename-Computer -NewName $hostname -Force -Restart\n    }\n}\n\n# Set up the web proxy for KO\n\n$reg = \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\"\n\nSet-ItemProperty -Path $reg -Name ProxyServer -Value \"http://secureproxy.segment.domain.com:880\"\nSet-ItemProperty -Path $reg -Name ProxyEnable -Value 1\nSet-ItemProperty -Path $reg -Name ProxyOverride -Value \"*domain.com;231.92.*'10.*;169.254.169.254;\u003clocal\u003e\"\n\n# download the puppet agent from local bucket and install\nCopy-S3Object -BucketName $installer_bucket -Key $installer -LocalFile $env:TEMP\\$installer\n\n# msiexec /qn /norestart /i puppet-agent-\u003cVERSION\u003e-x64.msi PUPPET_MASTER_SERVER=puppet.example.com\n(Start-Process -FilePath \"msiexec.exe\" -ArgumentList \"/qn /norestart /i $env:TEMP\\$installer PUPPET_MASTER_SERVER=$puppet_master\" -Wait -Passthru).ExitCode\n\n\n# Custom User-data\n\n\n\nRename-Computer -NewName $hostname -Force -Restart\n\u003c/powershell\u003e\n",
                            "template": "\u003cpowershell\u003e\n\nSet-ExecutionPolicy -executionpolicy remotesigned -force\nImport-Module AWSPowershell\n\n$hostname = \"${hostname}\"\n$installer = \"${installer}\"\n$installer_bucket = \"${installer_bucket}\"\n$puppet_master = \"${puppet_master_domain}\"\n\nfunction getIdDocVal($key, $instIdDoc=\"\") {\n    if ($instIdDoc -eq \"\") {\n        $instIdDoc = getEc2Metadata('dynamic/instance-identity/document') | ConvertFrom-Json\n    }\n\n    if($instIdDoc.PSObject.Properties.Match($key).Count) {\n        return $instIdDoc | Select -ExpandProperty $key\n    }\n}\n\nfunction getEc2Metadata($path) {\n    $url = \"http://169.254.169.254/latest/$path\"\n    try {\n        $metadata = (Invoke-WebRequest -Uri $url -TimeoutSec 0)\n\n        if ($?) {\n            return $metadata\n        } else {\n            log \"Failed to get EC2 Metadata for $path\" red\n        }\n    } catch {\n        log \"Failed to get EC2 Metadata for $path\" red\n        Break\n    }\n}\n\nfunction getInstanceId() {\n    return (getEc2Metadata('meta-data/instance-id')).Content\n}\n\nfunction setHostname($hostname) {\n    if (([System.Net.Dns]::GetHostName()) -ne $hostname) {\n        log \"Setting hostname; current host $([System.Net.Dns]::GetHostName()) does not match $hostname\"\n        Rename-Computer -NewName $hostname -Force -Restart\n    }\n}\n\n# Set up the web proxy for KO\n\n$reg = \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\"\n\nSet-ItemProperty -Path $reg -Name ProxyServer -Value \"${proxy_url}\"\nSet-ItemProperty -Path $reg -Name ProxyEnable -Value 1\nSet-ItemProperty -Path $reg -Name ProxyOverride -Value \"${proxy_override}\"\n\n# download the puppet agent from local bucket and install\nCopy-S3Object -BucketName $installer_bucket -Key $installer -LocalFile $env:TEMP\\$installer\n\n# msiexec /qn /norestart /i puppet-agent-\u003cVERSION\u003e-x64.msi PUPPET_MASTER_SERVER=puppet.example.com\n(Start-Process -FilePath \"msiexec.exe\" -ArgumentList \"/qn /norestart /i $env:TEMP\\$installer PUPPET_MASTER_SERVER=$puppet_master\" -Wait -Passthru).ExitCode\n\n\n# Custom User-data\n${user_data}\n\n\nRename-Computer -NewName $hostname -Force -Restart\n\u003c/powershell\u003e\n",
                            "vars.%": "7",
                            "vars.hostname": "PMDXYZA1010",
                            "vars.installer": "puppet-agent-1.5.2-x64.msi",
                            "vars.installer_bucket": "myproject-acme-software-media-share",
                            "vars.proxy_override": "*domain.com;231.92.*'10.*;169.254.169.254;\u003clocal\u003e",
                            "vars.proxy_url": "http://secureproxy.segment.domain.com:880",
                            "vars.puppet_master_domain": "acme-puppet.segment.domain.com",
                            "vars.user_data": ""
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                }
            },
            "depends_on": []
        },
        {
            "path": [
                "root",
                "XYZ_PMDXYZA1011_user_data"
            ],
            "outputs": {
                "linux": {
                    "sensitive": false,
                    "type": "string",
                    "value": "#!/bin/bash\n\n# Configure the web-proxy\necho \"proxy=http://secureproxy.segment.domain.com:880\" \u003e\u003e /etc/yum.conf\n\n\n# Set the hostname\nhostnamectl set-hostname PMDXYZA1011\necho \"PMDXYZA1011\" \u003e /etc/hostname\necho \"127.0.0.1 PMDXYZA1011 localhost.localdomain localhost\" \u003e /etc/hosts\necho \"\nNETWORKING=yes\nNOZEROCONF=yes\nNETWORKING_IPV6=no\nHOSTNAME=PMDXYZA1011\" \u003e /etc/sysconfig/network\necho \"preserve_hostname: true\" \u003e\u003e /etc/cloud/cloud.cfg\n\n\n# Update Packages\nyum update -y\n\n\n# Install Puppet\ncurl -k https://acme-puppet.segment.domain.com:8080/packages/current/install.bash | bash\n\n\n# Custom User Data\n\n"
                },
                "windows": {
                    "sensitive": false,
                    "type": "string",
                    "value": "\u003cpowershell\u003e\n\nSet-ExecutionPolicy -executionpolicy remotesigned -force\nImport-Module AWSPowershell\n\n$hostname = \"PMDXYZA1011\"\n$installer = \"puppet-agent-1.5.2-x64.msi\"\n$installer_bucket = \"myproject-acme-software-media-share\"\n$puppet_master = \"acme-puppet.segment.domain.com\"\n\nfunction getIdDocVal($key, $instIdDoc=\"\") {\n    if ($instIdDoc -eq \"\") {\n        $instIdDoc = getEc2Metadata('dynamic/instance-identity/document') | ConvertFrom-Json\n    }\n\n    if($instIdDoc.PSObject.Properties.Match($key).Count) {\n        return $instIdDoc | Select -ExpandProperty $key\n    }\n}\n\nfunction getEc2Metadata($path) {\n    $url = \"http://169.254.169.254/latest/$path\"\n    try {\n        $metadata = (Invoke-WebRequest -Uri $url -TimeoutSec 0)\n\n        if ($?) {\n            return $metadata\n        } else {\n            log \"Failed to get EC2 Metadata for $path\" red\n        }\n    } catch {\n        log \"Failed to get EC2 Metadata for $path\" red\n        Break\n    }\n}\n\nfunction getInstanceId() {\n    return (getEc2Metadata('meta-data/instance-id')).Content\n}\n\nfunction setHostname($hostname) {\n    if (([System.Net.Dns]::GetHostName()) -ne $hostname) {\n        log \"Setting hostname; current host $([System.Net.Dns]::GetHostName()) does not match $hostname\"\n        Rename-Computer -NewName $hostname -Force -Restart\n    }\n}\n\n# Set up the web proxy for KO\n\n$reg = \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\"\n\nSet-ItemProperty -Path $reg -Name ProxyServer -Value \"http://secureproxy.segment.domain.com:880\"\nSet-ItemProperty -Path $reg -Name ProxyEnable -Value 1\nSet-ItemProperty -Path $reg -Name ProxyOverride -Value \"*domain.com;231.92.*'10.*;169.254.169.254;\u003clocal\u003e\"\n\n# download the puppet agent from local bucket and install\nCopy-S3Object -BucketName $installer_bucket -Key $installer -LocalFile $env:TEMP\\$installer\n\n# msiexec /qn /norestart /i puppet-agent-\u003cVERSION\u003e-x64.msi PUPPET_MASTER_SERVER=puppet.example.com\n(Start-Process -FilePath \"msiexec.exe\" -ArgumentList \"/qn /norestart /i $env:TEMP\\$installer PUPPET_MASTER_SERVER=$puppet_master\" -Wait -Passthru).ExitCode\n\n\n# Custom User-data\n\n\n\nRename-Computer -NewName $hostname -Force -Restart\n\u003c/powershell\u003e\n"
                }
            },
            "resources": {
                "data.template_file.linux": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "1cde662229b46e4c22b18afa320b91f200a0977de5cf10b6146089c4f2692477",
                        "attributes": {
                            "id": "1cde662229b46e4c22b18afa320b91f200a0977de5cf10b6146089c4f2692477",
                            "rendered": "#!/bin/bash\n\n# Configure the web-proxy\necho \"proxy=http://secureproxy.segment.domain.com:880\" \u003e\u003e /etc/yum.conf\n\n\n# Set the hostname\nhostnamectl set-hostname PMDXYZA1011\necho \"PMDXYZA1011\" \u003e /etc/hostname\necho \"127.0.0.1 PMDXYZA1011 localhost.localdomain localhost\" \u003e /etc/hosts\necho \"\nNETWORKING=yes\nNOZEROCONF=yes\nNETWORKING_IPV6=no\nHOSTNAME=PMDXYZA1011\" \u003e /etc/sysconfig/network\necho \"preserve_hostname: true\" \u003e\u003e /etc/cloud/cloud.cfg\n\n\n# Update Packages\nyum update -y\n\n\n# Install Puppet\ncurl -k https://acme-puppet.segment.domain.com:8080/packages/current/install.bash | bash\n\n\n# Custom User Data\n\n",
                            "template": "#!/bin/bash\n\n# Configure the web-proxy\necho \"proxy=${proxy_url}\" \u003e\u003e /etc/yum.conf\n\n\n# Set the hostname\nhostnamectl set-hostname ${hostname}\necho \"${hostname}\" \u003e /etc/hostname\necho \"127.0.0.1 ${hostname} localhost.localdomain localhost\" \u003e /etc/hosts\necho \"\nNETWORKING=yes\nNOZEROCONF=yes\nNETWORKING_IPV6=no\nHOSTNAME=${hostname}\" \u003e /etc/sysconfig/network\necho \"preserve_hostname: true\" \u003e\u003e /etc/cloud/cloud.cfg\n\n\n# Update Packages\nyum update -y\n\n\n# Install Puppet\ncurl -k https://${puppet_master_domain}:8080/packages/current/install.bash | bash\n\n\n# Custom User Data\n${user_data}\n",
                            "vars.%": "4",
                            "vars.hostname": "PMDXYZA1011",
                            "vars.proxy_url": "http://secureproxy.segment.domain.com:880",
                            "vars.puppet_master_domain": "acme-puppet.segment.domain.com",
                            "vars.user_data": ""
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                },
                "data.template_file.windows": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "b3f9ffc26f4603510227579e57d5873c307a4a1699b5989c4f1eb099670632aa",
                        "attributes": {
                            "id": "b3f9ffc26f4603510227579e57d5873c307a4a1699b5989c4f1eb099670632aa",
                            "rendered": "\u003cpowershell\u003e\n\nSet-ExecutionPolicy -executionpolicy remotesigned -force\nImport-Module AWSPowershell\n\n$hostname = \"PMDXYZA1011\"\n$installer = \"puppet-agent-1.5.2-x64.msi\"\n$installer_bucket = \"myproject-acme-software-media-share\"\n$puppet_master = \"acme-puppet.segment.domain.com\"\n\nfunction getIdDocVal($key, $instIdDoc=\"\") {\n    if ($instIdDoc -eq \"\") {\n        $instIdDoc = getEc2Metadata('dynamic/instance-identity/document') | ConvertFrom-Json\n    }\n\n    if($instIdDoc.PSObject.Properties.Match($key).Count) {\n        return $instIdDoc | Select -ExpandProperty $key\n    }\n}\n\nfunction getEc2Metadata($path) {\n    $url = \"http://169.254.169.254/latest/$path\"\n    try {\n        $metadata = (Invoke-WebRequest -Uri $url -TimeoutSec 0)\n\n        if ($?) {\n            return $metadata\n        } else {\n            log \"Failed to get EC2 Metadata for $path\" red\n        }\n    } catch {\n        log \"Failed to get EC2 Metadata for $path\" red\n        Break\n    }\n}\n\nfunction getInstanceId() {\n    return (getEc2Metadata('meta-data/instance-id')).Content\n}\n\nfunction setHostname($hostname) {\n    if (([System.Net.Dns]::GetHostName()) -ne $hostname) {\n        log \"Setting hostname; current host $([System.Net.Dns]::GetHostName()) does not match $hostname\"\n        Rename-Computer -NewName $hostname -Force -Restart\n    }\n}\n\n# Set up the web proxy for KO\n\n$reg = \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\"\n\nSet-ItemProperty -Path $reg -Name ProxyServer -Value \"http://secureproxy.segment.domain.com:880\"\nSet-ItemProperty -Path $reg -Name ProxyEnable -Value 1\nSet-ItemProperty -Path $reg -Name ProxyOverride -Value \"*domain.com;231.92.*'10.*;169.254.169.254;\u003clocal\u003e\"\n\n# download the puppet agent from local bucket and install\nCopy-S3Object -BucketName $installer_bucket -Key $installer -LocalFile $env:TEMP\\$installer\n\n# msiexec /qn /norestart /i puppet-agent-\u003cVERSION\u003e-x64.msi PUPPET_MASTER_SERVER=puppet.example.com\n(Start-Process -FilePath \"msiexec.exe\" -ArgumentList \"/qn /norestart /i $env:TEMP\\$installer PUPPET_MASTER_SERVER=$puppet_master\" -Wait -Passthru).ExitCode\n\n\n# Custom User-data\n\n\n\nRename-Computer -NewName $hostname -Force -Restart\n\u003c/powershell\u003e\n",
                            "template": "\u003cpowershell\u003e\n\nSet-ExecutionPolicy -executionpolicy remotesigned -force\nImport-Module AWSPowershell\n\n$hostname = \"${hostname}\"\n$installer = \"${installer}\"\n$installer_bucket = \"${installer_bucket}\"\n$puppet_master = \"${puppet_master_domain}\"\n\nfunction getIdDocVal($key, $instIdDoc=\"\") {\n    if ($instIdDoc -eq \"\") {\n        $instIdDoc = getEc2Metadata('dynamic/instance-identity/document') | ConvertFrom-Json\n    }\n\n    if($instIdDoc.PSObject.Properties.Match($key).Count) {\n        return $instIdDoc | Select -ExpandProperty $key\n    }\n}\n\nfunction getEc2Metadata($path) {\n    $url = \"http://169.254.169.254/latest/$path\"\n    try {\n        $metadata = (Invoke-WebRequest -Uri $url -TimeoutSec 0)\n\n        if ($?) {\n            return $metadata\n        } else {\n            log \"Failed to get EC2 Metadata for $path\" red\n        }\n    } catch {\n        log \"Failed to get EC2 Metadata for $path\" red\n        Break\n    }\n}\n\nfunction getInstanceId() {\n    return (getEc2Metadata('meta-data/instance-id')).Content\n}\n\nfunction setHostname($hostname) {\n    if (([System.Net.Dns]::GetHostName()) -ne $hostname) {\n        log \"Setting hostname; current host $([System.Net.Dns]::GetHostName()) does not match $hostname\"\n        Rename-Computer -NewName $hostname -Force -Restart\n    }\n}\n\n# Set up the web proxy for KO\n\n$reg = \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\"\n\nSet-ItemProperty -Path $reg -Name ProxyServer -Value \"${proxy_url}\"\nSet-ItemProperty -Path $reg -Name ProxyEnable -Value 1\nSet-ItemProperty -Path $reg -Name ProxyOverride -Value \"${proxy_override}\"\n\n# download the puppet agent from local bucket and install\nCopy-S3Object -BucketName $installer_bucket -Key $installer -LocalFile $env:TEMP\\$installer\n\n# msiexec /qn /norestart /i puppet-agent-\u003cVERSION\u003e-x64.msi PUPPET_MASTER_SERVER=puppet.example.com\n(Start-Process -FilePath \"msiexec.exe\" -ArgumentList \"/qn /norestart /i $env:TEMP\\$installer PUPPET_MASTER_SERVER=$puppet_master\" -Wait -Passthru).ExitCode\n\n\n# Custom User-data\n${user_data}\n\n\nRename-Computer -NewName $hostname -Force -Restart\n\u003c/powershell\u003e\n",
                            "vars.%": "7",
                            "vars.hostname": "PMDXYZA1011",
                            "vars.installer": "puppet-agent-1.5.2-x64.msi",
                            "vars.installer_bucket": "myproject-acme-software-media-share",
                            "vars.proxy_override": "*domain.com;231.92.*'10.*;169.254.169.254;\u003clocal\u003e",
                            "vars.proxy_url": "http://secureproxy.segment.domain.com:880",
                            "vars.puppet_master_domain": "acme-puppet.segment.domain.com",
                            "vars.user_data": ""
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                }
            },
            "depends_on": []
        },
        {
            "path": [
                "root",
                "XYZ_PMDXYZA1012_user_data"
            ],
            "outputs": {
                "linux": {
                    "sensitive": false,
                    "type": "string",
                    "value": "#!/bin/bash\n\n# Configure the web-proxy\necho \"proxy=http://secureproxy.segment.domain.com:880\" \u003e\u003e /etc/yum.conf\n\n\n# Set the hostname\nhostnamectl set-hostname PMDXYZA1012\necho \"PMDXYZA1012\" \u003e /etc/hostname\necho \"127.0.0.1 PMDXYZA1012 localhost.localdomain localhost\" \u003e /etc/hosts\necho \"\nNETWORKING=yes\nNOZEROCONF=yes\nNETWORKING_IPV6=no\nHOSTNAME=PMDXYZA1012\" \u003e /etc/sysconfig/network\necho \"preserve_hostname: true\" \u003e\u003e /etc/cloud/cloud.cfg\n\n\n# Update Packages\nyum update -y\n\n\n# Install Puppet\ncurl -k https://acme-puppet.segment.domain.com:8080/packages/current/install.bash | bash\n\n\n# Custom User Data\n\n"
                },
                "windows": {
                    "sensitive": false,
                    "type": "string",
                    "value": "\u003cpowershell\u003e\n\nSet-ExecutionPolicy -executionpolicy remotesigned -force\nImport-Module AWSPowershell\n\n$hostname = \"PMDXYZA1012\"\n$installer = \"puppet-agent-1.5.2-x64.msi\"\n$installer_bucket = \"myproject-acme-software-media-share\"\n$puppet_master = \"acme-puppet.segment.domain.com\"\n\nfunction getIdDocVal($key, $instIdDoc=\"\") {\n    if ($instIdDoc -eq \"\") {\n        $instIdDoc = getEc2Metadata('dynamic/instance-identity/document') | ConvertFrom-Json\n    }\n\n    if($instIdDoc.PSObject.Properties.Match($key).Count) {\n        return $instIdDoc | Select -ExpandProperty $key\n    }\n}\n\nfunction getEc2Metadata($path) {\n    $url = \"http://169.254.169.254/latest/$path\"\n    try {\n        $metadata = (Invoke-WebRequest -Uri $url -TimeoutSec 0)\n\n        if ($?) {\n            return $metadata\n        } else {\n            log \"Failed to get EC2 Metadata for $path\" red\n        }\n    } catch {\n        log \"Failed to get EC2 Metadata for $path\" red\n        Break\n    }\n}\n\nfunction getInstanceId() {\n    return (getEc2Metadata('meta-data/instance-id')).Content\n}\n\nfunction setHostname($hostname) {\n    if (([System.Net.Dns]::GetHostName()) -ne $hostname) {\n        log \"Setting hostname; current host $([System.Net.Dns]::GetHostName()) does not match $hostname\"\n        Rename-Computer -NewName $hostname -Force -Restart\n    }\n}\n\n# Set up the web proxy for KO\n\n$reg = \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\"\n\nSet-ItemProperty -Path $reg -Name ProxyServer -Value \"http://secureproxy.segment.domain.com:880\"\nSet-ItemProperty -Path $reg -Name ProxyEnable -Value 1\nSet-ItemProperty -Path $reg -Name ProxyOverride -Value \"*domain.com;231.92.*'10.*;169.254.169.254;\u003clocal\u003e\"\n\n# download the puppet agent from local bucket and install\nCopy-S3Object -BucketName $installer_bucket -Key $installer -LocalFile $env:TEMP\\$installer\n\n# msiexec /qn /norestart /i puppet-agent-\u003cVERSION\u003e-x64.msi PUPPET_MASTER_SERVER=puppet.example.com\n(Start-Process -FilePath \"msiexec.exe\" -ArgumentList \"/qn /norestart /i $env:TEMP\\$installer PUPPET_MASTER_SERVER=$puppet_master\" -Wait -Passthru).ExitCode\n\n\n# Custom User-data\n\n\n\nRename-Computer -NewName $hostname -Force -Restart\n\u003c/powershell\u003e\n"
                }
            },
            "resources": {
                "data.template_file.linux": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "d3fdeb57d637f39050e02ed462c65e5e694584c3618dfb64378718d25ebe017e",
                        "attributes": {
                            "id": "d3fdeb57d637f39050e02ed462c65e5e694584c3618dfb64378718d25ebe017e",
                            "rendered": "#!/bin/bash\n\n# Configure the web-proxy\necho \"proxy=http://secureproxy.segment.domain.com:880\" \u003e\u003e /etc/yum.conf\n\n\n# Set the hostname\nhostnamectl set-hostname PMDXYZA1012\necho \"PMDXYZA1012\" \u003e /etc/hostname\necho \"127.0.0.1 PMDXYZA1012 localhost.localdomain localhost\" \u003e /etc/hosts\necho \"\nNETWORKING=yes\nNOZEROCONF=yes\nNETWORKING_IPV6=no\nHOSTNAME=PMDXYZA1012\" \u003e /etc/sysconfig/network\necho \"preserve_hostname: true\" \u003e\u003e /etc/cloud/cloud.cfg\n\n\n# Update Packages\nyum update -y\n\n\n# Install Puppet\ncurl -k https://acme-puppet.segment.domain.com:8080/packages/current/install.bash | bash\n\n\n# Custom User Data\n\n",
                            "template": "#!/bin/bash\n\n# Configure the web-proxy\necho \"proxy=${proxy_url}\" \u003e\u003e /etc/yum.conf\n\n\n# Set the hostname\nhostnamectl set-hostname ${hostname}\necho \"${hostname}\" \u003e /etc/hostname\necho \"127.0.0.1 ${hostname} localhost.localdomain localhost\" \u003e /etc/hosts\necho \"\nNETWORKING=yes\nNOZEROCONF=yes\nNETWORKING_IPV6=no\nHOSTNAME=${hostname}\" \u003e /etc/sysconfig/network\necho \"preserve_hostname: true\" \u003e\u003e /etc/cloud/cloud.cfg\n\n\n# Update Packages\nyum update -y\n\n\n# Install Puppet\ncurl -k https://${puppet_master_domain}:8080/packages/current/install.bash | bash\n\n\n# Custom User Data\n${user_data}\n",
                            "vars.%": "4",
                            "vars.hostname": "PMDXYZA1012",
                            "vars.proxy_url": "http://secureproxy.segment.domain.com:880",
                            "vars.puppet_master_domain": "acme-puppet.segment.domain.com",
                            "vars.user_data": ""
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                },
                "data.template_file.windows": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "af9dc9023427ee8630f4226214245af6aabf88fb93889e199b5c9cd079f6aa20",
                        "attributes": {
                            "id": "af9dc9023427ee8630f4226214245af6aabf88fb93889e199b5c9cd079f6aa20",
                            "rendered": "\u003cpowershell\u003e\n\nSet-ExecutionPolicy -executionpolicy remotesigned -force\nImport-Module AWSPowershell\n\n$hostname = \"PMDXYZA1012\"\n$installer = \"puppet-agent-1.5.2-x64.msi\"\n$installer_bucket = \"myproject-acme-software-media-share\"\n$puppet_master = \"acme-puppet.segment.domain.com\"\n\nfunction getIdDocVal($key, $instIdDoc=\"\") {\n    if ($instIdDoc -eq \"\") {\n        $instIdDoc = getEc2Metadata('dynamic/instance-identity/document') | ConvertFrom-Json\n    }\n\n    if($instIdDoc.PSObject.Properties.Match($key).Count) {\n        return $instIdDoc | Select -ExpandProperty $key\n    }\n}\n\nfunction getEc2Metadata($path) {\n    $url = \"http://169.254.169.254/latest/$path\"\n    try {\n        $metadata = (Invoke-WebRequest -Uri $url -TimeoutSec 0)\n\n        if ($?) {\n            return $metadata\n        } else {\n            log \"Failed to get EC2 Metadata for $path\" red\n        }\n    } catch {\n        log \"Failed to get EC2 Metadata for $path\" red\n        Break\n    }\n}\n\nfunction getInstanceId() {\n    return (getEc2Metadata('meta-data/instance-id')).Content\n}\n\nfunction setHostname($hostname) {\n    if (([System.Net.Dns]::GetHostName()) -ne $hostname) {\n        log \"Setting hostname; current host $([System.Net.Dns]::GetHostName()) does not match $hostname\"\n        Rename-Computer -NewName $hostname -Force -Restart\n    }\n}\n\n# Set up the web proxy for KO\n\n$reg = \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\"\n\nSet-ItemProperty -Path $reg -Name ProxyServer -Value \"http://secureproxy.segment.domain.com:880\"\nSet-ItemProperty -Path $reg -Name ProxyEnable -Value 1\nSet-ItemProperty -Path $reg -Name ProxyOverride -Value \"*domain.com;231.92.*'10.*;169.254.169.254;\u003clocal\u003e\"\n\n# download the puppet agent from local bucket and install\nCopy-S3Object -BucketName $installer_bucket -Key $installer -LocalFile $env:TEMP\\$installer\n\n# msiexec /qn /norestart /i puppet-agent-\u003cVERSION\u003e-x64.msi PUPPET_MASTER_SERVER=puppet.example.com\n(Start-Process -FilePath \"msiexec.exe\" -ArgumentList \"/qn /norestart /i $env:TEMP\\$installer PUPPET_MASTER_SERVER=$puppet_master\" -Wait -Passthru).ExitCode\n\n\n# Custom User-data\n\n\n\nRename-Computer -NewName $hostname -Force -Restart\n\u003c/powershell\u003e\n",
                            "template": "\u003cpowershell\u003e\n\nSet-ExecutionPolicy -executionpolicy remotesigned -force\nImport-Module AWSPowershell\n\n$hostname = \"${hostname}\"\n$installer = \"${installer}\"\n$installer_bucket = \"${installer_bucket}\"\n$puppet_master = \"${puppet_master_domain}\"\n\nfunction getIdDocVal($key, $instIdDoc=\"\") {\n    if ($instIdDoc -eq \"\") {\n        $instIdDoc = getEc2Metadata('dynamic/instance-identity/document') | ConvertFrom-Json\n    }\n\n    if($instIdDoc.PSObject.Properties.Match($key).Count) {\n        return $instIdDoc | Select -ExpandProperty $key\n    }\n}\n\nfunction getEc2Metadata($path) {\n    $url = \"http://169.254.169.254/latest/$path\"\n    try {\n        $metadata = (Invoke-WebRequest -Uri $url -TimeoutSec 0)\n\n        if ($?) {\n            return $metadata\n        } else {\n            log \"Failed to get EC2 Metadata for $path\" red\n        }\n    } catch {\n        log \"Failed to get EC2 Metadata for $path\" red\n        Break\n    }\n}\n\nfunction getInstanceId() {\n    return (getEc2Metadata('meta-data/instance-id')).Content\n}\n\nfunction setHostname($hostname) {\n    if (([System.Net.Dns]::GetHostName()) -ne $hostname) {\n        log \"Setting hostname; current host $([System.Net.Dns]::GetHostName()) does not match $hostname\"\n        Rename-Computer -NewName $hostname -Force -Restart\n    }\n}\n\n# Set up the web proxy for KO\n\n$reg = \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\"\n\nSet-ItemProperty -Path $reg -Name ProxyServer -Value \"${proxy_url}\"\nSet-ItemProperty -Path $reg -Name ProxyEnable -Value 1\nSet-ItemProperty -Path $reg -Name ProxyOverride -Value \"${proxy_override}\"\n\n# download the puppet agent from local bucket and install\nCopy-S3Object -BucketName $installer_bucket -Key $installer -LocalFile $env:TEMP\\$installer\n\n# msiexec /qn /norestart /i puppet-agent-\u003cVERSION\u003e-x64.msi PUPPET_MASTER_SERVER=puppet.example.com\n(Start-Process -FilePath \"msiexec.exe\" -ArgumentList \"/qn /norestart /i $env:TEMP\\$installer PUPPET_MASTER_SERVER=$puppet_master\" -Wait -Passthru).ExitCode\n\n\n# Custom User-data\n${user_data}\n\n\nRename-Computer -NewName $hostname -Force -Restart\n\u003c/powershell\u003e\n",
                            "vars.%": "7",
                            "vars.hostname": "PMDXYZA1012",
                            "vars.installer": "puppet-agent-1.5.2-x64.msi",
                            "vars.installer_bucket": "myproject-acme-software-media-share",
                            "vars.proxy_override": "*domain.com;231.92.*'10.*;169.254.169.254;\u003clocal\u003e",
                            "vars.proxy_url": "http://secureproxy.segment.domain.com:880",
                            "vars.puppet_master_domain": "acme-puppet.segment.domain.com",
                            "vars.user_data": ""
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                }
            },
            "depends_on": []
        },
        {
            "path": [
                "root",
                "XYZ_CWPXYZA1000_user_data"
            ],
            "outputs": {
                "linux": {
                    "sensitive": false,
                    "type": "string",
                    "value": "#!/bin/bash\n\n# Configure the web-proxy\necho \"proxy=http://secureproxy.segment.domain.com:880\" \u003e\u003e /etc/yum.conf\n\n\n# Set the hostname\nhostnamectl set-hostname CWPXYZA1000\necho \"CWPXYZA1000\" \u003e /etc/hostname\necho \"127.0.0.1 CWPXYZA1000 localhost.localdomain localhost\" \u003e /etc/hosts\necho \"\nNETWORKING=yes\nNOZEROCONF=yes\nNETWORKING_IPV6=no\nHOSTNAME=CWPXYZA1000\" \u003e /etc/sysconfig/network\necho \"preserve_hostname: true\" \u003e\u003e /etc/cloud/cloud.cfg\n\n\n# Update Packages\nyum update -y\n\n\n# Install Puppet\ncurl -k https://acme-puppet.segment.domain.com:8080/packages/current/install.bash | bash\n\n\n# Custom User Data\n\n"
                },
                "windows": {
                    "sensitive": false,
                    "type": "string",
                    "value": "\u003cpowershell\u003e\n\nSet-ExecutionPolicy -executionpolicy remotesigned -force\nImport-Module AWSPowershell\n\n$hostname = \"CWPXYZA1000\"\n$installer = \"puppet-agent-1.5.2-x64.msi\"\n$installer_bucket = \"myproject-acme-software-media-share\"\n$puppet_master = \"acme-puppet.segment.domain.com\"\n\nfunction getIdDocVal($key, $instIdDoc=\"\") {\n    if ($instIdDoc -eq \"\") {\n        $instIdDoc = getEc2Metadata('dynamic/instance-identity/document') | ConvertFrom-Json\n    }\n\n    if($instIdDoc.PSObject.Properties.Match($key).Count) {\n        return $instIdDoc | Select -ExpandProperty $key\n    }\n}\n\nfunction getEc2Metadata($path) {\n    $url = \"http://169.254.169.254/latest/$path\"\n    try {\n        $metadata = (Invoke-WebRequest -Uri $url -TimeoutSec 0)\n\n        if ($?) {\n            return $metadata\n        } else {\n            log \"Failed to get EC2 Metadata for $path\" red\n        }\n    } catch {\n        log \"Failed to get EC2 Metadata for $path\" red\n        Break\n    }\n}\n\nfunction getInstanceId() {\n    return (getEc2Metadata('meta-data/instance-id')).Content\n}\n\nfunction setHostname($hostname) {\n    if (([System.Net.Dns]::GetHostName()) -ne $hostname) {\n        log \"Setting hostname; current host $([System.Net.Dns]::GetHostName()) does not match $hostname\"\n        Rename-Computer -NewName $hostname -Force -Restart\n    }\n}\n\n# Set up the web proxy for KO\n\n$reg = \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\"\n\nSet-ItemProperty -Path $reg -Name ProxyServer -Value \"http://secureproxy.segment.domain.com:880\"\nSet-ItemProperty -Path $reg -Name ProxyEnable -Value 1\nSet-ItemProperty -Path $reg -Name ProxyOverride -Value \"*domain.com;231.92.*'10.*;169.254.169.254;\u003clocal\u003e\"\n\n# download the puppet agent from local bucket and install\nCopy-S3Object -BucketName $installer_bucket -Key $installer -LocalFile $env:TEMP\\$installer\n\n# msiexec /qn /norestart /i puppet-agent-\u003cVERSION\u003e-x64.msi PUPPET_MASTER_SERVER=puppet.example.com\n(Start-Process -FilePath \"msiexec.exe\" -ArgumentList \"/qn /norestart /i $env:TEMP\\$installer PUPPET_MASTER_SERVER=$puppet_master\" -Wait -Passthru).ExitCode\n\n\n# Custom User-data\n\n\n\nRename-Computer -NewName $hostname -Force -Restart\n\u003c/powershell\u003e\n"
                }
            },
            "resources": {},
            "depends_on": []
        },
        {
            "path": [
                "root",
                "XYZ_CWPXYZA1001_user_data"
            ],
            "outputs": {
                "linux": {
                    "sensitive": false,
                    "type": "string",
                    "value": "#!/bin/bash\n\n# Configure the web-proxy\necho \"proxy=http://secureproxy.segment.domain.com:880\" \u003e\u003e /etc/yum.conf\n\n\n# Set the hostname\nhostnamectl set-hostname CWPXYZA1001\necho \"CWPXYZA1001\" \u003e /etc/hostname\necho \"127.0.0.1 CWPXYZA1001 localhost.localdomain localhost\" \u003e /etc/hosts\necho \"\nNETWORKING=yes\nNOZEROCONF=yes\nNETWORKING_IPV6=no\nHOSTNAME=CWPXYZA1001\" \u003e /etc/sysconfig/network\necho \"preserve_hostname: true\" \u003e\u003e /etc/cloud/cloud.cfg\n\n\n# Update Packages\nyum update -y\n\n\n# Install Puppet\ncurl -k https://acme-puppet.segment.domain.com:8080/packages/current/install.bash | bash\n\n\n# Custom User Data\n\n"
                },
                "windows": {
                    "sensitive": false,
                    "type": "string",
                    "value": "\u003cpowershell\u003e\n\nSet-ExecutionPolicy -executionpolicy remotesigned -force\nImport-Module AWSPowershell\n\n$hostname = \"CWPXYZA1001\"\n$installer = \"puppet-agent-1.5.2-x64.msi\"\n$installer_bucket = \"myproject-acme-software-media-share\"\n$puppet_master = \"acme-puppet.segment.domain.com\"\n\nfunction getIdDocVal($key, $instIdDoc=\"\") {\n    if ($instIdDoc -eq \"\") {\n        $instIdDoc = getEc2Metadata('dynamic/instance-identity/document') | ConvertFrom-Json\n    }\n\n    if($instIdDoc.PSObject.Properties.Match($key).Count) {\n        return $instIdDoc | Select -ExpandProperty $key\n    }\n}\n\nfunction getEc2Metadata($path) {\n    $url = \"http://169.254.169.254/latest/$path\"\n    try {\n        $metadata = (Invoke-WebRequest -Uri $url -TimeoutSec 0)\n\n        if ($?) {\n            return $metadata\n        } else {\n            log \"Failed to get EC2 Metadata for $path\" red\n        }\n    } catch {\n        log \"Failed to get EC2 Metadata for $path\" red\n        Break\n    }\n}\n\nfunction getInstanceId() {\n    return (getEc2Metadata('meta-data/instance-id')).Content\n}\n\nfunction setHostname($hostname) {\n    if (([System.Net.Dns]::GetHostName()) -ne $hostname) {\n        log \"Setting hostname; current host $([System.Net.Dns]::GetHostName()) does not match $hostname\"\n        Rename-Computer -NewName $hostname -Force -Restart\n    }\n}\n\n# Set up the web proxy for KO\n\n$reg = \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\"\n\nSet-ItemProperty -Path $reg -Name ProxyServer -Value \"http://secureproxy.segment.domain.com:880\"\nSet-ItemProperty -Path $reg -Name ProxyEnable -Value 1\nSet-ItemProperty -Path $reg -Name ProxyOverride -Value \"*domain.com;231.92.*'10.*;169.254.169.254;\u003clocal\u003e\"\n\n# download the puppet agent from local bucket and install\nCopy-S3Object -BucketName $installer_bucket -Key $installer -LocalFile $env:TEMP\\$installer\n\n# msiexec /qn /norestart /i puppet-agent-\u003cVERSION\u003e-x64.msi PUPPET_MASTER_SERVER=puppet.example.com\n(Start-Process -FilePath \"msiexec.exe\" -ArgumentList \"/qn /norestart /i $env:TEMP\\$installer PUPPET_MASTER_SERVER=$puppet_master\" -Wait -Passthru).ExitCode\n\n\n# Custom User-data\n\n\n\nRename-Computer -NewName $hostname -Force -Restart\n\u003c/powershell\u003e\n"
                }
            },
            "resources": {},
            "depends_on": []
        },
        {
            "path": [
                "root",
                "XYZ_CWPXYZA1003_user_data"
            ],
            "outputs": {
                "linux": {
                    "sensitive": false,
                    "type": "string",
                    "value": "#!/bin/bash\n\n# Configure the web-proxy\necho \"proxy=http://secureproxy.segment.domain.com:880\" \u003e\u003e /etc/yum.conf\n\n\n# Set the hostname\nhostnamectl set-hostname CWPXYZA1003\necho \"CWPXYZA1003\" \u003e /etc/hostname\necho \"127.0.0.1 CWPXYZA1003 localhost.localdomain localhost\" \u003e /etc/hosts\necho \"\nNETWORKING=yes\nNOZEROCONF=yes\nNETWORKING_IPV6=no\nHOSTNAME=CWPXYZA1003\" \u003e /etc/sysconfig/network\necho \"preserve_hostname: true\" \u003e\u003e /etc/cloud/cloud.cfg\n\n\n# Update Packages\nyum update -y\n\n\n# Install Puppet\ncurl -k https://acme-puppet.segment.domain.com:8080/packages/current/install.bash | bash\n\n\n# Custom User Data\n\n"
                },
                "windows": {
                    "sensitive": false,
                    "type": "string",
                    "value": "\u003cpowershell\u003e\n\nSet-ExecutionPolicy -executionpolicy remotesigned -force\nImport-Module AWSPowershell\n\n$hostname = \"CWPXYZA1003\"\n$installer = \"puppet-agent-1.5.2-x64.msi\"\n$installer_bucket = \"myproject-acme-software-media-share\"\n$puppet_master = \"acme-puppet.segment.domain.com\"\n\nfunction getIdDocVal($key, $instIdDoc=\"\") {\n    if ($instIdDoc -eq \"\") {\n        $instIdDoc = getEc2Metadata('dynamic/instance-identity/document') | ConvertFrom-Json\n    }\n\n    if($instIdDoc.PSObject.Properties.Match($key).Count) {\n        return $instIdDoc | Select -ExpandProperty $key\n    }\n}\n\nfunction getEc2Metadata($path) {\n    $url = \"http://169.254.169.254/latest/$path\"\n    try {\n        $metadata = (Invoke-WebRequest -Uri $url -TimeoutSec 0)\n\n        if ($?) {\n            return $metadata\n        } else {\n            log \"Failed to get EC2 Metadata for $path\" red\n        }\n    } catch {\n        log \"Failed to get EC2 Metadata for $path\" red\n        Break\n    }\n}\n\nfunction getInstanceId() {\n    return (getEc2Metadata('meta-data/instance-id')).Content\n}\n\nfunction setHostname($hostname) {\n    if (([System.Net.Dns]::GetHostName()) -ne $hostname) {\n        log \"Setting hostname; current host $([System.Net.Dns]::GetHostName()) does not match $hostname\"\n        Rename-Computer -NewName $hostname -Force -Restart\n    }\n}\n\n# Set up the web proxy for KO\n\n$reg = \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\"\n\nSet-ItemProperty -Path $reg -Name ProxyServer -Value \"http://secureproxy.segment.domain.com:880\"\nSet-ItemProperty -Path $reg -Name ProxyEnable -Value 1\nSet-ItemProperty -Path $reg -Name ProxyOverride -Value \"*domain.com;231.92.*'10.*;169.254.169.254;\u003clocal\u003e\"\n\n# download the puppet agent from local bucket and install\nCopy-S3Object -BucketName $installer_bucket -Key $installer -LocalFile $env:TEMP\\$installer\n\n# msiexec /qn /norestart /i puppet-agent-\u003cVERSION\u003e-x64.msi PUPPET_MASTER_SERVER=puppet.example.com\n(Start-Process -FilePath \"msiexec.exe\" -ArgumentList \"/qn /norestart /i $env:TEMP\\$installer PUPPET_MASTER_SERVER=$puppet_master\" -Wait -Passthru).ExitCode\n\n\n# Custom User-data\n\n\n\nRename-Computer -NewName $hostname -Force -Restart\n\u003c/powershell\u003e\n"
                }
            },
            "resources": {},
            "depends_on": []
        },
        {
            "path": [
                "root",
                "XYZ_CWPXYZA1004_user_data"
            ],
            "outputs": {
                "linux": {
                    "sensitive": false,
                    "type": "string",
                    "value": "#!/bin/bash\n\n# Configure the web-proxy\necho \"proxy=http://secureproxy.segment.domain.com:880\" \u003e\u003e /etc/yum.conf\n\n\n# Set the hostname\nhostnamectl set-hostname CWPXYZA1004\necho \"CWPXYZA1004\" \u003e /etc/hostname\necho \"127.0.0.1 CWPXYZA1004 localhost.localdomain localhost\" \u003e /etc/hosts\necho \"\nNETWORKING=yes\nNOZEROCONF=yes\nNETWORKING_IPV6=no\nHOSTNAME=CWPXYZA1004\" \u003e /etc/sysconfig/network\necho \"preserve_hostname: true\" \u003e\u003e /etc/cloud/cloud.cfg\n\n\n# Update Packages\nyum update -y\n\n\n# Install Puppet\ncurl -k https://acme-puppet.segment.domain.com:8080/packages/current/install.bash | bash\n\n\n# Custom User Data\n\n"
                },
                "windows": {
                    "sensitive": false,
                    "type": "string",
                    "value": "\u003cpowershell\u003e\n\nSet-ExecutionPolicy -executionpolicy remotesigned -force\nImport-Module AWSPowershell\n\n$hostname = \"CWPXYZA1004\"\n$installer = \"puppet-agent-1.5.2-x64.msi\"\n$installer_bucket = \"myproject-acme-software-media-share\"\n$puppet_master = \"acme-puppet.segment.domain.com\"\n\nfunction getIdDocVal($key, $instIdDoc=\"\") {\n    if ($instIdDoc -eq \"\") {\n        $instIdDoc = getEc2Metadata('dynamic/instance-identity/document') | ConvertFrom-Json\n    }\n\n    if($instIdDoc.PSObject.Properties.Match($key).Count) {\n        return $instIdDoc | Select -ExpandProperty $key\n    }\n}\n\nfunction getEc2Metadata($path) {\n    $url = \"http://169.254.169.254/latest/$path\"\n    try {\n        $metadata = (Invoke-WebRequest -Uri $url -TimeoutSec 0)\n\n        if ($?) {\n            return $metadata\n        } else {\n            log \"Failed to get EC2 Metadata for $path\" red\n        }\n    } catch {\n        log \"Failed to get EC2 Metadata for $path\" red\n        Break\n    }\n}\n\nfunction getInstanceId() {\n    return (getEc2Metadata('meta-data/instance-id')).Content\n}\n\nfunction setHostname($hostname) {\n    if (([System.Net.Dns]::GetHostName()) -ne $hostname) {\n        log \"Setting hostname; current host $([System.Net.Dns]::GetHostName()) does not match $hostname\"\n        Rename-Computer -NewName $hostname -Force -Restart\n    }\n}\n\n# Set up the web proxy for KO\n\n$reg = \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\"\n\nSet-ItemProperty -Path $reg -Name ProxyServer -Value \"http://secureproxy.segment.domain.com:880\"\nSet-ItemProperty -Path $reg -Name ProxyEnable -Value 1\nSet-ItemProperty -Path $reg -Name ProxyOverride -Value \"*domain.com;231.92.*'10.*;169.254.169.254;\u003clocal\u003e\"\n\n# download the puppet agent from local bucket and install\nCopy-S3Object -BucketName $installer_bucket -Key $installer -LocalFile $env:TEMP\\$installer\n\n# msiexec /qn /norestart /i puppet-agent-\u003cVERSION\u003e-x64.msi PUPPET_MASTER_SERVER=puppet.example.com\n(Start-Process -FilePath \"msiexec.exe\" -ArgumentList \"/qn /norestart /i $env:TEMP\\$installer PUPPET_MASTER_SERVER=$puppet_master\" -Wait -Passthru).ExitCode\n\n\n# Custom User-data\n\n\n\nRename-Computer -NewName $hostname -Force -Restart\n\u003c/powershell\u003e\n"
                }
            },
            "resources": {},
            "depends_on": []
        },
        {
            "path": [
                "root",
                "XYZ_CWPXYZA1005_user_data"
            ],
            "outputs": {
                "linux": {
                    "sensitive": false,
                    "type": "string",
                    "value": "#!/bin/bash\n\n# Configure the web-proxy\necho \"proxy=http://secureproxy.segment.domain.com:880\" \u003e\u003e /etc/yum.conf\n\n\n# Set the hostname\nhostnamectl set-hostname CWPXYZA1005\necho \"CWPXYZA1005\" \u003e /etc/hostname\necho \"127.0.0.1 CWPXYZA1005 localhost.localdomain localhost\" \u003e /etc/hosts\necho \"\nNETWORKING=yes\nNOZEROCONF=yes\nNETWORKING_IPV6=no\nHOSTNAME=CWPXYZA1005\" \u003e /etc/sysconfig/network\necho \"preserve_hostname: true\" \u003e\u003e /etc/cloud/cloud.cfg\n\n\n# Update Packages\nyum update -y\n\n\n# Install Puppet\ncurl -k https://acme-puppet.segment.domain.com:8080/packages/current/install.bash | bash\n\n\n# Custom User Data\n\n"
                },
                "windows": {
                    "sensitive": false,
                    "type": "string",
                    "value": "\u003cpowershell\u003e\n\nSet-ExecutionPolicy -executionpolicy remotesigned -force\nImport-Module AWSPowershell\n\n$hostname = \"CWPXYZA1005\"\n$installer = \"puppet-agent-1.5.2-x64.msi\"\n$installer_bucket = \"myproject-acme-software-media-share\"\n$puppet_master = \"acme-puppet.segment.domain.com\"\n\nfunction getIdDocVal($key, $instIdDoc=\"\") {\n    if ($instIdDoc -eq \"\") {\n        $instIdDoc = getEc2Metadata('dynamic/instance-identity/document') | ConvertFrom-Json\n    }\n\n    if($instIdDoc.PSObject.Properties.Match($key).Count) {\n        return $instIdDoc | Select -ExpandProperty $key\n    }\n}\n\nfunction getEc2Metadata($path) {\n    $url = \"http://169.254.169.254/latest/$path\"\n    try {\n        $metadata = (Invoke-WebRequest -Uri $url -TimeoutSec 0)\n\n        if ($?) {\n            return $metadata\n        } else {\n            log \"Failed to get EC2 Metadata for $path\" red\n        }\n    } catch {\n        log \"Failed to get EC2 Metadata for $path\" red\n        Break\n    }\n}\n\nfunction getInstanceId() {\n    return (getEc2Metadata('meta-data/instance-id')).Content\n}\n\nfunction setHostname($hostname) {\n    if (([System.Net.Dns]::GetHostName()) -ne $hostname) {\n        log \"Setting hostname; current host $([System.Net.Dns]::GetHostName()) does not match $hostname\"\n        Rename-Computer -NewName $hostname -Force -Restart\n    }\n}\n\n# Set up the web proxy for KO\n\n$reg = \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\"\n\nSet-ItemProperty -Path $reg -Name ProxyServer -Value \"http://secureproxy.segment.domain.com:880\"\nSet-ItemProperty -Path $reg -Name ProxyEnable -Value 1\nSet-ItemProperty -Path $reg -Name ProxyOverride -Value \"*domain.com;231.92.*'10.*;169.254.169.254;\u003clocal\u003e\"\n\n# download the puppet agent from local bucket and install\nCopy-S3Object -BucketName $installer_bucket -Key $installer -LocalFile $env:TEMP\\$installer\n\n# msiexec /qn /norestart /i puppet-agent-\u003cVERSION\u003e-x64.msi PUPPET_MASTER_SERVER=puppet.example.com\n(Start-Process -FilePath \"msiexec.exe\" -ArgumentList \"/qn /norestart /i $env:TEMP\\$installer PUPPET_MASTER_SERVER=$puppet_master\" -Wait -Passthru).ExitCode\n\n\n# Custom User-data\n\n\n\nRename-Computer -NewName $hostname -Force -Restart\n\u003c/powershell\u003e\n"
                }
            },
            "resources": {},
            "depends_on": []
        },
        {
            "path": [
                "root",
                "XYZ_CWPXYZA1006_user_data"
            ],
            "outputs": {
                "linux": {
                    "sensitive": false,
                    "type": "string",
                    "value": "#!/bin/bash\n\n# Configure the web-proxy\necho \"proxy=http://secureproxy.segment.domain.com:880\" \u003e\u003e /etc/yum.conf\n\n\n# Set the hostname\nhostnamectl set-hostname CWPXYZA1006\necho \"CWPXYZA1006\" \u003e /etc/hostname\necho \"127.0.0.1 CWPXYZA1006 localhost.localdomain localhost\" \u003e /etc/hosts\necho \"\nNETWORKING=yes\nNOZEROCONF=yes\nNETWORKING_IPV6=no\nHOSTNAME=CWPXYZA1006\" \u003e /etc/sysconfig/network\necho \"preserve_hostname: true\" \u003e\u003e /etc/cloud/cloud.cfg\n\n\n# Update Packages\nyum update -y\n\n\n# Install Puppet\ncurl -k https://acme-puppet.segment.domain.com:8080/packages/current/install.bash | bash\n\n\n# Custom User Data\n\n"
                },
                "windows": {
                    "sensitive": false,
                    "type": "string",
                    "value": "\u003cpowershell\u003e\n\nSet-ExecutionPolicy -executionpolicy remotesigned -force\nImport-Module AWSPowershell\n\n$hostname = \"CWPXYZA1006\"\n$installer = \"puppet-agent-1.5.2-x64.msi\"\n$installer_bucket = \"myproject-acme-software-media-share\"\n$puppet_master = \"acme-puppet.segment.domain.com\"\n\nfunction getIdDocVal($key, $instIdDoc=\"\") {\n    if ($instIdDoc -eq \"\") {\n        $instIdDoc = getEc2Metadata('dynamic/instance-identity/document') | ConvertFrom-Json\n    }\n\n    if($instIdDoc.PSObject.Properties.Match($key).Count) {\n        return $instIdDoc | Select -ExpandProperty $key\n    }\n}\n\nfunction getEc2Metadata($path) {\n    $url = \"http://169.254.169.254/latest/$path\"\n    try {\n        $metadata = (Invoke-WebRequest -Uri $url -TimeoutSec 0)\n\n        if ($?) {\n            return $metadata\n        } else {\n            log \"Failed to get EC2 Metadata for $path\" red\n        }\n    } catch {\n        log \"Failed to get EC2 Metadata for $path\" red\n        Break\n    }\n}\n\nfunction getInstanceId() {\n    return (getEc2Metadata('meta-data/instance-id')).Content\n}\n\nfunction setHostname($hostname) {\n    if (([System.Net.Dns]::GetHostName()) -ne $hostname) {\n        log \"Setting hostname; current host $([System.Net.Dns]::GetHostName()) does not match $hostname\"\n        Rename-Computer -NewName $hostname -Force -Restart\n    }\n}\n\n# Set up the web proxy for KO\n\n$reg = \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\"\n\nSet-ItemProperty -Path $reg -Name ProxyServer -Value \"http://secureproxy.segment.domain.com:880\"\nSet-ItemProperty -Path $reg -Name ProxyEnable -Value 1\nSet-ItemProperty -Path $reg -Name ProxyOverride -Value \"*domain.com;231.92.*'10.*;169.254.169.254;\u003clocal\u003e\"\n\n# download the puppet agent from local bucket and install\nCopy-S3Object -BucketName $installer_bucket -Key $installer -LocalFile $env:TEMP\\$installer\n\n# msiexec /qn /norestart /i puppet-agent-\u003cVERSION\u003e-x64.msi PUPPET_MASTER_SERVER=puppet.example.com\n(Start-Process -FilePath \"msiexec.exe\" -ArgumentList \"/qn /norestart /i $env:TEMP\\$installer PUPPET_MASTER_SERVER=$puppet_master\" -Wait -Passthru).ExitCode\n\n\n# Custom User-data\n\n\n\nRename-Computer -NewName $hostname -Force -Restart\n\u003c/powershell\u003e\n"
                }
            },
            "resources": {},
            "depends_on": []
        },
        {
            "path": [
                "root",
                "XYZ_CWPXYZA1010_user_data"
            ],
            "outputs": {
                "linux": {
                    "sensitive": false,
                    "type": "string",
                    "value": "#!/bin/bash\n\n# Configure the web-proxy\necho \"proxy=http://secureproxy.segment.domain.com:880\" \u003e\u003e /etc/yum.conf\n\n\n# Set the hostname\nhostnamectl set-hostname CWPXYZA1010\necho \"CWPXYZA1010\" \u003e /etc/hostname\necho \"127.0.0.1 CWPXYZA1010 localhost.localdomain localhost\" \u003e /etc/hosts\necho \"\nNETWORKING=yes\nNOZEROCONF=yes\nNETWORKING_IPV6=no\nHOSTNAME=CWPXYZA1010\" \u003e /etc/sysconfig/network\necho \"preserve_hostname: true\" \u003e\u003e /etc/cloud/cloud.cfg\n\n\n# Update Packages\nyum update -y\n\n\n# Install Puppet\ncurl -k https://acme-puppet.segment.domain.com:8080/packages/current/install.bash | bash\n\n\n# Custom User Data\n\n"
                },
                "windows": {
                    "sensitive": false,
                    "type": "string",
                    "value": "\u003cpowershell\u003e\n\nSet-ExecutionPolicy -executionpolicy remotesigned -force\nImport-Module AWSPowershell\n\n$hostname = \"CWPXYZA1010\"\n$installer = \"puppet-agent-1.5.2-x64.msi\"\n$installer_bucket = \"myproject-acme-software-media-share\"\n$puppet_master = \"acme-puppet.segment.domain.com\"\n\nfunction getIdDocVal($key, $instIdDoc=\"\") {\n    if ($instIdDoc -eq \"\") {\n        $instIdDoc = getEc2Metadata('dynamic/instance-identity/document') | ConvertFrom-Json\n    }\n\n    if($instIdDoc.PSObject.Properties.Match($key).Count) {\n        return $instIdDoc | Select -ExpandProperty $key\n    }\n}\n\nfunction getEc2Metadata($path) {\n    $url = \"http://169.254.169.254/latest/$path\"\n    try {\n        $metadata = (Invoke-WebRequest -Uri $url -TimeoutSec 0)\n\n        if ($?) {\n            return $metadata\n        } else {\n            log \"Failed to get EC2 Metadata for $path\" red\n        }\n    } catch {\n        log \"Failed to get EC2 Metadata for $path\" red\n        Break\n    }\n}\n\nfunction getInstanceId() {\n    return (getEc2Metadata('meta-data/instance-id')).Content\n}\n\nfunction setHostname($hostname) {\n    if (([System.Net.Dns]::GetHostName()) -ne $hostname) {\n        log \"Setting hostname; current host $([System.Net.Dns]::GetHostName()) does not match $hostname\"\n        Rename-Computer -NewName $hostname -Force -Restart\n    }\n}\n\n# Set up the web proxy for KO\n\n$reg = \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\"\n\nSet-ItemProperty -Path $reg -Name ProxyServer -Value \"http://secureproxy.segment.domain.com:880\"\nSet-ItemProperty -Path $reg -Name ProxyEnable -Value 1\nSet-ItemProperty -Path $reg -Name ProxyOverride -Value \"*domain.com;231.92.*'10.*;169.254.169.254;\u003clocal\u003e\"\n\n# download the puppet agent from local bucket and install\nCopy-S3Object -BucketName $installer_bucket -Key $installer -LocalFile $env:TEMP\\$installer\n\n# msiexec /qn /norestart /i puppet-agent-\u003cVERSION\u003e-x64.msi PUPPET_MASTER_SERVER=puppet.example.com\n(Start-Process -FilePath \"msiexec.exe\" -ArgumentList \"/qn /norestart /i $env:TEMP\\$installer PUPPET_MASTER_SERVER=$puppet_master\" -Wait -Passthru).ExitCode\n\n\n# Custom User-data\n\n\n\nRename-Computer -NewName $hostname -Force -Restart\n\u003c/powershell\u003e\n"
                }
            },
            "resources": {},
            "depends_on": []
        },
        {
            "path": [
                "root",
                "XYZ_CWPXYZA1011_user_data"
            ],
            "outputs": {
                "linux": {
                    "sensitive": false,
                    "type": "string",
                    "value": "#!/bin/bash\n\n# Configure the web-proxy\necho \"proxy=http://secureproxy.segment.domain.com:880\" \u003e\u003e /etc/yum.conf\n\n\n# Set the hostname\nhostnamectl set-hostname CWPXYZA1011\necho \"CWPXYZA1011\" \u003e /etc/hostname\necho \"127.0.0.1 CWPXYZA1011 localhost.localdomain localhost\" \u003e /etc/hosts\necho \"\nNETWORKING=yes\nNOZEROCONF=yes\nNETWORKING_IPV6=no\nHOSTNAME=CWPXYZA1011\" \u003e /etc/sysconfig/network\necho \"preserve_hostname: true\" \u003e\u003e /etc/cloud/cloud.cfg\n\n\n# Update Packages\nyum update -y\n\n\n# Install Puppet\ncurl -k https://acme-puppet.segment.domain.com:8080/packages/current/install.bash | bash\n\n\n# Custom User Data\n\n"
                },
                "windows": {
                    "sensitive": false,
                    "type": "string",
                    "value": "\u003cpowershell\u003e\n\nSet-ExecutionPolicy -executionpolicy remotesigned -force\nImport-Module AWSPowershell\n\n$hostname = \"CWPXYZA1011\"\n$installer = \"puppet-agent-1.5.2-x64.msi\"\n$installer_bucket = \"myproject-acme-software-media-share\"\n$puppet_master = \"acme-puppet.segment.domain.com\"\n\nfunction getIdDocVal($key, $instIdDoc=\"\") {\n    if ($instIdDoc -eq \"\") {\n        $instIdDoc = getEc2Metadata('dynamic/instance-identity/document') | ConvertFrom-Json\n    }\n\n    if($instIdDoc.PSObject.Properties.Match($key).Count) {\n        return $instIdDoc | Select -ExpandProperty $key\n    }\n}\n\nfunction getEc2Metadata($path) {\n    $url = \"http://169.254.169.254/latest/$path\"\n    try {\n        $metadata = (Invoke-WebRequest -Uri $url -TimeoutSec 0)\n\n        if ($?) {\n            return $metadata\n        } else {\n            log \"Failed to get EC2 Metadata for $path\" red\n        }\n    } catch {\n        log \"Failed to get EC2 Metadata for $path\" red\n        Break\n    }\n}\n\nfunction getInstanceId() {\n    return (getEc2Metadata('meta-data/instance-id')).Content\n}\n\nfunction setHostname($hostname) {\n    if (([System.Net.Dns]::GetHostName()) -ne $hostname) {\n        log \"Setting hostname; current host $([System.Net.Dns]::GetHostName()) does not match $hostname\"\n        Rename-Computer -NewName $hostname -Force -Restart\n    }\n}\n\n# Set up the web proxy for KO\n\n$reg = \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\"\n\nSet-ItemProperty -Path $reg -Name ProxyServer -Value \"http://secureproxy.segment.domain.com:880\"\nSet-ItemProperty -Path $reg -Name ProxyEnable -Value 1\nSet-ItemProperty -Path $reg -Name ProxyOverride -Value \"*domain.com;231.92.*'10.*;169.254.169.254;\u003clocal\u003e\"\n\n# download the puppet agent from local bucket and install\nCopy-S3Object -BucketName $installer_bucket -Key $installer -LocalFile $env:TEMP\\$installer\n\n# msiexec /qn /norestart /i puppet-agent-\u003cVERSION\u003e-x64.msi PUPPET_MASTER_SERVER=puppet.example.com\n(Start-Process -FilePath \"msiexec.exe\" -ArgumentList \"/qn /norestart /i $env:TEMP\\$installer PUPPET_MASTER_SERVER=$puppet_master\" -Wait -Passthru).ExitCode\n\n\n# Custom User-data\n\n\n\nRename-Computer -NewName $hostname -Force -Restart\n\u003c/powershell\u003e\n"
                }
            },
            "resources": {},
            "depends_on": []
        },
        {
            "path": [
                "root",
                "XYZ_CWPXYZA1012_user_data"
            ],
            "outputs": {
                "linux": {
                    "sensitive": false,
                    "type": "string",
                    "value": "#!/bin/bash\n\n# Configure the web-proxy\necho \"proxy=http://secureproxy.segment.domain.com:880\" \u003e\u003e /etc/yum.conf\n\n\n# Set the hostname\nhostnamectl set-hostname CWPXYZA1012\necho \"CWPXYZA1012\" \u003e /etc/hostname\necho \"127.0.0.1 CWPXYZA1012 localhost.localdomain localhost\" \u003e /etc/hosts\necho \"\nNETWORKING=yes\nNOZEROCONF=yes\nNETWORKING_IPV6=no\nHOSTNAME=CWPXYZA1012\" \u003e /etc/sysconfig/network\necho \"preserve_hostname: true\" \u003e\u003e /etc/cloud/cloud.cfg\n\n\n# Update Packages\nyum update -y\n\n\n# Install Puppet\ncurl -k https://acme-puppet.segment.domain.com:8080/packages/current/install.bash | bash\n\n\n# Custom User Data\n\n"
                },
                "windows": {
                    "sensitive": false,
                    "type": "string",
                    "value": "\u003cpowershell\u003e\n\nSet-ExecutionPolicy -executionpolicy remotesigned -force\nImport-Module AWSPowershell\n\n$hostname = \"CWPXYZA1012\"\n$installer = \"puppet-agent-1.5.2-x64.msi\"\n$installer_bucket = \"myproject-acme-software-media-share\"\n$puppet_master = \"acme-puppet.segment.domain.com\"\n\nfunction getIdDocVal($key, $instIdDoc=\"\") {\n    if ($instIdDoc -eq \"\") {\n        $instIdDoc = getEc2Metadata('dynamic/instance-identity/document') | ConvertFrom-Json\n    }\n\n    if($instIdDoc.PSObject.Properties.Match($key).Count) {\n        return $instIdDoc | Select -ExpandProperty $key\n    }\n}\n\nfunction getEc2Metadata($path) {\n    $url = \"http://169.254.169.254/latest/$path\"\n    try {\n        $metadata = (Invoke-WebRequest -Uri $url -TimeoutSec 0)\n\n        if ($?) {\n            return $metadata\n        } else {\n            log \"Failed to get EC2 Metadata for $path\" red\n        }\n    } catch {\n        log \"Failed to get EC2 Metadata for $path\" red\n        Break\n    }\n}\n\nfunction getInstanceId() {\n    return (getEc2Metadata('meta-data/instance-id')).Content\n}\n\nfunction setHostname($hostname) {\n    if (([System.Net.Dns]::GetHostName()) -ne $hostname) {\n        log \"Setting hostname; current host $([System.Net.Dns]::GetHostName()) does not match $hostname\"\n        Rename-Computer -NewName $hostname -Force -Restart\n    }\n}\n\n# Set up the web proxy for KO\n\n$reg = \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\"\n\nSet-ItemProperty -Path $reg -Name ProxyServer -Value \"http://secureproxy.segment.domain.com:880\"\nSet-ItemProperty -Path $reg -Name ProxyEnable -Value 1\nSet-ItemProperty -Path $reg -Name ProxyOverride -Value \"*domain.com;231.92.*'10.*;169.254.169.254;\u003clocal\u003e\"\n\n# download the puppet agent from local bucket and install\nCopy-S3Object -BucketName $installer_bucket -Key $installer -LocalFile $env:TEMP\\$installer\n\n# msiexec /qn /norestart /i puppet-agent-\u003cVERSION\u003e-x64.msi PUPPET_MASTER_SERVER=puppet.example.com\n(Start-Process -FilePath \"msiexec.exe\" -ArgumentList \"/qn /norestart /i $env:TEMP\\$installer PUPPET_MASTER_SERVER=$puppet_master\" -Wait -Passthru).ExitCode\n\n\n# Custom User-data\n\n\n\nRename-Computer -NewName $hostname -Force -Restart\n\u003c/powershell\u003e\n"
                }
            },
            "resources": {},
            "depends_on": []
        }
    ]
}
